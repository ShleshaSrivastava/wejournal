"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/y-prosemirror";
exports.ids = ["vendor-chunks/y-prosemirror"];
exports.modules = {

/***/ "(ssr)/./node_modules/y-prosemirror/src/lib.js":
/*!***********************************************!*\
  !*** ./node_modules/y-prosemirror/src/lib.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   absolutePositionToRelativePosition: () => (/* binding */ absolutePositionToRelativePosition),\n/* harmony export */   prosemirrorJSONToYDoc: () => (/* binding */ prosemirrorJSONToYDoc),\n/* harmony export */   prosemirrorJSONToYXmlFragment: () => (/* binding */ prosemirrorJSONToYXmlFragment),\n/* harmony export */   prosemirrorToYDoc: () => (/* binding */ prosemirrorToYDoc),\n/* harmony export */   prosemirrorToYXmlFragment: () => (/* binding */ prosemirrorToYXmlFragment),\n/* harmony export */   relativePositionToAbsolutePosition: () => (/* binding */ relativePositionToAbsolutePosition),\n/* harmony export */   setMeta: () => (/* binding */ setMeta),\n/* harmony export */   yDocToProsemirror: () => (/* binding */ yDocToProsemirror),\n/* harmony export */   yDocToProsemirrorJSON: () => (/* binding */ yDocToProsemirrorJSON),\n/* harmony export */   yXmlFragmentToProsemirror: () => (/* binding */ yXmlFragmentToProsemirror),\n/* harmony export */   yXmlFragmentToProsemirrorJSON: () => (/* binding */ yXmlFragmentToProsemirrorJSON)\n/* harmony export */ });\n/* harmony import */ var _plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugins/sync-plugin.js */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\");\n/* harmony import */ var _plugins_keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugins/keys.js */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! yjs */ \"(ssr)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var lib0_error__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lib0/error */ \"(ssr)/./node_modules/lib0/error.js\");\n/* harmony import */ var lib0_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lib0/map */ \"(ssr)/./node_modules/lib0/map.js\");\n/* harmony import */ var lib0_eventloop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/eventloop */ \"(ssr)/./node_modules/lib0/eventloop.js\");\n // eslint-disable-line\n\n\n // eslint-disable-line\n // eslint-disable-line\n\n\n\n/**\n * Either a node if type is YXmlElement or an Array of text nodes if YXmlText\n * @typedef {Map<Y.AbstractType, Node | Array<Node>>} ProsemirrorMapping\n */ /**\n * Is null if no timeout is in progress.\n * Is defined if a timeout is in progress.\n * Maps from view\n * @type {Map<EditorView, Map<any, any>>|null}\n */ let viewsToUpdate = null;\nconst updateMetas = ()=>{\n    const ups = /** @type {Map<EditorView, Map<any, any>>} */ viewsToUpdate;\n    viewsToUpdate = null;\n    ups.forEach((metas, view)=>{\n        const tr = view.state.tr;\n        const syncState = _plugins_keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey.getState(view.state);\n        if (syncState && syncState.binding && !syncState.binding.isDestroyed) {\n            metas.forEach((val, key)=>{\n                tr.setMeta(key, val);\n            });\n            view.dispatch(tr);\n        }\n    });\n};\nconst setMeta = (view, key, value)=>{\n    if (!viewsToUpdate) {\n        viewsToUpdate = new Map();\n        lib0_eventloop__WEBPACK_IMPORTED_MODULE_1__.timeout(0, updateMetas);\n    }\n    lib0_map__WEBPACK_IMPORTED_MODULE_2__.setIfUndefined(viewsToUpdate, view, lib0_map__WEBPACK_IMPORTED_MODULE_2__.create).set(key, value);\n};\n/**\n * Transforms a Prosemirror based absolute position to a Yjs Cursor (relative position in the Yjs model).\n *\n * @param {number} pos\n * @param {Y.XmlFragment} type\n * @param {ProsemirrorMapping} mapping\n * @return {any} relative position\n */ const absolutePositionToRelativePosition = (pos, type, mapping)=>{\n    if (pos === 0) {\n        return yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(type, 0);\n    }\n    /**\n   * @type {any}\n   */ let n = type._first === null ? null : /** @type {Y.ContentType} */ type._first.content.type;\n    while(n !== null && type !== n){\n        if (n instanceof yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n            if (n._length >= pos) {\n                return yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(n, pos);\n            } else {\n                pos -= n._length;\n            }\n            if (n._item !== null && n._item.next !== null) {\n                n = /** @type {Y.ContentType} */ n._item.next.content.type;\n            } else {\n                do {\n                    n = n._item === null ? null : n._item.parent;\n                    pos--;\n                }while (n !== type && n !== null && n._item !== null && n._item.next === null);\n                if (n !== null && n !== type) {\n                    // @ts-gnore we know that n.next !== null because of above loop conditition\n                    n = n._item === null ? null : /** @type {Y.ContentType} */ /** @type Y.Item */ n._item.next.content.type;\n                }\n            }\n        } else {\n            const pNodeSize = /** @type {any} */ (mapping.get(n) || {\n                nodeSize: 0\n            }).nodeSize;\n            if (n._first !== null && pos < pNodeSize) {\n                n = /** @type {Y.ContentType} */ n._first.content.type;\n                pos--;\n            } else {\n                if (pos === 1 && n._length === 0 && pNodeSize > 1) {\n                    // edge case, should end in this paragraph\n                    return new yjs__WEBPACK_IMPORTED_MODULE_3__.RelativePosition(n._item === null ? null : n._item.id, n._item === null ? yjs__WEBPACK_IMPORTED_MODULE_3__.findRootTypeKey(n) : null, null);\n                }\n                pos -= pNodeSize;\n                if (n._item !== null && n._item.next !== null) {\n                    n = /** @type {Y.ContentType} */ n._item.next.content.type;\n                } else {\n                    if (pos === 0) {\n                        // set to end of n.parent\n                        n = n._item === null ? n : n._item.parent;\n                        return new yjs__WEBPACK_IMPORTED_MODULE_3__.RelativePosition(n._item === null ? null : n._item.id, n._item === null ? yjs__WEBPACK_IMPORTED_MODULE_3__.findRootTypeKey(n) : null, null);\n                    }\n                    do {\n                        n = /** @type {Y.Item} */ n._item.parent;\n                        pos--;\n                    }while (n !== type && /** @type {Y.Item} */ n._item.next === null);\n                    // if n is null at this point, we have an unexpected case\n                    if (n !== type) {\n                        // We know that n._item.next is defined because of above loop condition\n                        n = /** @type {Y.ContentType} */ /** @type {Y.Item} */ /** @type {Y.Item} */ n._item.next.content.type;\n                    }\n                }\n            }\n        }\n        if (n === null) {\n            throw lib0_error__WEBPACK_IMPORTED_MODULE_4__.unexpectedCase();\n        }\n        if (pos === 0 && n.constructor !== yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText && n !== type) {\n            return createRelativePosition(n._item.parent, n._item);\n        }\n    }\n    return yjs__WEBPACK_IMPORTED_MODULE_3__.createRelativePositionFromTypeIndex(type, type._length);\n};\nconst createRelativePosition = (type, item)=>{\n    let typeid = null;\n    let tname = null;\n    if (type._item === null) {\n        tname = yjs__WEBPACK_IMPORTED_MODULE_3__.findRootTypeKey(type);\n    } else {\n        typeid = yjs__WEBPACK_IMPORTED_MODULE_3__.createID(type._item.id.client, type._item.id.clock);\n    }\n    return new yjs__WEBPACK_IMPORTED_MODULE_3__.RelativePosition(typeid, tname, item.id);\n};\n/**\n * @param {Y.Doc} y\n * @param {Y.XmlFragment} documentType Top level type that is bound to pView\n * @param {any} relPos Encoded Yjs based relative position\n * @param {ProsemirrorMapping} mapping\n * @return {null|number}\n */ const relativePositionToAbsolutePosition = (y, documentType, relPos, mapping)=>{\n    const decodedPos = yjs__WEBPACK_IMPORTED_MODULE_3__.createAbsolutePositionFromRelativePosition(relPos, y);\n    if (decodedPos === null || decodedPos.type !== documentType && !yjs__WEBPACK_IMPORTED_MODULE_3__.isParentOf(documentType, decodedPos.type._item)) {\n        return null;\n    }\n    let type = decodedPos.type;\n    let pos = 0;\n    if (type.constructor === yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n        pos = decodedPos.index;\n    } else if (type._item === null || !type._item.deleted) {\n        let n = type._first;\n        let i = 0;\n        while(i < type._length && i < decodedPos.index && n !== null){\n            if (!n.deleted) {\n                const t = /** @type {Y.ContentType} */ n.content.type;\n                i++;\n                if (t instanceof yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n                    pos += t._length;\n                } else {\n                    pos += /** @type {any} */ mapping.get(t).nodeSize;\n                }\n            }\n            n = /** @type {Y.Item} */ n.right;\n        }\n        pos += 1 // increase because we go out of n\n        ;\n    }\n    while(type !== documentType && type._item !== null){\n        // @ts-ignore\n        const parent = type._item.parent;\n        // @ts-ignore\n        if (parent._item === null || !parent._item.deleted) {\n            pos += 1 // the start tag\n            ;\n            let n = /** @type {Y.AbstractType} */ parent._first;\n            // now iterate until we found type\n            while(n !== null){\n                const contentType = /** @type {Y.ContentType} */ n.content.type;\n                if (contentType === type) {\n                    break;\n                }\n                if (!n.deleted) {\n                    if (contentType instanceof yjs__WEBPACK_IMPORTED_MODULE_3__.XmlText) {\n                        pos += contentType._length;\n                    } else {\n                        pos += /** @type {any} */ mapping.get(contentType).nodeSize;\n                    }\n                }\n                n = n.right;\n            }\n        }\n        type = /** @type {Y.AbstractType} */ parent;\n    }\n    return pos - 1 // we don't count the most outer tag, because it is a fragment\n    ;\n};\n/**\n * Utility method to convert a Prosemirror Doc Node into a Y.Doc.\n *\n * This can be used when importing existing content to Y.Doc for the first time,\n * note that this should not be used to rehydrate a Y.Doc from a database once\n * collaboration has begun as all history will be lost\n *\n * @param {Node} doc\n * @param {string} xmlFragment\n * @return {Y.Doc}\n */ function prosemirrorToYDoc(doc, xmlFragment = \"prosemirror\") {\n    const ydoc = new yjs__WEBPACK_IMPORTED_MODULE_3__.Doc();\n    const type = /** @type {Y.XmlFragment} */ ydoc.get(xmlFragment, yjs__WEBPACK_IMPORTED_MODULE_3__.XmlFragment);\n    if (!type.doc) {\n        return ydoc;\n    }\n    prosemirrorToYXmlFragment(doc, type);\n    return type.doc;\n}\n/**\n * Utility method to update an empty Y.XmlFragment with content from a Prosemirror Doc Node.\n *\n * This can be used when importing existing content to Y.Doc for the first time,\n * note that this should not be used to rehydrate a Y.Doc from a database once\n * collaboration has begun as all history will be lost\n *\n * Note: The Y.XmlFragment does not need to be part of a Y.Doc document at the time that this\n * method is called, but it must be added before any other operations are performed on it.\n *\n * @param {Node} doc prosemirror document.\n * @param {Y.XmlFragment} [xmlFragment] If supplied, an xml fragment to be\n *   populated from the prosemirror state; otherwise a new XmlFragment will be created.\n * @return {Y.XmlFragment}\n */ function prosemirrorToYXmlFragment(doc, xmlFragment) {\n    const type = xmlFragment || new yjs__WEBPACK_IMPORTED_MODULE_3__.XmlFragment();\n    const ydoc = type.doc ? type.doc : {\n        transact: (transaction)=>transaction(undefined)\n    };\n    (0,_plugins_sync_plugin_js__WEBPACK_IMPORTED_MODULE_5__.updateYFragment)(ydoc, type, doc, new Map());\n    return type;\n}\n/**\n * Utility method to convert Prosemirror compatible JSON into a Y.Doc.\n *\n * This can be used when importing existing content to Y.Doc for the first time,\n * note that this should not be used to rehydrate a Y.Doc from a database once\n * collaboration has begun as all history will be lost\n *\n * @param {Schema} schema\n * @param {any} state\n * @param {string} xmlFragment\n * @return {Y.Doc}\n */ function prosemirrorJSONToYDoc(schema, state, xmlFragment = \"prosemirror\") {\n    const doc = prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Node.fromJSON(schema, state);\n    return prosemirrorToYDoc(doc, xmlFragment);\n}\n/**\n * Utility method to convert Prosemirror compatible JSON to a Y.XmlFragment\n *\n * This can be used when importing existing content to Y.Doc for the first time,\n * note that this should not be used to rehydrate a Y.Doc from a database once\n * collaboration has begun as all history will be lost\n *\n * @param {Schema} schema\n * @param {any} state\n * @param {Y.XmlFragment} [xmlFragment] If supplied, an xml fragment to be\n *   populated from the prosemirror state; otherwise a new XmlFragment will be created.\n * @return {Y.XmlFragment}\n */ function prosemirrorJSONToYXmlFragment(schema, state, xmlFragment) {\n    const doc = prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Node.fromJSON(schema, state);\n    return prosemirrorToYXmlFragment(doc, xmlFragment);\n}\n/**\n * Utility method to convert a Y.Doc to a Prosemirror Doc node.\n *\n * @param {Schema} schema\n * @param {Y.Doc} ydoc\n * @return {Node}\n */ function yDocToProsemirror(schema, ydoc) {\n    const state = yDocToProsemirrorJSON(ydoc);\n    return prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Node.fromJSON(schema, state);\n}\n/**\n * Utility method to convert a Y.XmlFragment to a Prosemirror Doc node.\n *\n * @param {Schema} schema\n * @param {Y.XmlFragment} xmlFragment\n * @return {Node}\n */ function yXmlFragmentToProsemirror(schema, xmlFragment) {\n    const state = yXmlFragmentToProsemirrorJSON(xmlFragment);\n    return prosemirror_model__WEBPACK_IMPORTED_MODULE_6__.Node.fromJSON(schema, state);\n}\n/**\n * Utility method to convert a Y.Doc to Prosemirror compatible JSON.\n *\n * @param {Y.Doc} ydoc\n * @param {string} xmlFragment\n * @return {Record<string, any>}\n */ function yDocToProsemirrorJSON(ydoc, xmlFragment = \"prosemirror\") {\n    return yXmlFragmentToProsemirrorJSON(ydoc.getXmlFragment(xmlFragment));\n}\n/**\n * Utility method to convert a Y.Doc to Prosemirror compatible JSON.\n *\n * @param {Y.XmlFragment} xmlFragment The fragment, which must be part of a Y.Doc.\n * @return {Record<string, any>}\n */ function yXmlFragmentToProsemirrorJSON(xmlFragment) {\n    const items = xmlFragment.toArray();\n    function serialize(item) {\n        /**\n     * @type {Object} NodeObject\n     * @property {string} NodeObject.type\n     * @property {Record<string, string>=} NodeObject.attrs\n     * @property {Array<NodeObject>=} NodeObject.content\n     */ let response;\n        // TODO: Must be a better way to detect text nodes than this\n        if (!item.nodeName) {\n            const delta = item.toDelta();\n            response = delta.map((d)=>{\n                const text = {\n                    type: \"text\",\n                    text: d.insert\n                };\n                if (d.attributes) {\n                    text.marks = Object.keys(d.attributes).map((type)=>{\n                        const attrs = d.attributes[type];\n                        const mark = {\n                            type\n                        };\n                        if (Object.keys(attrs)) {\n                            mark.attrs = attrs;\n                        }\n                        return mark;\n                    });\n                }\n                return text;\n            });\n        } else {\n            response = {\n                type: item.nodeName\n            };\n            const attrs = item.getAttributes();\n            if (Object.keys(attrs).length) {\n                response.attrs = attrs;\n            }\n            const children = item.toArray();\n            if (children.length) {\n                response.content = children.map(serialize).flat();\n            }\n        }\n        return response;\n    }\n    return {\n        type: \"doc\",\n        content: items.map(serialize)\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-prosemirror/src/lib.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/y-prosemirror/src/plugins/cursor-plugin.js":
/*!*****************************************************************!*\
  !*** ./node_modules/y-prosemirror/src/plugins/cursor-plugin.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDecorations: () => (/* binding */ createDecorations),\n/* harmony export */   defaultCursorBuilder: () => (/* binding */ defaultCursorBuilder),\n/* harmony export */   defaultSelectionBuilder: () => (/* binding */ defaultSelectionBuilder),\n/* harmony export */   yCursorPlugin: () => (/* binding */ yCursorPlugin)\n/* harmony export */ });\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! yjs */ \"(ssr)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var y_protocols_awareness__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! y-protocols/awareness */ \"(ssr)/./node_modules/y-protocols/awareness.js\");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib.js */ \"(ssr)/./node_modules/y-prosemirror/src/lib.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var lib0_math__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lib0/math */ \"(ssr)/./node_modules/lib0/math.js\");\n\n // eslint-disable-line\n // eslint-disable-line\n // eslint-disable-line\n\n\n\n/**\n * Default generator for a cursor element\n *\n * @param {any} user user data\n * @return {HTMLElement}\n */ const defaultCursorBuilder = (user)=>{\n    const cursor = document.createElement(\"span\");\n    cursor.classList.add(\"ProseMirror-yjs-cursor\");\n    cursor.setAttribute(\"style\", `border-color: ${user.color}`);\n    const userDiv = document.createElement(\"div\");\n    userDiv.setAttribute(\"style\", `background-color: ${user.color}`);\n    userDiv.insertBefore(document.createTextNode(user.name), null);\n    const nonbreakingSpace1 = document.createTextNode(\"⁠\");\n    const nonbreakingSpace2 = document.createTextNode(\"⁠\");\n    cursor.insertBefore(nonbreakingSpace1, null);\n    cursor.insertBefore(userDiv, null);\n    cursor.insertBefore(nonbreakingSpace2, null);\n    return cursor;\n};\n/**\n * Default generator for the selection attributes\n *\n * @param {any} user user data\n * @return {import('prosemirror-view').DecorationAttrs}\n */ const defaultSelectionBuilder = (user)=>{\n    return {\n        style: `background-color: ${user.color}70`,\n        class: \"ProseMirror-yjs-selection\"\n    };\n};\nconst rxValidColor = /^#[0-9a-fA-F]{6}$/;\n/**\n * @param {any} state\n * @param {Awareness} awareness\n * @param {function({ name: string, color: string }):Element} createCursor\n * @param {function({ name: string, color: string }):import('prosemirror-view').DecorationAttrs} createSelection\n * @return {any} DecorationSet\n */ const createDecorations = (state, awareness, createCursor, createSelection)=>{\n    const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_1__.ySyncPluginKey.getState(state);\n    const y = ystate.doc;\n    const decorations = [];\n    if (ystate.snapshot != null || ystate.prevSnapshot != null || ystate.binding === null) {\n        // do not render cursors while snapshot is active\n        return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, []);\n    }\n    awareness.getStates().forEach((aw, clientId)=>{\n        if (clientId === y.clientID) {\n            return;\n        }\n        if (aw.cursor != null) {\n            const user = aw.user || {};\n            if (user.color == null) {\n                user.color = \"#ffa500\";\n            } else if (!rxValidColor.test(user.color)) {\n                // We only support 6-digit RGB colors in y-prosemirror\n                console.warn(\"A user uses an unsupported color format\", user);\n            }\n            if (user.name == null) {\n                user.name = `User: ${clientId}`;\n            }\n            let anchor = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.relativePositionToAbsolutePosition)(y, ystate.type, yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(aw.cursor.anchor), ystate.binding.mapping);\n            let head = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.relativePositionToAbsolutePosition)(y, ystate.type, yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(aw.cursor.head), ystate.binding.mapping);\n            if (anchor !== null && head !== null) {\n                const maxsize = lib0_math__WEBPACK_IMPORTED_MODULE_5__.max(state.doc.content.size - 1, 0);\n                anchor = lib0_math__WEBPACK_IMPORTED_MODULE_5__.min(anchor, maxsize);\n                head = lib0_math__WEBPACK_IMPORTED_MODULE_5__.min(head, maxsize);\n                decorations.push(prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.widget(head, ()=>createCursor(user), {\n                    key: clientId + \"\",\n                    side: 10\n                }));\n                const from = lib0_math__WEBPACK_IMPORTED_MODULE_5__.min(anchor, head);\n                const to = lib0_math__WEBPACK_IMPORTED_MODULE_5__.max(anchor, head);\n                decorations.push(prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.inline(from, to, createSelection(user), {\n                    inclusiveEnd: true,\n                    inclusiveStart: false\n                }));\n            }\n        }\n    });\n    return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, decorations);\n};\n/**\n * A prosemirror plugin that listens to awareness information on Yjs.\n * This requires that a `prosemirrorPlugin` is also bound to the prosemirror.\n *\n * @public\n * @param {Awareness} awareness\n * @param {object} opts\n * @param {function(any):HTMLElement} [opts.cursorBuilder]\n * @param {function(any):import('prosemirror-view').DecorationAttrs} [opts.selectionBuilder]\n * @param {function(any):any} [opts.getSelection]\n * @param {string} [cursorStateField] By default all editor bindings use the awareness 'cursor' field to propagate cursor information.\n * @return {any}\n */ const yCursorPlugin = (awareness, { cursorBuilder = defaultCursorBuilder, selectionBuilder = defaultSelectionBuilder, getSelection = (state)=>state.selection } = {}, cursorStateField = \"cursor\")=>new prosemirror_state__WEBPACK_IMPORTED_MODULE_6__.Plugin({\n        key: _keys_js__WEBPACK_IMPORTED_MODULE_1__.yCursorPluginKey,\n        state: {\n            init (_, state) {\n                return createDecorations(state, awareness, cursorBuilder, selectionBuilder);\n            },\n            apply (tr, prevState, _oldState, newState) {\n                const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_1__.ySyncPluginKey.getState(newState);\n                const yCursorState = tr.getMeta(_keys_js__WEBPACK_IMPORTED_MODULE_1__.yCursorPluginKey);\n                if (ystate && ystate.isChangeOrigin || yCursorState && yCursorState.awarenessUpdated) {\n                    return createDecorations(newState, awareness, cursorBuilder, selectionBuilder);\n                }\n                return prevState.map(tr.mapping, tr.doc);\n            }\n        },\n        props: {\n            decorations: (state)=>{\n                return _keys_js__WEBPACK_IMPORTED_MODULE_1__.yCursorPluginKey.getState(state);\n            }\n        },\n        view: (view)=>{\n            const awarenessListener = ()=>{\n                // @ts-ignore\n                if (view.docView) {\n                    (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.setMeta)(view, _keys_js__WEBPACK_IMPORTED_MODULE_1__.yCursorPluginKey, {\n                        awarenessUpdated: true\n                    });\n                }\n            };\n            const updateCursorInfo = ()=>{\n                const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_1__.ySyncPluginKey.getState(view.state);\n                // @note We make implicit checks when checking for the cursor property\n                const current = awareness.getLocalState() || {};\n                if (ystate.binding == null) {\n                    return;\n                }\n                if (view.hasFocus()) {\n                    const selection = getSelection(view.state);\n                    /**\n           * @type {Y.RelativePosition}\n           */ const anchor = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.absolutePositionToRelativePosition)(selection.anchor, ystate.type, ystate.binding.mapping);\n                    /**\n           * @type {Y.RelativePosition}\n           */ const head = (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.absolutePositionToRelativePosition)(selection.head, ystate.type, ystate.binding.mapping);\n                    if (current.cursor == null || !yjs__WEBPACK_IMPORTED_MODULE_4__.compareRelativePositions(yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(current.cursor.anchor), anchor) || !yjs__WEBPACK_IMPORTED_MODULE_4__.compareRelativePositions(yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(current.cursor.head), head)) {\n                        awareness.setLocalStateField(cursorStateField, {\n                            anchor,\n                            head\n                        });\n                    }\n                } else if (current.cursor != null && (0,_lib_js__WEBPACK_IMPORTED_MODULE_3__.relativePositionToAbsolutePosition)(ystate.doc, ystate.type, yjs__WEBPACK_IMPORTED_MODULE_4__.createRelativePositionFromJSON(current.cursor.anchor), ystate.binding.mapping) !== null) {\n                    // delete cursor information if current cursor information is owned by this editor binding\n                    awareness.setLocalStateField(cursorStateField, null);\n                }\n            };\n            awareness.on(\"change\", awarenessListener);\n            view.dom.addEventListener(\"focusin\", updateCursorInfo);\n            view.dom.addEventListener(\"focusout\", updateCursorInfo);\n            return {\n                update: updateCursorInfo,\n                destroy: ()=>{\n                    view.dom.removeEventListener(\"focusin\", updateCursorInfo);\n                    view.dom.removeEventListener(\"focusout\", updateCursorInfo);\n                    awareness.off(\"change\", awarenessListener);\n                    awareness.setLocalStateField(cursorStateField, null);\n                }\n            };\n        }\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-prosemirror/src/plugins/cursor-plugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/y-prosemirror/src/plugins/keys.js":
/*!********************************************************!*\
  !*** ./node_modules/y-prosemirror/src/plugins/keys.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   yCursorPluginKey: () => (/* binding */ yCursorPluginKey),\n/* harmony export */   ySyncPluginKey: () => (/* binding */ ySyncPluginKey),\n/* harmony export */   yUndoPluginKey: () => (/* binding */ yUndoPluginKey)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n // eslint-disable-line\n/**\n * The unique prosemirror plugin key for syncPlugin\n *\n * @public\n */ const ySyncPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"y-sync\");\n/**\n * The unique prosemirror plugin key for undoPlugin\n *\n * @public\n */ const yUndoPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"y-undo\");\n/**\n * The unique prosemirror plugin key for cursorPlugin\n *\n * @public\n */ const yCursorPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"yjs-cursor\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveS1wcm9zZW1pcnJvci9zcmMvcGx1Z2lucy9rZXlzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDNkMsQ0FBQyxzQkFBc0I7QUFFcEU7Ozs7Q0FJQyxHQUNNLE1BQU1DLGlCQUFpQixJQUFJRCx3REFBU0EsQ0FBQyxVQUFTO0FBRXJEOzs7O0NBSUMsR0FDTSxNQUFNRSxpQkFBaUIsSUFBSUYsd0RBQVNBLENBQUMsVUFBUztBQUVyRDs7OztDQUlDLEdBQ00sTUFBTUcsbUJBQW1CLElBQUlILHdEQUFTQSxDQUFDLGNBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL3ktcHJvc2VtaXJyb3Ivc3JjL3BsdWdpbnMva2V5cy5qcz8wZTA0Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgUGx1Z2luS2V5IH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuLyoqXG4gKiBUaGUgdW5pcXVlIHByb3NlbWlycm9yIHBsdWdpbiBrZXkgZm9yIHN5bmNQbHVnaW5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBjb25zdCB5U3luY1BsdWdpbktleSA9IG5ldyBQbHVnaW5LZXkoJ3ktc3luYycpXG5cbi8qKlxuICogVGhlIHVuaXF1ZSBwcm9zZW1pcnJvciBwbHVnaW4ga2V5IGZvciB1bmRvUGx1Z2luXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgeVVuZG9QbHVnaW5LZXkgPSBuZXcgUGx1Z2luS2V5KCd5LXVuZG8nKVxuXG4vKipcbiAqIFRoZSB1bmlxdWUgcHJvc2VtaXJyb3IgcGx1Z2luIGtleSBmb3IgY3Vyc29yUGx1Z2luXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgY29uc3QgeUN1cnNvclBsdWdpbktleSA9IG5ldyBQbHVnaW5LZXkoJ3lqcy1jdXJzb3InKVxuIl0sIm5hbWVzIjpbIlBsdWdpbktleSIsInlTeW5jUGx1Z2luS2V5IiwieVVuZG9QbHVnaW5LZXkiLCJ5Q3Vyc29yUGx1Z2luS2V5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-prosemirror/src/plugins/keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js":
/*!***************************************************************!*\
  !*** ./node_modules/y-prosemirror/src/plugins/sync-plugin.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProsemirrorBinding: () => (/* binding */ ProsemirrorBinding),\n/* harmony export */   getRelativeSelection: () => (/* binding */ getRelativeSelection),\n/* harmony export */   isVisible: () => (/* binding */ isVisible),\n/* harmony export */   updateYFragment: () => (/* binding */ updateYFragment),\n/* harmony export */   ySyncPlugin: () => (/* binding */ ySyncPlugin)\n/* harmony export */ });\n/* harmony import */ var lib0_mutex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lib0/mutex */ \"(ssr)/./node_modules/lib0/mutex.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var lib0_math__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! lib0/math */ \"(ssr)/./node_modules/lib0/math.js\");\n/* harmony import */ var lib0_object__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! lib0/object */ \"(ssr)/./node_modules/lib0/object.js\");\n/* harmony import */ var lib0_set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/set */ \"(ssr)/./node_modules/lib0/set.js\");\n/* harmony import */ var lib0_diff__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! lib0/diff */ \"(ssr)/./node_modules/lib0/diff.js\");\n/* harmony import */ var lib0_error__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lib0/error */ \"(ssr)/./node_modules/lib0/error.js\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! yjs */ \"(ssr)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var _lib_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../lib.js */ \"(ssr)/./node_modules/y-prosemirror/src/lib.js\");\n/* harmony import */ var lib0_random__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lib0/random */ \"(ssr)/./node_modules/lib0/random.js\");\n/* harmony import */ var lib0_environment__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lib0/environment */ \"(ssr)/./node_modules/lib0/environment.js\");\n/* harmony import */ var lib0_dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lib0/dom */ \"(ssr)/./node_modules/lib0/dom.js\");\n/* harmony import */ var lib0_eventloop__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lib0/eventloop */ \"(ssr)/./node_modules/lib0/eventloop.js\");\n/**\n * @module bindings/prosemirror\n */ \n\n // eslint-disable-line\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @param {Y.Item} item\n * @param {Y.Snapshot} [snapshot]\n */ const isVisible = (item, snapshot)=>snapshot === undefined ? !item.deleted : snapshot.sv.has(item.id.client) && /** @type {number} */ snapshot.sv.get(item.id.client) > item.id.clock && !yjs__WEBPACK_IMPORTED_MODULE_0__.isDeleted(snapshot.ds, item.id);\n/**\n * Either a node if type is YXmlElement or an Array of text nodes if YXmlText\n * @typedef {Map<Y.AbstractType<any>, PModel.Node | Array<PModel.Node>>} ProsemirrorMapping\n */ /**\n * @typedef {Object} ColorDef\n * @property {string} ColorDef.light\n * @property {string} ColorDef.dark\n */ /**\n * @typedef {Object} YSyncOpts\n * @property {Array<ColorDef>} [YSyncOpts.colors]\n * @property {Map<string,ColorDef>} [YSyncOpts.colorMapping]\n * @property {Y.PermanentUserData|null} [YSyncOpts.permanentUserData]\n * @property {function} [YSyncOpts.onFirstRender] Fired when the content from Yjs is initially rendered to ProseMirror\n */ /**\n * @type {Array<ColorDef>}\n */ const defaultColors = [\n    {\n        light: \"#ecd44433\",\n        dark: \"#ecd444\"\n    }\n];\n/**\n * @param {Map<string,ColorDef>} colorMapping\n * @param {Array<ColorDef>} colors\n * @param {string} user\n * @return {ColorDef}\n */ const getUserColor = (colorMapping, colors, user)=>{\n    // @todo do not hit the same color twice if possible\n    if (!colorMapping.has(user)) {\n        if (colorMapping.size < colors.length) {\n            const usedColors = lib0_set__WEBPACK_IMPORTED_MODULE_1__.create();\n            colorMapping.forEach((color)=>usedColors.add(color));\n            colors = colors.filter((color)=>!usedColors.has(color));\n        }\n        colorMapping.set(user, lib0_random__WEBPACK_IMPORTED_MODULE_2__.oneOf(colors));\n    }\n    return /** @type {ColorDef} */ colorMapping.get(user);\n};\n/**\n * This plugin listens to changes in prosemirror view and keeps yXmlState and view in sync.\n *\n * This plugin also keeps references to the type and the shared document so other plugins can access it.\n * @param {Y.XmlFragment} yXmlFragment\n * @param {YSyncOpts} opts\n * @return {any} Returns a prosemirror plugin that binds to this type\n */ const ySyncPlugin = (yXmlFragment, { colors = defaultColors, colorMapping = new Map(), permanentUserData = null, onFirstRender = ()=>{} } = {})=>{\n    let changedInitialContent = false;\n    let rerenderTimeout;\n    const plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_3__.Plugin({\n        props: {\n            editable: (state)=>{\n                const syncState = _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey.getState(state);\n                return syncState.snapshot == null && syncState.prevSnapshot == null;\n            }\n        },\n        key: _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey,\n        state: {\n            /**\n       * @returns {any}\n       */ init: (_initargs, _state)=>{\n                return {\n                    type: yXmlFragment,\n                    doc: yXmlFragment.doc,\n                    binding: null,\n                    snapshot: null,\n                    prevSnapshot: null,\n                    isChangeOrigin: false,\n                    isUndoRedoOperation: false,\n                    addToHistory: true,\n                    colors,\n                    colorMapping,\n                    permanentUserData\n                };\n            },\n            apply: (tr, pluginState)=>{\n                const change = tr.getMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey);\n                if (change !== undefined) {\n                    pluginState = Object.assign({}, pluginState);\n                    for(const key in change){\n                        pluginState[key] = change[key];\n                    }\n                }\n                pluginState.addToHistory = tr.getMeta(\"addToHistory\") !== false;\n                // always set isChangeOrigin. If undefined, this is not change origin.\n                pluginState.isChangeOrigin = change !== undefined && !!change.isChangeOrigin;\n                pluginState.isUndoRedoOperation = change !== undefined && !!change.isChangeOrigin && !!change.isUndoRedoOperation;\n                if (pluginState.binding !== null) {\n                    if (change !== undefined && (change.snapshot != null || change.prevSnapshot != null)) {\n                        // snapshot changed, rerender next\n                        lib0_eventloop__WEBPACK_IMPORTED_MODULE_5__.timeout(0, ()=>{\n                            if (pluginState.binding == null || pluginState.binding.isDestroyed) {\n                                return;\n                            }\n                            if (change.restore == null) {\n                                pluginState.binding._renderSnapshot(change.snapshot, change.prevSnapshot, pluginState);\n                            } else {\n                                pluginState.binding._renderSnapshot(change.snapshot, change.snapshot, pluginState);\n                                // reset to current prosemirror state\n                                delete pluginState.restore;\n                                delete pluginState.snapshot;\n                                delete pluginState.prevSnapshot;\n                                pluginState.binding.mux(()=>{\n                                    pluginState.binding._prosemirrorChanged(pluginState.binding.prosemirrorView.state.doc);\n                                });\n                            }\n                        });\n                    }\n                }\n                return pluginState;\n            }\n        },\n        view: (view)=>{\n            const binding = new ProsemirrorBinding(yXmlFragment, view);\n            if (rerenderTimeout != null) {\n                rerenderTimeout.destroy();\n            }\n            // Make sure this is called in a separate context\n            rerenderTimeout = lib0_eventloop__WEBPACK_IMPORTED_MODULE_5__.timeout(0, ()=>{\n                binding._forceRerender();\n                view.dispatch(view.state.tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, {\n                    binding\n                }));\n                onFirstRender();\n            });\n            return {\n                update: ()=>{\n                    const pluginState = plugin.getState(view.state);\n                    if (pluginState.snapshot == null && pluginState.prevSnapshot == null) {\n                        if (changedInitialContent || view.state.doc.content.findDiffStart(view.state.doc.type.createAndFill().content) !== null) {\n                            changedInitialContent = true;\n                            if (pluginState.addToHistory === false && !pluginState.isChangeOrigin) {\n                                const yUndoPluginState = _keys_js__WEBPACK_IMPORTED_MODULE_4__.yUndoPluginKey.getState(view.state);\n                                /**\n                 * @type {Y.UndoManager}\n                 */ const um = yUndoPluginState && yUndoPluginState.undoManager;\n                                if (um) {\n                                    um.stopCapturing();\n                                }\n                            }\n                            binding.mux(()=>{\n                                /** @type {Y.Doc} */ pluginState.doc.transact((tr)=>{\n                                    tr.meta.set(\"addToHistory\", pluginState.addToHistory);\n                                    binding._prosemirrorChanged(view.state.doc);\n                                }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey);\n                            });\n                        }\n                    }\n                },\n                destroy: ()=>{\n                    rerenderTimeout.destroy();\n                    binding.destroy();\n                }\n            };\n        }\n    });\n    return plugin;\n};\n/**\n * @param {any} tr\n * @param {any} relSel\n * @param {ProsemirrorBinding} binding\n */ const restoreRelativeSelection = (tr, relSel, binding)=>{\n    if (relSel !== null && relSel.anchor !== null && relSel.head !== null) {\n        const anchor = (0,_lib_js__WEBPACK_IMPORTED_MODULE_6__.relativePositionToAbsolutePosition)(binding.doc, binding.type, relSel.anchor, binding.mapping);\n        const head = (0,_lib_js__WEBPACK_IMPORTED_MODULE_6__.relativePositionToAbsolutePosition)(binding.doc, binding.type, relSel.head, binding.mapping);\n        if (anchor !== null && head !== null) {\n            tr = tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_3__.TextSelection.create(tr.doc, anchor, head));\n        }\n    }\n};\nconst getRelativeSelection = (pmbinding, state)=>({\n        anchor: (0,_lib_js__WEBPACK_IMPORTED_MODULE_6__.absolutePositionToRelativePosition)(state.selection.anchor, pmbinding.type, pmbinding.mapping),\n        head: (0,_lib_js__WEBPACK_IMPORTED_MODULE_6__.absolutePositionToRelativePosition)(state.selection.head, pmbinding.type, pmbinding.mapping)\n    });\n/**\n * Binding for prosemirror.\n *\n * @protected\n */ class ProsemirrorBinding {\n    /**\n   * @param {Y.XmlFragment} yXmlFragment The bind source\n   * @param {any} prosemirrorView The target binding\n   */ constructor(yXmlFragment, prosemirrorView){\n        this.type = yXmlFragment;\n        this.prosemirrorView = prosemirrorView;\n        this.mux = (0,lib0_mutex__WEBPACK_IMPORTED_MODULE_7__.createMutex)();\n        this.isDestroyed = false;\n        /**\n     * @type {ProsemirrorMapping}\n     */ this.mapping = new Map();\n        this._observeFunction = this._typeChanged.bind(this);\n        /**\n     * @type {Y.Doc}\n     */ // @ts-ignore\n        this.doc = yXmlFragment.doc;\n        /**\n     * current selection as relative positions in the Yjs model\n     */ this.beforeTransactionSelection = null;\n        this.beforeAllTransactions = ()=>{\n            if (this.beforeTransactionSelection === null) {\n                this.beforeTransactionSelection = getRelativeSelection(this, prosemirrorView.state);\n            }\n        };\n        this.afterAllTransactions = ()=>{\n            this.beforeTransactionSelection = null;\n        };\n        this.doc.on(\"beforeAllTransactions\", this.beforeAllTransactions);\n        this.doc.on(\"afterAllTransactions\", this.afterAllTransactions);\n        yXmlFragment.observeDeep(this._observeFunction);\n        this._domSelectionInView = null;\n    }\n    /**\n   * Create a transaction for changing the prosemirror state.\n   *\n   * @returns\n   */ get _tr() {\n        return this.prosemirrorView.state.tr.setMeta(\"addToHistory\", false);\n    }\n    _isLocalCursorInView() {\n        if (!this.prosemirrorView.hasFocus()) return false;\n        if (lib0_environment__WEBPACK_IMPORTED_MODULE_8__.isBrowser && this._domSelectionInView === null) {\n            // Calculate the domSelectionInView and clear by next tick after all events are finished\n            lib0_eventloop__WEBPACK_IMPORTED_MODULE_5__.timeout(0, ()=>{\n                this._domSelectionInView = null;\n            });\n            this._domSelectionInView = this._isDomSelectionInView();\n        }\n        return this._domSelectionInView;\n    }\n    _isDomSelectionInView() {\n        const selection = this.prosemirrorView._root.getSelection();\n        const range = this.prosemirrorView._root.createRange();\n        range.setStart(selection.anchorNode, selection.anchorOffset);\n        range.setEnd(selection.focusNode, selection.focusOffset);\n        // This is a workaround for an edgecase where getBoundingClientRect will\n        // return zero values if the selection is collapsed at the start of a newline\n        // see reference here: https://stackoverflow.com/a/59780954\n        const rects = range.getClientRects();\n        if (rects.length === 0) {\n            // probably buggy newline behavior, explicitly select the node contents\n            if (range.startContainer && range.collapsed) {\n                range.selectNodeContents(range.startContainer);\n            }\n        }\n        const bounding = range.getBoundingClientRect();\n        const documentElement = lib0_dom__WEBPACK_IMPORTED_MODULE_9__.doc.documentElement;\n        return bounding.bottom >= 0 && bounding.right >= 0 && bounding.left <= (window.innerWidth || documentElement.clientWidth || 0) && bounding.top <= (window.innerHeight || documentElement.clientHeight || 0);\n    }\n    /**\n   * @param {Y.Snapshot} snapshot\n   * @param {Y.Snapshot} prevSnapshot\n   */ renderSnapshot(snapshot, prevSnapshot) {\n        if (!prevSnapshot) {\n            prevSnapshot = yjs__WEBPACK_IMPORTED_MODULE_0__.createSnapshot(yjs__WEBPACK_IMPORTED_MODULE_0__.createDeleteSet(), new Map());\n        }\n        this.prosemirrorView.dispatch(this._tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, {\n            snapshot,\n            prevSnapshot\n        }));\n    }\n    unrenderSnapshot() {\n        this.mapping = new Map();\n        this.mux(()=>{\n            const fragmentContent = this.type.toArray().map((t)=>createNodeFromYElement(/** @type {Y.XmlElement} */ t, this.prosemirrorView.state.schema, this.mapping)).filter((n)=>n !== null);\n            // @ts-ignore\n            const tr = this._tr.replace(0, this.prosemirrorView.state.doc.content.size, new prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Fragment.from(fragmentContent), 0, 0));\n            tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, {\n                snapshot: null,\n                prevSnapshot: null\n            });\n            this.prosemirrorView.dispatch(tr);\n        });\n    }\n    _forceRerender() {\n        this.mapping = new Map();\n        this.mux(()=>{\n            const fragmentContent = this.type.toArray().map((t)=>createNodeFromYElement(/** @type {Y.XmlElement} */ t, this.prosemirrorView.state.schema, this.mapping)).filter((n)=>n !== null);\n            // @ts-ignore\n            const tr = this._tr.replace(0, this.prosemirrorView.state.doc.content.size, new prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Fragment.from(fragmentContent), 0, 0));\n            this.prosemirrorView.dispatch(tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, {\n                isChangeOrigin: true\n            }));\n        });\n    }\n    /**\n   * @param {Y.Snapshot} snapshot\n   * @param {Y.Snapshot} prevSnapshot\n   * @param {Object} pluginState\n   */ _renderSnapshot(snapshot, prevSnapshot, pluginState) {\n        if (!snapshot) {\n            snapshot = yjs__WEBPACK_IMPORTED_MODULE_0__.snapshot(this.doc);\n        }\n        // clear mapping because we are going to rerender\n        this.mapping = new Map();\n        this.mux(()=>{\n            this.doc.transact((transaction)=>{\n                // before rendering, we are going to sanitize ops and split deleted ops\n                // if they were deleted by seperate users.\n                const pud = pluginState.permanentUserData;\n                if (pud) {\n                    pud.dss.forEach((ds)=>{\n                        yjs__WEBPACK_IMPORTED_MODULE_0__.iterateDeletedStructs(transaction, ds, (_item)=>{});\n                    });\n                }\n                /**\n         * @param {'removed'|'added'} type\n         * @param {Y.ID} id\n         */ const computeYChange = (type, id)=>{\n                    const user = type === \"added\" ? pud.getUserByClientId(id.client) : pud.getUserByDeletedId(id);\n                    return {\n                        user,\n                        type,\n                        color: getUserColor(pluginState.colorMapping, pluginState.colors, user)\n                    };\n                };\n                // Create document fragment and render\n                const fragmentContent = yjs__WEBPACK_IMPORTED_MODULE_0__.typeListToArraySnapshot(this.type, new yjs__WEBPACK_IMPORTED_MODULE_0__.Snapshot(prevSnapshot.ds, snapshot.sv)).map((t)=>{\n                    if (!t._item.deleted || isVisible(t._item, snapshot) || isVisible(t._item, prevSnapshot)) {\n                        return createNodeFromYElement(t, this.prosemirrorView.state.schema, new Map(), snapshot, prevSnapshot, computeYChange);\n                    } else {\n                        // No need to render elements that are not visible by either snapshot.\n                        // If a client adds and deletes content in the same snapshot the element is not visible by either snapshot.\n                        return null;\n                    }\n                }).filter((n)=>n !== null);\n                // @ts-ignore\n                const tr = this._tr.replace(0, this.prosemirrorView.state.doc.content.size, new prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Fragment.from(fragmentContent), 0, 0));\n                this.prosemirrorView.dispatch(tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, {\n                    isChangeOrigin: true\n                }));\n            }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey);\n        });\n    }\n    /**\n   * @param {Array<Y.YEvent<any>>} events\n   * @param {Y.Transaction} transaction\n   */ _typeChanged(events, transaction) {\n        const syncState = _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey.getState(this.prosemirrorView.state);\n        if (events.length === 0 || syncState.snapshot != null || syncState.prevSnapshot != null) {\n            // drop out if snapshot is active\n            this.renderSnapshot(syncState.snapshot, syncState.prevSnapshot);\n            return;\n        }\n        this.mux(()=>{\n            /**\n       * @param {any} _\n       * @param {Y.AbstractType<any>} type\n       */ const delType = (_, type)=>this.mapping.delete(type);\n            yjs__WEBPACK_IMPORTED_MODULE_0__.iterateDeletedStructs(transaction, transaction.deleteSet, (struct)=>{\n                if (struct.constructor === yjs__WEBPACK_IMPORTED_MODULE_0__.Item) {\n                    const type = /** @type {Y.ContentType} */ /** @type {Y.Item} */ struct.content.type;\n                    type && this.mapping.delete(type);\n                }\n            });\n            transaction.changed.forEach(delType);\n            transaction.changedParentTypes.forEach(delType);\n            const fragmentContent = this.type.toArray().map((t)=>createNodeIfNotExists(/** @type {Y.XmlElement | Y.XmlHook} */ t, this.prosemirrorView.state.schema, this.mapping)).filter((n)=>n !== null);\n            // @ts-ignore\n            let tr = this._tr.replace(0, this.prosemirrorView.state.doc.content.size, new prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_10__.Fragment.from(fragmentContent), 0, 0));\n            restoreRelativeSelection(tr, this.beforeTransactionSelection, this);\n            tr = tr.setMeta(_keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey, {\n                isChangeOrigin: true,\n                isUndoRedoOperation: transaction.origin instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.UndoManager\n            });\n            if (this.beforeTransactionSelection !== null && this._isLocalCursorInView()) {\n                tr.scrollIntoView();\n            }\n            this.prosemirrorView.dispatch(tr);\n        });\n    }\n    _prosemirrorChanged(doc) {\n        this.doc.transact(()=>{\n            updateYFragment(this.doc, this.type, doc, this.mapping);\n            this.beforeTransactionSelection = getRelativeSelection(this, this.prosemirrorView.state);\n        }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey);\n    }\n    destroy() {\n        this.isDestroyed = true;\n        this.type.unobserveDeep(this._observeFunction);\n        this.doc.off(\"beforeAllTransactions\", this.beforeAllTransactions);\n        this.doc.off(\"afterAllTransactions\", this.afterAllTransactions);\n    }\n}\n/**\n * @private\n * @param {Y.XmlElement | Y.XmlHook} el\n * @param {PModel.Schema} schema\n * @param {ProsemirrorMapping} mapping\n * @param {Y.Snapshot} [snapshot]\n * @param {Y.Snapshot} [prevSnapshot]\n * @param {function('removed' | 'added', Y.ID):any} [computeYChange]\n * @return {PModel.Node | null}\n */ const createNodeIfNotExists = (el, schema, mapping, snapshot, prevSnapshot, computeYChange)=>{\n    const node = /** @type {PModel.Node} */ mapping.get(el);\n    if (node === undefined) {\n        if (el instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement) {\n            return createNodeFromYElement(el, schema, mapping, snapshot, prevSnapshot, computeYChange);\n        } else {\n            throw lib0_error__WEBPACK_IMPORTED_MODULE_11__.methodUnimplemented() // we are currently not handling hooks\n            ;\n        }\n    }\n    return node;\n};\n/**\n * @private\n * @param {Y.XmlElement} el\n * @param {any} schema\n * @param {ProsemirrorMapping} mapping\n * @param {Y.Snapshot} [snapshot]\n * @param {Y.Snapshot} [prevSnapshot]\n * @param {function('removed' | 'added', Y.ID):any} [computeYChange]\n * @return {PModel.Node | null} Returns node if node could be created. Otherwise it deletes the yjs type and returns null\n */ const createNodeFromYElement = (el, schema, mapping, snapshot, prevSnapshot, computeYChange)=>{\n    const children = [];\n    const createChildren = (type)=>{\n        if (type.constructor === yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement) {\n            const n = createNodeIfNotExists(type, schema, mapping, snapshot, prevSnapshot, computeYChange);\n            if (n !== null) {\n                children.push(n);\n            }\n        } else {\n            const ns = createTextNodesFromYText(type, schema, mapping, snapshot, prevSnapshot, computeYChange);\n            if (ns !== null) {\n                ns.forEach((textchild)=>{\n                    if (textchild !== null) {\n                        children.push(textchild);\n                    }\n                });\n            }\n        }\n    };\n    if (snapshot === undefined || prevSnapshot === undefined) {\n        el.toArray().forEach(createChildren);\n    } else {\n        yjs__WEBPACK_IMPORTED_MODULE_0__.typeListToArraySnapshot(el, new yjs__WEBPACK_IMPORTED_MODULE_0__.Snapshot(prevSnapshot.ds, snapshot.sv)).forEach(createChildren);\n    }\n    try {\n        const attrs = el.getAttributes(snapshot);\n        if (snapshot !== undefined) {\n            if (!isVisible(/** @type {Y.Item} */ el._item, snapshot)) {\n                attrs.ychange = computeYChange ? computeYChange(\"removed\", /** @type {Y.Item} */ el._item.id) : {\n                    type: \"removed\"\n                };\n            } else if (!isVisible(/** @type {Y.Item} */ el._item, prevSnapshot)) {\n                attrs.ychange = computeYChange ? computeYChange(\"added\", /** @type {Y.Item} */ el._item.id) : {\n                    type: \"added\"\n                };\n            }\n        }\n        const node = schema.node(el.nodeName, attrs, children);\n        mapping.set(el, node);\n        return node;\n    } catch (e) {\n        // an error occured while creating the node. This is probably a result of a concurrent action.\n        /** @type {Y.Doc} */ el.doc.transact((transaction)=>{\n            /** @type {Y.Item} */ el._item.delete(transaction);\n        }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey);\n        mapping.delete(el);\n        return null;\n    }\n};\n/**\n * @private\n * @param {Y.XmlText} text\n * @param {any} schema\n * @param {ProsemirrorMapping} _mapping\n * @param {Y.Snapshot} [snapshot]\n * @param {Y.Snapshot} [prevSnapshot]\n * @param {function('removed' | 'added', Y.ID):any} [computeYChange]\n * @return {Array<PModel.Node>|null}\n */ const createTextNodesFromYText = (text, schema, _mapping, snapshot, prevSnapshot, computeYChange)=>{\n    const nodes = [];\n    const deltas = text.toDelta(snapshot, prevSnapshot, computeYChange);\n    try {\n        for(let i = 0; i < deltas.length; i++){\n            const delta = deltas[i];\n            const marks = [];\n            for(const markName in delta.attributes){\n                marks.push(schema.mark(markName, delta.attributes[markName]));\n            }\n            nodes.push(schema.text(delta.insert, marks));\n        }\n    } catch (e) {\n        // an error occured while creating the node. This is probably a result of a concurrent action.\n        /** @type {Y.Doc} */ text.doc.transact((transaction)=>{\n            /** @type {Y.Item} */ text._item.delete(transaction);\n        }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey);\n        return null;\n    }\n    // @ts-ignore\n    return nodes;\n};\n/**\n * @private\n * @param {Array<any>} nodes prosemirror node\n * @param {ProsemirrorMapping} mapping\n * @return {Y.XmlText}\n */ const createTypeFromTextNodes = (nodes, mapping)=>{\n    const type = new yjs__WEBPACK_IMPORTED_MODULE_0__.XmlText();\n    const delta = nodes.map((node)=>({\n            // @ts-ignore\n            insert: node.text,\n            attributes: marksToAttributes(node.marks)\n        }));\n    type.applyDelta(delta);\n    mapping.set(type, nodes);\n    return type;\n};\n/**\n * @private\n * @param {any} node prosemirror node\n * @param {ProsemirrorMapping} mapping\n * @return {Y.XmlElement}\n */ const createTypeFromElementNode = (node, mapping)=>{\n    const type = new yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement(node.type.name);\n    for(const key in node.attrs){\n        const val = node.attrs[key];\n        if (val !== null && key !== \"ychange\") {\n            type.setAttribute(key, val);\n        }\n    }\n    type.insert(0, normalizePNodeContent(node).map((n)=>createTypeFromTextOrElementNode(n, mapping)));\n    mapping.set(type, node);\n    return type;\n};\n/**\n * @private\n * @param {PModel.Node|Array<PModel.Node>} node prosemirror text node\n * @param {ProsemirrorMapping} mapping\n * @return {Y.XmlElement|Y.XmlText}\n */ const createTypeFromTextOrElementNode = (node, mapping)=>node instanceof Array ? createTypeFromTextNodes(node, mapping) : createTypeFromElementNode(node, mapping);\nconst isObject = (val)=>typeof val === \"object\" && val !== null;\nconst equalAttrs = (pattrs, yattrs)=>{\n    const keys = Object.keys(pattrs).filter((key)=>pattrs[key] !== null);\n    let eq = keys.length === Object.keys(yattrs).filter((key)=>yattrs[key] !== null).length;\n    for(let i = 0; i < keys.length && eq; i++){\n        const key = keys[i];\n        const l = pattrs[key];\n        const r = yattrs[key];\n        eq = key === \"ychange\" || l === r || isObject(l) && isObject(r) && equalAttrs(l, r);\n    }\n    return eq;\n};\n/**\n * @typedef {Array<Array<PModel.Node>|PModel.Node>} NormalizedPNodeContent\n */ /**\n * @param {any} pnode\n * @return {NormalizedPNodeContent}\n */ const normalizePNodeContent = (pnode)=>{\n    const c = pnode.content.content;\n    const res = [];\n    for(let i = 0; i < c.length; i++){\n        const n = c[i];\n        if (n.isText) {\n            const textNodes = [];\n            for(let tnode = c[i]; i < c.length && tnode.isText; tnode = c[++i]){\n                textNodes.push(tnode);\n            }\n            i--;\n            res.push(textNodes);\n        } else {\n            res.push(n);\n        }\n    }\n    return res;\n};\n/**\n * @param {Y.XmlText} ytext\n * @param {Array<any>} ptexts\n */ const equalYTextPText = (ytext, ptexts)=>{\n    const delta = ytext.toDelta();\n    return delta.length === ptexts.length && delta.every((d, i)=>d.insert === /** @type {any} */ ptexts[i].text && lib0_object__WEBPACK_IMPORTED_MODULE_12__.keys(d.attributes || {}).length === ptexts[i].marks.length && ptexts[i].marks.every((mark)=>equalAttrs(d.attributes[mark.type.name] || {}, mark.attrs)));\n};\n/**\n * @param {Y.XmlElement|Y.XmlText|Y.XmlHook} ytype\n * @param {any|Array<any>} pnode\n */ const equalYTypePNode = (ytype, pnode)=>{\n    if (ytype instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement && !(pnode instanceof Array) && matchNodeName(ytype, pnode)) {\n        const normalizedContent = normalizePNodeContent(pnode);\n        return ytype._length === normalizedContent.length && equalAttrs(ytype.getAttributes(), pnode.attrs) && ytype.toArray().every((ychild, i)=>equalYTypePNode(ychild, normalizedContent[i]));\n    }\n    return ytype instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlText && pnode instanceof Array && equalYTextPText(ytype, pnode);\n};\n/**\n * @param {PModel.Node | Array<PModel.Node> | undefined} mapped\n * @param {PModel.Node | Array<PModel.Node>} pcontent\n */ const mappedIdentity = (mapped, pcontent)=>mapped === pcontent || mapped instanceof Array && pcontent instanceof Array && mapped.length === pcontent.length && mapped.every((a, i)=>pcontent[i] === a);\n/**\n * @param {Y.XmlElement} ytype\n * @param {PModel.Node} pnode\n * @param {ProsemirrorMapping} mapping\n * @return {{ foundMappedChild: boolean, equalityFactor: number }}\n */ const computeChildEqualityFactor = (ytype, pnode, mapping)=>{\n    const yChildren = ytype.toArray();\n    const pChildren = normalizePNodeContent(pnode);\n    const pChildCnt = pChildren.length;\n    const yChildCnt = yChildren.length;\n    const minCnt = lib0_math__WEBPACK_IMPORTED_MODULE_13__.min(yChildCnt, pChildCnt);\n    let left = 0;\n    let right = 0;\n    let foundMappedChild = false;\n    for(; left < minCnt; left++){\n        const leftY = yChildren[left];\n        const leftP = pChildren[left];\n        if (mappedIdentity(mapping.get(leftY), leftP)) {\n            foundMappedChild = true // definite (good) match!\n            ;\n        } else if (!equalYTypePNode(leftY, leftP)) {\n            break;\n        }\n    }\n    for(; left + right < minCnt; right++){\n        const rightY = yChildren[yChildCnt - right - 1];\n        const rightP = pChildren[pChildCnt - right - 1];\n        if (mappedIdentity(mapping.get(rightY), rightP)) {\n            foundMappedChild = true;\n        } else if (!equalYTypePNode(rightY, rightP)) {\n            break;\n        }\n    }\n    return {\n        equalityFactor: left + right,\n        foundMappedChild\n    };\n};\nconst ytextTrans = (ytext)=>{\n    let str = \"\";\n    /**\n   * @type {Y.Item|null}\n   */ let n = ytext._start;\n    const nAttrs = {};\n    while(n !== null){\n        if (!n.deleted) {\n            if (n.countable && n.content instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.ContentString) {\n                str += n.content.str;\n            } else if (n.content instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.ContentFormat) {\n                nAttrs[n.content.key] = null;\n            }\n        }\n        n = n.right;\n    }\n    return {\n        str,\n        nAttrs\n    };\n};\n/**\n * @todo test this more\n *\n * @param {Y.Text} ytext\n * @param {Array<any>} ptexts\n * @param {ProsemirrorMapping} mapping\n */ const updateYText = (ytext, ptexts, mapping)=>{\n    mapping.set(ytext, ptexts);\n    const { nAttrs, str } = ytextTrans(ytext);\n    const content = ptexts.map((p)=>({\n            insert: /** @type {any} */ p.text,\n            attributes: Object.assign({}, nAttrs, marksToAttributes(p.marks))\n        }));\n    const { insert, remove, index } = (0,lib0_diff__WEBPACK_IMPORTED_MODULE_14__.simpleDiff)(str, content.map((c)=>c.insert).join(\"\"));\n    ytext.delete(index, remove);\n    ytext.insert(index, insert);\n    ytext.applyDelta(content.map((c)=>({\n            retain: c.insert.length,\n            attributes: c.attributes\n        })));\n};\nconst marksToAttributes = (marks)=>{\n    const pattrs = {};\n    marks.forEach((mark)=>{\n        if (mark.type.name !== \"ychange\") {\n            pattrs[mark.type.name] = mark.attrs;\n        }\n    });\n    return pattrs;\n};\n/**\n * @private\n * @param {{transact: Function}} y\n * @param {Y.XmlFragment} yDomFragment\n * @param {any} pNode\n * @param {ProsemirrorMapping} mapping\n */ const updateYFragment = (y, yDomFragment, pNode, mapping)=>{\n    if (yDomFragment instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement && yDomFragment.nodeName !== pNode.type.name) {\n        throw new Error(\"node name mismatch!\");\n    }\n    mapping.set(yDomFragment, pNode);\n    // update attributes\n    if (yDomFragment instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement) {\n        const yDomAttrs = yDomFragment.getAttributes();\n        const pAttrs = pNode.attrs;\n        for(const key in pAttrs){\n            if (pAttrs[key] !== null) {\n                if (yDomAttrs[key] !== pAttrs[key] && key !== \"ychange\") {\n                    yDomFragment.setAttribute(key, pAttrs[key]);\n                }\n            } else {\n                yDomFragment.removeAttribute(key);\n            }\n        }\n        // remove all keys that are no longer in pAttrs\n        for(const key in yDomAttrs){\n            if (pAttrs[key] === undefined) {\n                yDomFragment.removeAttribute(key);\n            }\n        }\n    }\n    // update children\n    const pChildren = normalizePNodeContent(pNode);\n    const pChildCnt = pChildren.length;\n    const yChildren = yDomFragment.toArray();\n    const yChildCnt = yChildren.length;\n    const minCnt = lib0_math__WEBPACK_IMPORTED_MODULE_13__.min(pChildCnt, yChildCnt);\n    let left = 0;\n    let right = 0;\n    // find number of matching elements from left\n    for(; left < minCnt; left++){\n        const leftY = yChildren[left];\n        const leftP = pChildren[left];\n        if (!mappedIdentity(mapping.get(leftY), leftP)) {\n            if (equalYTypePNode(leftY, leftP)) {\n                // update mapping\n                mapping.set(leftY, leftP);\n            } else {\n                break;\n            }\n        }\n    }\n    // find number of matching elements from right\n    for(; right + left + 1 < minCnt; right++){\n        const rightY = yChildren[yChildCnt - right - 1];\n        const rightP = pChildren[pChildCnt - right - 1];\n        if (!mappedIdentity(mapping.get(rightY), rightP)) {\n            if (equalYTypePNode(rightY, rightP)) {\n                // update mapping\n                mapping.set(rightY, rightP);\n            } else {\n                break;\n            }\n        }\n    }\n    y.transact(()=>{\n        // try to compare and update\n        while(yChildCnt - left - right > 0 && pChildCnt - left - right > 0){\n            const leftY = yChildren[left];\n            const leftP = pChildren[left];\n            const rightY = yChildren[yChildCnt - right - 1];\n            const rightP = pChildren[pChildCnt - right - 1];\n            if (leftY instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlText && leftP instanceof Array) {\n                if (!equalYTextPText(leftY, leftP)) {\n                    updateYText(leftY, leftP, mapping);\n                }\n                left += 1;\n            } else {\n                let updateLeft = leftY instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement && matchNodeName(leftY, leftP);\n                let updateRight = rightY instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlElement && matchNodeName(rightY, rightP);\n                if (updateLeft && updateRight) {\n                    // decide which which element to update\n                    const equalityLeft = computeChildEqualityFactor(/** @type {Y.XmlElement} */ leftY, /** @type {PModel.Node} */ leftP, mapping);\n                    const equalityRight = computeChildEqualityFactor(/** @type {Y.XmlElement} */ rightY, /** @type {PModel.Node} */ rightP, mapping);\n                    if (equalityLeft.foundMappedChild && !equalityRight.foundMappedChild) {\n                        updateRight = false;\n                    } else if (!equalityLeft.foundMappedChild && equalityRight.foundMappedChild) {\n                        updateLeft = false;\n                    } else if (equalityLeft.equalityFactor < equalityRight.equalityFactor) {\n                        updateLeft = false;\n                    } else {\n                        updateRight = false;\n                    }\n                }\n                if (updateLeft) {\n                    updateYFragment(y, /** @type {Y.XmlFragment} */ leftY, /** @type {PModel.Node} */ leftP, mapping);\n                    left += 1;\n                } else if (updateRight) {\n                    updateYFragment(y, /** @type {Y.XmlFragment} */ rightY, /** @type {PModel.Node} */ rightP, mapping);\n                    right += 1;\n                } else {\n                    mapping.delete(yDomFragment.get(left));\n                    yDomFragment.delete(left, 1);\n                    yDomFragment.insert(left, [\n                        createTypeFromTextOrElementNode(leftP, mapping)\n                    ]);\n                    left += 1;\n                }\n            }\n        }\n        const yDelLen = yChildCnt - left - right;\n        if (yChildCnt === 1 && pChildCnt === 0 && yChildren[0] instanceof yjs__WEBPACK_IMPORTED_MODULE_0__.XmlText) {\n            mapping.delete(yChildren[0]);\n            // Edge case handling https://github.com/yjs/y-prosemirror/issues/108\n            // Only delete the content of the Y.Text to retain remote changes on the same Y.Text object\n            yChildren[0].delete(0, yChildren[0].length);\n        } else if (yDelLen > 0) {\n            yDomFragment.slice(left, left + yDelLen).forEach((type)=>mapping.delete(type));\n            yDomFragment.delete(left, yDelLen);\n        }\n        if (left + right < pChildCnt) {\n            const ins = [];\n            for(let i = left; i < pChildCnt - right; i++){\n                ins.push(createTypeFromTextOrElementNode(pChildren[i], mapping));\n            }\n            yDomFragment.insert(left, ins);\n        }\n    }, _keys_js__WEBPACK_IMPORTED_MODULE_4__.ySyncPluginKey);\n};\n/**\n * @function\n * @param {Y.XmlElement} yElement\n * @param {any} pNode Prosemirror Node\n */ const matchNodeName = (yElement, pNode)=>!(pNode instanceof Array) && yElement.nodeName === pNode.type.name;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/y-prosemirror/src/plugins/undo-plugin.js":
/*!***************************************************************!*\
  !*** ./node_modules/y-prosemirror/src/plugins/undo-plugin.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultDeleteFilter: () => (/* binding */ defaultDeleteFilter),\n/* harmony export */   defaultProtectedNodes: () => (/* binding */ defaultProtectedNodes),\n/* harmony export */   redo: () => (/* binding */ redo),\n/* harmony export */   undo: () => (/* binding */ undo),\n/* harmony export */   yUndoPlugin: () => (/* binding */ yUndoPlugin)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var _sync_plugin_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sync-plugin.js */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! yjs */ \"(ssr)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var _keys_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./keys.js */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n // eslint-disable-line\n\n\n\nconst undo = (state)=>{\n    const undoManager = _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey.getState(state).undoManager;\n    if (undoManager != null) {\n        undoManager.undo();\n        return true;\n    }\n};\nconst redo = (state)=>{\n    const undoManager = _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey.getState(state).undoManager;\n    if (undoManager != null) {\n        undoManager.redo();\n        return true;\n    }\n};\nconst defaultProtectedNodes = new Set([\n    \"paragraph\"\n]);\nconst defaultDeleteFilter = (item, protectedNodes)=>!(item instanceof yjs__WEBPACK_IMPORTED_MODULE_1__.Item) || !(item.content instanceof yjs__WEBPACK_IMPORTED_MODULE_1__.ContentType) || !(item.content.type instanceof yjs__WEBPACK_IMPORTED_MODULE_1__.Text || item.content.type instanceof yjs__WEBPACK_IMPORTED_MODULE_1__.XmlElement && protectedNodes.has(item.content.type.nodeName)) || item.content.type._length === 0;\nconst yUndoPlugin = ({ protectedNodes = defaultProtectedNodes, trackedOrigins = [], undoManager = null } = {})=>new prosemirror_state__WEBPACK_IMPORTED_MODULE_2__.Plugin({\n        key: _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey,\n        state: {\n            init: (initargs, state)=>{\n                // TODO: check if plugin order matches and fix\n                const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey.getState(state);\n                const _undoManager = undoManager || new yjs__WEBPACK_IMPORTED_MODULE_1__.UndoManager(ystate.type, {\n                    trackedOrigins: new Set([\n                        _keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey\n                    ].concat(trackedOrigins)),\n                    deleteFilter: (item)=>defaultDeleteFilter(item, protectedNodes),\n                    captureTransaction: (tr)=>tr.meta.get(\"addToHistory\") !== false\n                });\n                return {\n                    undoManager: _undoManager,\n                    prevSel: null,\n                    hasUndoOps: _undoManager.undoStack.length > 0,\n                    hasRedoOps: _undoManager.redoStack.length > 0\n                };\n            },\n            /**\n     * @returns {any}\n     */ apply: (tr, val, oldState, state)=>{\n                const binding = _keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey.getState(state).binding;\n                const undoManager = val.undoManager;\n                const hasUndoOps = undoManager.undoStack.length > 0;\n                const hasRedoOps = undoManager.redoStack.length > 0;\n                if (binding) {\n                    return {\n                        undoManager,\n                        prevSel: (0,_sync_plugin_js__WEBPACK_IMPORTED_MODULE_3__.getRelativeSelection)(binding, oldState),\n                        hasUndoOps,\n                        hasRedoOps\n                    };\n                } else {\n                    if (hasUndoOps !== val.hasUndoOps || hasRedoOps !== val.hasRedoOps) {\n                        return Object.assign({}, val, {\n                            hasUndoOps: undoManager.undoStack.length > 0,\n                            hasRedoOps: undoManager.redoStack.length > 0\n                        });\n                    } else {\n                        return val;\n                    }\n                }\n            }\n        },\n        view: (view)=>{\n            const ystate = _keys_js__WEBPACK_IMPORTED_MODULE_0__.ySyncPluginKey.getState(view.state);\n            const undoManager = _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey.getState(view.state).undoManager;\n            undoManager.on(\"stack-item-added\", ({ stackItem })=>{\n                const binding = ystate.binding;\n                if (binding) {\n                    stackItem.meta.set(binding, _keys_js__WEBPACK_IMPORTED_MODULE_0__.yUndoPluginKey.getState(view.state).prevSel);\n                }\n            });\n            undoManager.on(\"stack-item-popped\", ({ stackItem })=>{\n                const binding = ystate.binding;\n                if (binding) {\n                    binding.beforeTransactionSelection = stackItem.meta.get(binding) || binding.beforeTransactionSelection;\n                }\n            });\n            return {\n                destroy: ()=>{\n                    undoManager.destroy();\n                }\n            };\n        }\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-prosemirror/src/plugins/undo-plugin.js\n");

/***/ })

};
;