"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/prosemirror-tables";
exports.ids = ["vendor-chunks/prosemirror-tables"];
exports.modules = {

/***/ "(ssr)/./node_modules/prosemirror-tables/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/prosemirror-tables/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CellBookmark: () => (/* binding */ CellBookmark),\n/* harmony export */   CellSelection: () => (/* binding */ CellSelection),\n/* harmony export */   ResizeState: () => (/* binding */ ResizeState),\n/* harmony export */   TableMap: () => (/* binding */ TableMap),\n/* harmony export */   TableView: () => (/* binding */ TableView),\n/* harmony export */   __clipCells: () => (/* binding */ clipCells),\n/* harmony export */   __insertCells: () => (/* binding */ insertCells),\n/* harmony export */   __pastedCells: () => (/* binding */ pastedCells),\n/* harmony export */   addColSpan: () => (/* binding */ addColSpan),\n/* harmony export */   addColumn: () => (/* binding */ addColumn),\n/* harmony export */   addColumnAfter: () => (/* binding */ addColumnAfter),\n/* harmony export */   addColumnBefore: () => (/* binding */ addColumnBefore),\n/* harmony export */   addRow: () => (/* binding */ addRow),\n/* harmony export */   addRowAfter: () => (/* binding */ addRowAfter),\n/* harmony export */   addRowBefore: () => (/* binding */ addRowBefore),\n/* harmony export */   cellAround: () => (/* binding */ cellAround),\n/* harmony export */   colCount: () => (/* binding */ colCount),\n/* harmony export */   columnIsHeader: () => (/* binding */ columnIsHeader),\n/* harmony export */   columnResizing: () => (/* binding */ columnResizing),\n/* harmony export */   columnResizingPluginKey: () => (/* binding */ columnResizingPluginKey),\n/* harmony export */   deleteColumn: () => (/* binding */ deleteColumn),\n/* harmony export */   deleteRow: () => (/* binding */ deleteRow),\n/* harmony export */   deleteTable: () => (/* binding */ deleteTable),\n/* harmony export */   findCell: () => (/* binding */ findCell),\n/* harmony export */   fixTables: () => (/* binding */ fixTables),\n/* harmony export */   fixTablesKey: () => (/* binding */ fixTablesKey),\n/* harmony export */   goToNextCell: () => (/* binding */ goToNextCell),\n/* harmony export */   handlePaste: () => (/* binding */ handlePaste),\n/* harmony export */   inSameTable: () => (/* binding */ inSameTable),\n/* harmony export */   isInTable: () => (/* binding */ isInTable),\n/* harmony export */   mergeCells: () => (/* binding */ mergeCells),\n/* harmony export */   moveCellForward: () => (/* binding */ moveCellForward),\n/* harmony export */   nextCell: () => (/* binding */ nextCell),\n/* harmony export */   pointsAtCell: () => (/* binding */ pointsAtCell),\n/* harmony export */   removeColSpan: () => (/* binding */ removeColSpan),\n/* harmony export */   removeColumn: () => (/* binding */ removeColumn),\n/* harmony export */   removeRow: () => (/* binding */ removeRow),\n/* harmony export */   rowIsHeader: () => (/* binding */ rowIsHeader),\n/* harmony export */   selectedRect: () => (/* binding */ selectedRect),\n/* harmony export */   selectionCell: () => (/* binding */ selectionCell),\n/* harmony export */   setCellAttr: () => (/* binding */ setCellAttr),\n/* harmony export */   splitCell: () => (/* binding */ splitCell),\n/* harmony export */   splitCellWithType: () => (/* binding */ splitCellWithType),\n/* harmony export */   tableEditing: () => (/* binding */ tableEditing),\n/* harmony export */   tableEditingKey: () => (/* binding */ tableEditingKey),\n/* harmony export */   tableNodeTypes: () => (/* binding */ tableNodeTypes),\n/* harmony export */   tableNodes: () => (/* binding */ tableNodes),\n/* harmony export */   toggleHeader: () => (/* binding */ toggleHeader),\n/* harmony export */   toggleHeaderCell: () => (/* binding */ toggleHeaderCell),\n/* harmony export */   toggleHeaderColumn: () => (/* binding */ toggleHeaderColumn),\n/* harmony export */   toggleHeaderRow: () => (/* binding */ toggleHeaderRow),\n/* harmony export */   updateColumnsOnResize: () => (/* binding */ updateColumnsOnResize)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prosemirror-keymap */ \"(ssr)/./node_modules/prosemirror-keymap/dist/index.js\");\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/./node_modules/prosemirror-transform/dist/index.js\");\n// src/index.ts\n\n// src/cellselection.ts\n\n\n\n// src/tablemap.ts\nvar readFromCache;\nvar addToCache;\nif (typeof WeakMap != \"undefined\") {\n    let cache = /* @__PURE__ */ new WeakMap();\n    readFromCache = (key)=>cache.get(key);\n    addToCache = (key, value)=>{\n        cache.set(key, value);\n        return value;\n    };\n} else {\n    const cache = [];\n    const cacheSize = 10;\n    let cachePos = 0;\n    readFromCache = (key)=>{\n        for(let i = 0; i < cache.length; i += 2)if (cache[i] == key) return cache[i + 1];\n    };\n    addToCache = (key, value)=>{\n        if (cachePos == cacheSize) cachePos = 0;\n        cache[cachePos++] = key;\n        return cache[cachePos++] = value;\n    };\n}\nvar TableMap = class {\n    constructor(width, height, map, problems){\n        this.width = width;\n        this.height = height;\n        this.map = map;\n        this.problems = problems;\n    }\n    // Find the dimensions of the cell at the given position.\n    findCell(pos) {\n        for(let i = 0; i < this.map.length; i++){\n            const curPos = this.map[i];\n            if (curPos != pos) continue;\n            const left = i % this.width;\n            const top = i / this.width | 0;\n            let right = left + 1;\n            let bottom = top + 1;\n            for(let j = 1; right < this.width && this.map[i + j] == curPos; j++){\n                right++;\n            }\n            for(let j = 1; bottom < this.height && this.map[i + this.width * j] == curPos; j++){\n                bottom++;\n            }\n            return {\n                left,\n                top,\n                right,\n                bottom\n            };\n        }\n        throw new RangeError(`No cell with offset ${pos} found`);\n    }\n    // Find the left side of the cell at the given position.\n    colCount(pos) {\n        for(let i = 0; i < this.map.length; i++){\n            if (this.map[i] == pos) {\n                return i % this.width;\n            }\n        }\n        throw new RangeError(`No cell with offset ${pos} found`);\n    }\n    // Find the next cell in the given direction, starting from the cell\n    // at `pos`, if any.\n    nextCell(pos, axis, dir) {\n        const { left, right, top, bottom } = this.findCell(pos);\n        if (axis == \"horiz\") {\n            if (dir < 0 ? left == 0 : right == this.width) return null;\n            return this.map[top * this.width + (dir < 0 ? left - 1 : right)];\n        } else {\n            if (dir < 0 ? top == 0 : bottom == this.height) return null;\n            return this.map[left + this.width * (dir < 0 ? top - 1 : bottom)];\n        }\n    }\n    // Get the rectangle spanning the two given cells.\n    rectBetween(a, b) {\n        const { left: leftA, right: rightA, top: topA, bottom: bottomA } = this.findCell(a);\n        const { left: leftB, right: rightB, top: topB, bottom: bottomB } = this.findCell(b);\n        return {\n            left: Math.min(leftA, leftB),\n            top: Math.min(topA, topB),\n            right: Math.max(rightA, rightB),\n            bottom: Math.max(bottomA, bottomB)\n        };\n    }\n    // Return the position of all cells that have the top left corner in\n    // the given rectangle.\n    cellsInRect(rect) {\n        const result = [];\n        const seen = {};\n        for(let row = rect.top; row < rect.bottom; row++){\n            for(let col = rect.left; col < rect.right; col++){\n                const index = row * this.width + col;\n                const pos = this.map[index];\n                if (seen[pos]) continue;\n                seen[pos] = true;\n                if (col == rect.left && col && this.map[index - 1] == pos || row == rect.top && row && this.map[index - this.width] == pos) {\n                    continue;\n                }\n                result.push(pos);\n            }\n        }\n        return result;\n    }\n    // Return the position at which the cell at the given row and column\n    // starts, or would start, if a cell started there.\n    positionAt(row, col, table) {\n        for(let i = 0, rowStart = 0;; i++){\n            const rowEnd = rowStart + table.child(i).nodeSize;\n            if (i == row) {\n                let index = col + row * this.width;\n                const rowEndIndex = (row + 1) * this.width;\n                while(index < rowEndIndex && this.map[index] < rowStart)index++;\n                return index == rowEndIndex ? rowEnd - 1 : this.map[index];\n            }\n            rowStart = rowEnd;\n        }\n    }\n    // Find the table map for the given table node.\n    static get(table) {\n        return readFromCache(table) || addToCache(table, computeMap(table));\n    }\n};\nfunction computeMap(table) {\n    if (table.type.spec.tableRole != \"table\") throw new RangeError(\"Not a table node: \" + table.type.name);\n    const width = findWidth(table), height = table.childCount;\n    const map = [];\n    let mapPos = 0;\n    let problems = null;\n    const colWidths = [];\n    for(let i = 0, e = width * height; i < e; i++)map[i] = 0;\n    for(let row = 0, pos = 0; row < height; row++){\n        const rowNode = table.child(row);\n        pos++;\n        for(let i = 0;; i++){\n            while(mapPos < map.length && map[mapPos] != 0)mapPos++;\n            if (i == rowNode.childCount) break;\n            const cellNode = rowNode.child(i);\n            const { colspan, rowspan, colwidth } = cellNode.attrs;\n            for(let h = 0; h < rowspan; h++){\n                if (h + row >= height) {\n                    (problems || (problems = [])).push({\n                        type: \"overlong_rowspan\",\n                        pos,\n                        n: rowspan - h\n                    });\n                    break;\n                }\n                const start = mapPos + h * width;\n                for(let w = 0; w < colspan; w++){\n                    if (map[start + w] == 0) map[start + w] = pos;\n                    else (problems || (problems = [])).push({\n                        type: \"collision\",\n                        row,\n                        pos,\n                        n: colspan - w\n                    });\n                    const colW = colwidth && colwidth[w];\n                    if (colW) {\n                        const widthIndex = (start + w) % width * 2, prev = colWidths[widthIndex];\n                        if (prev == null || prev != colW && colWidths[widthIndex + 1] == 1) {\n                            colWidths[widthIndex] = colW;\n                            colWidths[widthIndex + 1] = 1;\n                        } else if (prev == colW) {\n                            colWidths[widthIndex + 1]++;\n                        }\n                    }\n                }\n            }\n            mapPos += colspan;\n            pos += cellNode.nodeSize;\n        }\n        const expectedPos = (row + 1) * width;\n        let missing = 0;\n        while(mapPos < expectedPos)if (map[mapPos++] == 0) missing++;\n        if (missing) (problems || (problems = [])).push({\n            type: \"missing\",\n            row,\n            n: missing\n        });\n        pos++;\n    }\n    const tableMap = new TableMap(width, height, map, problems);\n    let badWidths = false;\n    for(let i = 0; !badWidths && i < colWidths.length; i += 2)if (colWidths[i] != null && colWidths[i + 1] < height) badWidths = true;\n    if (badWidths) findBadColWidths(tableMap, colWidths, table);\n    return tableMap;\n}\nfunction findWidth(table) {\n    let width = -1;\n    let hasRowSpan = false;\n    for(let row = 0; row < table.childCount; row++){\n        const rowNode = table.child(row);\n        let rowWidth = 0;\n        if (hasRowSpan) for(let j = 0; j < row; j++){\n            const prevRow = table.child(j);\n            for(let i = 0; i < prevRow.childCount; i++){\n                const cell = prevRow.child(i);\n                if (j + cell.attrs.rowspan > row) rowWidth += cell.attrs.colspan;\n            }\n        }\n        for(let i = 0; i < rowNode.childCount; i++){\n            const cell = rowNode.child(i);\n            rowWidth += cell.attrs.colspan;\n            if (cell.attrs.rowspan > 1) hasRowSpan = true;\n        }\n        if (width == -1) width = rowWidth;\n        else if (width != rowWidth) width = Math.max(width, rowWidth);\n    }\n    return width;\n}\nfunction findBadColWidths(map, colWidths, table) {\n    if (!map.problems) map.problems = [];\n    const seen = {};\n    for(let i = 0; i < map.map.length; i++){\n        const pos = map.map[i];\n        if (seen[pos]) continue;\n        seen[pos] = true;\n        const node = table.nodeAt(pos);\n        if (!node) {\n            throw new RangeError(`No cell with offset ${pos} found`);\n        }\n        let updated = null;\n        const attrs = node.attrs;\n        for(let j = 0; j < attrs.colspan; j++){\n            const col = (i + j) % map.width;\n            const colWidth = colWidths[col * 2];\n            if (colWidth != null && (!attrs.colwidth || attrs.colwidth[j] != colWidth)) (updated || (updated = freshColWidth(attrs)))[j] = colWidth;\n        }\n        if (updated) map.problems.unshift({\n            type: \"colwidth mismatch\",\n            pos,\n            colwidth: updated\n        });\n    }\n}\nfunction freshColWidth(attrs) {\n    if (attrs.colwidth) return attrs.colwidth.slice();\n    const result = [];\n    for(let i = 0; i < attrs.colspan; i++)result.push(0);\n    return result;\n}\n// src/util.ts\n\n// src/schema.ts\nfunction getCellAttrs(dom, extraAttrs) {\n    if (typeof dom === \"string\") {\n        return {};\n    }\n    const widthAttr = dom.getAttribute(\"data-colwidth\");\n    const widths = widthAttr && /^\\d+(,\\d+)*$/.test(widthAttr) ? widthAttr.split(\",\").map((s)=>Number(s)) : null;\n    const colspan = Number(dom.getAttribute(\"colspan\") || 1);\n    const result = {\n        colspan,\n        rowspan: Number(dom.getAttribute(\"rowspan\") || 1),\n        colwidth: widths && widths.length == colspan ? widths : null\n    };\n    for(const prop in extraAttrs){\n        const getter = extraAttrs[prop].getFromDOM;\n        const value = getter && getter(dom);\n        if (value != null) {\n            result[prop] = value;\n        }\n    }\n    return result;\n}\nfunction setCellAttrs(node, extraAttrs) {\n    const attrs = {};\n    if (node.attrs.colspan != 1) attrs.colspan = node.attrs.colspan;\n    if (node.attrs.rowspan != 1) attrs.rowspan = node.attrs.rowspan;\n    if (node.attrs.colwidth) attrs[\"data-colwidth\"] = node.attrs.colwidth.join(\",\");\n    for(const prop in extraAttrs){\n        const setter = extraAttrs[prop].setDOMAttr;\n        if (setter) setter(node.attrs[prop], attrs);\n    }\n    return attrs;\n}\nfunction tableNodes(options) {\n    const extraAttrs = options.cellAttributes || {};\n    const cellAttrs = {\n        colspan: {\n            default: 1\n        },\n        rowspan: {\n            default: 1\n        },\n        colwidth: {\n            default: null\n        }\n    };\n    for(const prop in extraAttrs)cellAttrs[prop] = {\n        default: extraAttrs[prop].default\n    };\n    return {\n        table: {\n            content: \"table_row+\",\n            tableRole: \"table\",\n            isolating: true,\n            group: options.tableGroup,\n            parseDOM: [\n                {\n                    tag: \"table\"\n                }\n            ],\n            toDOM () {\n                return [\n                    \"table\",\n                    [\n                        \"tbody\",\n                        0\n                    ]\n                ];\n            }\n        },\n        table_row: {\n            content: \"(table_cell | table_header)*\",\n            tableRole: \"row\",\n            parseDOM: [\n                {\n                    tag: \"tr\"\n                }\n            ],\n            toDOM () {\n                return [\n                    \"tr\",\n                    0\n                ];\n            }\n        },\n        table_cell: {\n            content: options.cellContent,\n            attrs: cellAttrs,\n            tableRole: \"cell\",\n            isolating: true,\n            parseDOM: [\n                {\n                    tag: \"td\",\n                    getAttrs: (dom)=>getCellAttrs(dom, extraAttrs)\n                }\n            ],\n            toDOM (node) {\n                return [\n                    \"td\",\n                    setCellAttrs(node, extraAttrs),\n                    0\n                ];\n            }\n        },\n        table_header: {\n            content: options.cellContent,\n            attrs: cellAttrs,\n            tableRole: \"header_cell\",\n            isolating: true,\n            parseDOM: [\n                {\n                    tag: \"th\",\n                    getAttrs: (dom)=>getCellAttrs(dom, extraAttrs)\n                }\n            ],\n            toDOM (node) {\n                return [\n                    \"th\",\n                    setCellAttrs(node, extraAttrs),\n                    0\n                ];\n            }\n        }\n    };\n}\nfunction tableNodeTypes(schema) {\n    let result = schema.cached.tableNodeTypes;\n    if (!result) {\n        result = schema.cached.tableNodeTypes = {};\n        for(const name in schema.nodes){\n            const type = schema.nodes[name], role = type.spec.tableRole;\n            if (role) result[role] = type;\n        }\n    }\n    return result;\n}\n// src/util.ts\nvar tableEditingKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"selectingCells\");\nfunction cellAround($pos) {\n    for(let d = $pos.depth - 1; d > 0; d--)if ($pos.node(d).type.spec.tableRole == \"row\") return $pos.node(0).resolve($pos.before(d + 1));\n    return null;\n}\nfunction cellWrapping($pos) {\n    for(let d = $pos.depth; d > 0; d--){\n        const role = $pos.node(d).type.spec.tableRole;\n        if (role === \"cell\" || role === \"header_cell\") return $pos.node(d);\n    }\n    return null;\n}\nfunction isInTable(state) {\n    const $head = state.selection.$head;\n    for(let d = $head.depth; d > 0; d--)if ($head.node(d).type.spec.tableRole == \"row\") return true;\n    return false;\n}\nfunction selectionCell(state) {\n    const sel = state.selection;\n    if (\"$anchorCell\" in sel && sel.$anchorCell) {\n        return sel.$anchorCell.pos > sel.$headCell.pos ? sel.$anchorCell : sel.$headCell;\n    } else if (\"node\" in sel && sel.node && sel.node.type.spec.tableRole == \"cell\") {\n        return sel.$anchor;\n    }\n    const $cell = cellAround(sel.$head) || cellNear(sel.$head);\n    if ($cell) {\n        return $cell;\n    }\n    throw new RangeError(`No cell found around position ${sel.head}`);\n}\nfunction cellNear($pos) {\n    for(let after = $pos.nodeAfter, pos = $pos.pos; after; after = after.firstChild, pos++){\n        const role = after.type.spec.tableRole;\n        if (role == \"cell\" || role == \"header_cell\") return $pos.doc.resolve(pos);\n    }\n    for(let before = $pos.nodeBefore, pos = $pos.pos; before; before = before.lastChild, pos--){\n        const role = before.type.spec.tableRole;\n        if (role == \"cell\" || role == \"header_cell\") return $pos.doc.resolve(pos - before.nodeSize);\n    }\n}\nfunction pointsAtCell($pos) {\n    return $pos.parent.type.spec.tableRole == \"row\" && !!$pos.nodeAfter;\n}\nfunction moveCellForward($pos) {\n    return $pos.node(0).resolve($pos.pos + $pos.nodeAfter.nodeSize);\n}\nfunction inSameTable($cellA, $cellB) {\n    return $cellA.depth == $cellB.depth && $cellA.pos >= $cellB.start(-1) && $cellA.pos <= $cellB.end(-1);\n}\nfunction findCell($pos) {\n    return TableMap.get($pos.node(-1)).findCell($pos.pos - $pos.start(-1));\n}\nfunction colCount($pos) {\n    return TableMap.get($pos.node(-1)).colCount($pos.pos - $pos.start(-1));\n}\nfunction nextCell($pos, axis, dir) {\n    const table = $pos.node(-1);\n    const map = TableMap.get(table);\n    const tableStart = $pos.start(-1);\n    const moved = map.nextCell($pos.pos - tableStart, axis, dir);\n    return moved == null ? null : $pos.node(0).resolve(tableStart + moved);\n}\nfunction removeColSpan(attrs, pos, n = 1) {\n    const result = {\n        ...attrs,\n        colspan: attrs.colspan - n\n    };\n    if (result.colwidth) {\n        result.colwidth = result.colwidth.slice();\n        result.colwidth.splice(pos, n);\n        if (!result.colwidth.some((w)=>w > 0)) result.colwidth = null;\n    }\n    return result;\n}\nfunction addColSpan(attrs, pos, n = 1) {\n    const result = {\n        ...attrs,\n        colspan: attrs.colspan + n\n    };\n    if (result.colwidth) {\n        result.colwidth = result.colwidth.slice();\n        for(let i = 0; i < n; i++)result.colwidth.splice(pos, 0, 0);\n    }\n    return result;\n}\nfunction columnIsHeader(map, table, col) {\n    const headerCell = tableNodeTypes(table.type.schema).header_cell;\n    for(let row = 0; row < map.height; row++)if (table.nodeAt(map.map[col + row * map.width]).type != headerCell) return false;\n    return true;\n}\n// src/cellselection.ts\nvar CellSelection = class _CellSelection extends prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection {\n    // A table selection is identified by its anchor and head cells. The\n    // positions given to this constructor should point _before_ two\n    // cells in the same table. They may be the same, to select a single\n    // cell.\n    constructor($anchorCell, $headCell = $anchorCell){\n        const table = $anchorCell.node(-1);\n        const map = TableMap.get(table);\n        const tableStart = $anchorCell.start(-1);\n        const rect = map.rectBetween($anchorCell.pos - tableStart, $headCell.pos - tableStart);\n        const doc = $anchorCell.node(0);\n        const cells = map.cellsInRect(rect).filter((p)=>p != $headCell.pos - tableStart);\n        cells.unshift($headCell.pos - tableStart);\n        const ranges = cells.map((pos)=>{\n            const cell = table.nodeAt(pos);\n            if (!cell) {\n                throw RangeError(`No cell with offset ${pos} found`);\n            }\n            const from = tableStart + pos + 1;\n            return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.SelectionRange(doc.resolve(from), doc.resolve(from + cell.content.size));\n        });\n        super(ranges[0].$from, ranges[0].$to, ranges);\n        this.$anchorCell = $anchorCell;\n        this.$headCell = $headCell;\n    }\n    map(doc, mapping) {\n        const $anchorCell = doc.resolve(mapping.map(this.$anchorCell.pos));\n        const $headCell = doc.resolve(mapping.map(this.$headCell.pos));\n        if (pointsAtCell($anchorCell) && pointsAtCell($headCell) && inSameTable($anchorCell, $headCell)) {\n            const tableChanged = this.$anchorCell.node(-1) != $anchorCell.node(-1);\n            if (tableChanged && this.isRowSelection()) return _CellSelection.rowSelection($anchorCell, $headCell);\n            else if (tableChanged && this.isColSelection()) return _CellSelection.colSelection($anchorCell, $headCell);\n            else return new _CellSelection($anchorCell, $headCell);\n        }\n        return prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.between($anchorCell, $headCell);\n    }\n    // Returns a rectangular slice of table rows containing the selected\n    // cells.\n    content() {\n        const table = this.$anchorCell.node(-1);\n        const map = TableMap.get(table);\n        const tableStart = this.$anchorCell.start(-1);\n        const rect = map.rectBetween(this.$anchorCell.pos - tableStart, this.$headCell.pos - tableStart);\n        const seen = {};\n        const rows = [];\n        for(let row = rect.top; row < rect.bottom; row++){\n            const rowContent = [];\n            for(let index = row * map.width + rect.left, col = rect.left; col < rect.right; col++, index++){\n                const pos = map.map[index];\n                if (seen[pos]) continue;\n                seen[pos] = true;\n                const cellRect = map.findCell(pos);\n                let cell = table.nodeAt(pos);\n                if (!cell) {\n                    throw RangeError(`No cell with offset ${pos} found`);\n                }\n                const extraLeft = rect.left - cellRect.left;\n                const extraRight = cellRect.right - rect.right;\n                if (extraLeft > 0 || extraRight > 0) {\n                    let attrs = cell.attrs;\n                    if (extraLeft > 0) {\n                        attrs = removeColSpan(attrs, 0, extraLeft);\n                    }\n                    if (extraRight > 0) {\n                        attrs = removeColSpan(attrs, attrs.colspan - extraRight, extraRight);\n                    }\n                    if (cellRect.left < rect.left) {\n                        cell = cell.type.createAndFill(attrs);\n                        if (!cell) {\n                            throw RangeError(`Could not create cell with attrs ${JSON.stringify(attrs)}`);\n                        }\n                    } else {\n                        cell = cell.type.create(attrs, cell.content);\n                    }\n                }\n                if (cellRect.top < rect.top || cellRect.bottom > rect.bottom) {\n                    const attrs = {\n                        ...cell.attrs,\n                        rowspan: Math.min(cellRect.bottom, rect.bottom) - Math.max(cellRect.top, rect.top)\n                    };\n                    if (cellRect.top < rect.top) {\n                        cell = cell.type.createAndFill(attrs);\n                    } else {\n                        cell = cell.type.create(attrs, cell.content);\n                    }\n                }\n                rowContent.push(cell);\n            }\n            rows.push(table.child(row).copy(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(rowContent)));\n        }\n        const fragment = this.isColSelection() && this.isRowSelection() ? table : rows;\n        return new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(fragment), 1, 1);\n    }\n    replace(tr, content = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice.empty) {\n        const mapFrom = tr.steps.length, ranges = this.ranges;\n        for(let i = 0; i < ranges.length; i++){\n            const { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);\n            tr.replace(mapping.map($from.pos), mapping.map($to.pos), i ? prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice.empty : content);\n        }\n        const sel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.findFrom(tr.doc.resolve(tr.mapping.slice(mapFrom).map(this.to)), -1);\n        if (sel) tr.setSelection(sel);\n    }\n    replaceWith(tr, node) {\n        this.replace(tr, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(node), 0, 0));\n    }\n    forEachCell(f) {\n        const table = this.$anchorCell.node(-1);\n        const map = TableMap.get(table);\n        const tableStart = this.$anchorCell.start(-1);\n        const cells = map.cellsInRect(map.rectBetween(this.$anchorCell.pos - tableStart, this.$headCell.pos - tableStart));\n        for(let i = 0; i < cells.length; i++){\n            f(table.nodeAt(cells[i]), tableStart + cells[i]);\n        }\n    }\n    // True if this selection goes all the way from the top to the\n    // bottom of the table.\n    isColSelection() {\n        const anchorTop = this.$anchorCell.index(-1);\n        const headTop = this.$headCell.index(-1);\n        if (Math.min(anchorTop, headTop) > 0) return false;\n        const anchorBottom = anchorTop + this.$anchorCell.nodeAfter.attrs.rowspan;\n        const headBottom = headTop + this.$headCell.nodeAfter.attrs.rowspan;\n        return Math.max(anchorBottom, headBottom) == this.$headCell.node(-1).childCount;\n    }\n    // Returns the smallest column selection that covers the given anchor\n    // and head cell.\n    static colSelection($anchorCell, $headCell = $anchorCell) {\n        const table = $anchorCell.node(-1);\n        const map = TableMap.get(table);\n        const tableStart = $anchorCell.start(-1);\n        const anchorRect = map.findCell($anchorCell.pos - tableStart);\n        const headRect = map.findCell($headCell.pos - tableStart);\n        const doc = $anchorCell.node(0);\n        if (anchorRect.top <= headRect.top) {\n            if (anchorRect.top > 0) $anchorCell = doc.resolve(tableStart + map.map[anchorRect.left]);\n            if (headRect.bottom < map.height) $headCell = doc.resolve(tableStart + map.map[map.width * (map.height - 1) + headRect.right - 1]);\n        } else {\n            if (headRect.top > 0) $headCell = doc.resolve(tableStart + map.map[headRect.left]);\n            if (anchorRect.bottom < map.height) $anchorCell = doc.resolve(tableStart + map.map[map.width * (map.height - 1) + anchorRect.right - 1]);\n        }\n        return new _CellSelection($anchorCell, $headCell);\n    }\n    // True if this selection goes all the way from the left to the\n    // right of the table.\n    isRowSelection() {\n        const table = this.$anchorCell.node(-1);\n        const map = TableMap.get(table);\n        const tableStart = this.$anchorCell.start(-1);\n        const anchorLeft = map.colCount(this.$anchorCell.pos - tableStart);\n        const headLeft = map.colCount(this.$headCell.pos - tableStart);\n        if (Math.min(anchorLeft, headLeft) > 0) return false;\n        const anchorRight = anchorLeft + this.$anchorCell.nodeAfter.attrs.colspan;\n        const headRight = headLeft + this.$headCell.nodeAfter.attrs.colspan;\n        return Math.max(anchorRight, headRight) == map.width;\n    }\n    eq(other) {\n        return other instanceof _CellSelection && other.$anchorCell.pos == this.$anchorCell.pos && other.$headCell.pos == this.$headCell.pos;\n    }\n    // Returns the smallest row selection that covers the given anchor\n    // and head cell.\n    static rowSelection($anchorCell, $headCell = $anchorCell) {\n        const table = $anchorCell.node(-1);\n        const map = TableMap.get(table);\n        const tableStart = $anchorCell.start(-1);\n        const anchorRect = map.findCell($anchorCell.pos - tableStart);\n        const headRect = map.findCell($headCell.pos - tableStart);\n        const doc = $anchorCell.node(0);\n        if (anchorRect.left <= headRect.left) {\n            if (anchorRect.left > 0) $anchorCell = doc.resolve(tableStart + map.map[anchorRect.top * map.width]);\n            if (headRect.right < map.width) $headCell = doc.resolve(tableStart + map.map[map.width * (headRect.top + 1) - 1]);\n        } else {\n            if (headRect.left > 0) $headCell = doc.resolve(tableStart + map.map[headRect.top * map.width]);\n            if (anchorRect.right < map.width) $anchorCell = doc.resolve(tableStart + map.map[map.width * (anchorRect.top + 1) - 1]);\n        }\n        return new _CellSelection($anchorCell, $headCell);\n    }\n    toJSON() {\n        return {\n            type: \"cell\",\n            anchor: this.$anchorCell.pos,\n            head: this.$headCell.pos\n        };\n    }\n    static fromJSON(doc, json) {\n        return new _CellSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n    }\n    static create(doc, anchorCell, headCell = anchorCell) {\n        return new _CellSelection(doc.resolve(anchorCell), doc.resolve(headCell));\n    }\n    getBookmark() {\n        return new CellBookmark(this.$anchorCell.pos, this.$headCell.pos);\n    }\n};\nCellSelection.prototype.visible = false;\nprosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.jsonID(\"cell\", CellSelection);\nvar CellBookmark = class _CellBookmark {\n    constructor(anchor, head){\n        this.anchor = anchor;\n        this.head = head;\n    }\n    map(mapping) {\n        return new _CellBookmark(mapping.map(this.anchor), mapping.map(this.head));\n    }\n    resolve(doc) {\n        const $anchorCell = doc.resolve(this.anchor), $headCell = doc.resolve(this.head);\n        if ($anchorCell.parent.type.spec.tableRole == \"row\" && $headCell.parent.type.spec.tableRole == \"row\" && $anchorCell.index() < $anchorCell.parent.childCount && $headCell.index() < $headCell.parent.childCount && inSameTable($anchorCell, $headCell)) return new CellSelection($anchorCell, $headCell);\n        else return prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($headCell, 1);\n    }\n};\nfunction drawCellSelection(state) {\n    if (!(state.selection instanceof CellSelection)) return null;\n    const cells = [];\n    state.selection.forEachCell((node, pos)=>{\n        cells.push(prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.node(pos, pos + node.nodeSize, {\n            class: \"selectedCell\"\n        }));\n    });\n    return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, cells);\n}\nfunction isCellBoundarySelection({ $from, $to }) {\n    if ($from.pos == $to.pos || $from.pos < $from.pos - 6) return false;\n    let afterFrom = $from.pos;\n    let beforeTo = $to.pos;\n    let depth = $from.depth;\n    for(; depth >= 0; depth--, afterFrom++)if ($from.after(depth + 1) < $from.end(depth)) break;\n    for(let d = $to.depth; d >= 0; d--, beforeTo--)if ($to.before(d + 1) > $to.start(d)) break;\n    return afterFrom == beforeTo && /row|table/.test($from.node(depth).type.spec.tableRole);\n}\nfunction isTextSelectionAcrossCells({ $from, $to }) {\n    let fromCellBoundaryNode;\n    let toCellBoundaryNode;\n    for(let i = $from.depth; i > 0; i--){\n        const node = $from.node(i);\n        if (node.type.spec.tableRole === \"cell\" || node.type.spec.tableRole === \"header_cell\") {\n            fromCellBoundaryNode = node;\n            break;\n        }\n    }\n    for(let i = $to.depth; i > 0; i--){\n        const node = $to.node(i);\n        if (node.type.spec.tableRole === \"cell\" || node.type.spec.tableRole === \"header_cell\") {\n            toCellBoundaryNode = node;\n            break;\n        }\n    }\n    return fromCellBoundaryNode !== toCellBoundaryNode && $to.parentOffset === 0;\n}\nfunction normalizeSelection(state, tr, allowTableNodeSelection) {\n    const sel = (tr || state).selection;\n    const doc = (tr || state).doc;\n    let normalize;\n    let role;\n    if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection && (role = sel.node.type.spec.tableRole)) {\n        if (role == \"cell\" || role == \"header_cell\") {\n            normalize = CellSelection.create(doc, sel.from);\n        } else if (role == \"row\") {\n            const $cell = doc.resolve(sel.from + 1);\n            normalize = CellSelection.rowSelection($cell, $cell);\n        } else if (!allowTableNodeSelection) {\n            const map = TableMap.get(sel.node);\n            const start = sel.from + 1;\n            const lastCell = start + map.map[map.width * map.height - 1];\n            normalize = CellSelection.create(doc, start + 1, lastCell);\n        }\n    } else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection && isCellBoundarySelection(sel)) {\n        normalize = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, sel.from);\n    } else if (sel instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection && isTextSelectionAcrossCells(sel)) {\n        normalize = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, sel.$from.start(), sel.$from.end());\n    }\n    if (normalize) (tr || (tr = state.tr)).setSelection(normalize);\n    return tr;\n}\n// src/fixtables.ts\n\nvar fixTablesKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"fix-tables\");\nfunction changedDescendants(old, cur, offset, f) {\n    const oldSize = old.childCount, curSize = cur.childCount;\n    outer: for(let i = 0, j = 0; i < curSize; i++){\n        const child = cur.child(i);\n        for(let scan = j, e = Math.min(oldSize, i + 3); scan < e; scan++){\n            if (old.child(scan) == child) {\n                j = scan + 1;\n                offset += child.nodeSize;\n                continue outer;\n            }\n        }\n        f(child, offset);\n        if (j < oldSize && old.child(j).sameMarkup(child)) changedDescendants(old.child(j), child, offset + 1, f);\n        else child.nodesBetween(0, child.content.size, f, offset + 1);\n        offset += child.nodeSize;\n    }\n}\nfunction fixTables(state, oldState) {\n    let tr;\n    const check = (node, pos)=>{\n        if (node.type.spec.tableRole == \"table\") tr = fixTable(state, node, pos, tr);\n    };\n    if (!oldState) state.doc.descendants(check);\n    else if (oldState.doc != state.doc) changedDescendants(oldState.doc, state.doc, 0, check);\n    return tr;\n}\nfunction fixTable(state, table, tablePos, tr) {\n    const map = TableMap.get(table);\n    if (!map.problems) return tr;\n    if (!tr) tr = state.tr;\n    const mustAdd = [];\n    for(let i = 0; i < map.height; i++)mustAdd.push(0);\n    for(let i = 0; i < map.problems.length; i++){\n        const prob = map.problems[i];\n        if (prob.type == \"collision\") {\n            const cell = table.nodeAt(prob.pos);\n            if (!cell) continue;\n            const attrs = cell.attrs;\n            for(let j = 0; j < attrs.rowspan; j++)mustAdd[prob.row + j] += prob.n;\n            tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, removeColSpan(attrs, attrs.colspan - prob.n, prob.n));\n        } else if (prob.type == \"missing\") {\n            mustAdd[prob.row] += prob.n;\n        } else if (prob.type == \"overlong_rowspan\") {\n            const cell = table.nodeAt(prob.pos);\n            if (!cell) continue;\n            tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, {\n                ...cell.attrs,\n                rowspan: cell.attrs.rowspan - prob.n\n            });\n        } else if (prob.type == \"colwidth mismatch\") {\n            const cell = table.nodeAt(prob.pos);\n            if (!cell) continue;\n            tr.setNodeMarkup(tr.mapping.map(tablePos + 1 + prob.pos), null, {\n                ...cell.attrs,\n                colwidth: prob.colwidth\n            });\n        }\n    }\n    let first, last;\n    for(let i = 0; i < mustAdd.length; i++)if (mustAdd[i]) {\n        if (first == null) first = i;\n        last = i;\n    }\n    for(let i = 0, pos = tablePos + 1; i < map.height; i++){\n        const row = table.child(i);\n        const end = pos + row.nodeSize;\n        const add = mustAdd[i];\n        if (add > 0) {\n            let role = \"cell\";\n            if (row.firstChild) {\n                role = row.firstChild.type.spec.tableRole;\n            }\n            const nodes = [];\n            for(let j = 0; j < add; j++){\n                const node = tableNodeTypes(state.schema)[role].createAndFill();\n                if (node) nodes.push(node);\n            }\n            const side = (i == 0 || first == i - 1) && last == i ? pos + 1 : end - 1;\n            tr.insert(tr.mapping.map(side), nodes);\n        }\n        pos = end;\n    }\n    return tr.setMeta(fixTablesKey, {\n        fixTables: true\n    });\n}\n// src/input.ts\n\n\n\n// src/copypaste.ts\n\n\nfunction pastedCells(slice) {\n    if (!slice.size) return null;\n    let { content, openStart, openEnd } = slice;\n    while(content.childCount == 1 && (openStart > 0 && openEnd > 0 || content.child(0).type.spec.tableRole == \"table\")){\n        openStart--;\n        openEnd--;\n        content = content.child(0).content;\n    }\n    const first = content.child(0);\n    const role = first.type.spec.tableRole;\n    const schema = first.type.schema, rows = [];\n    if (role == \"row\") {\n        for(let i = 0; i < content.childCount; i++){\n            let cells = content.child(i).content;\n            const left = i ? 0 : Math.max(0, openStart - 1);\n            const right = i < content.childCount - 1 ? 0 : Math.max(0, openEnd - 1);\n            if (left || right) cells = fitSlice(tableNodeTypes(schema).row, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(cells, left, right)).content;\n            rows.push(cells);\n        }\n    } else if (role == \"cell\" || role == \"header_cell\") {\n        rows.push(openStart || openEnd ? fitSlice(tableNodeTypes(schema).row, new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(content, openStart, openEnd)).content : content);\n    } else {\n        return null;\n    }\n    return ensureRectangular(schema, rows);\n}\nfunction ensureRectangular(schema, rows) {\n    const widths = [];\n    for(let i = 0; i < rows.length; i++){\n        const row = rows[i];\n        for(let j = row.childCount - 1; j >= 0; j--){\n            const { rowspan, colspan } = row.child(j).attrs;\n            for(let r = i; r < i + rowspan; r++)widths[r] = (widths[r] || 0) + colspan;\n        }\n    }\n    let width = 0;\n    for(let r = 0; r < widths.length; r++)width = Math.max(width, widths[r]);\n    for(let r = 0; r < widths.length; r++){\n        if (r >= rows.length) rows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.empty);\n        if (widths[r] < width) {\n            const empty = tableNodeTypes(schema).cell.createAndFill();\n            const cells = [];\n            for(let i = widths[r]; i < width; i++){\n                cells.push(empty);\n            }\n            rows[r] = rows[r].append(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells));\n        }\n    }\n    return {\n        height: rows.length,\n        width,\n        rows\n    };\n}\nfunction fitSlice(nodeType, slice) {\n    const node = nodeType.createAndFill();\n    const tr = new prosemirror_transform__WEBPACK_IMPORTED_MODULE_3__.Transform(node).replace(0, node.content.size, slice);\n    return tr.doc;\n}\nfunction clipCells({ width, height, rows }, newWidth, newHeight) {\n    if (width != newWidth) {\n        const added = [];\n        const newRows = [];\n        for(let row = 0; row < rows.length; row++){\n            const frag = rows[row], cells = [];\n            for(let col = added[row] || 0, i = 0; col < newWidth; i++){\n                let cell = frag.child(i % frag.childCount);\n                if (col + cell.attrs.colspan > newWidth) cell = cell.type.createChecked(removeColSpan(cell.attrs, cell.attrs.colspan, col + cell.attrs.colspan - newWidth), cell.content);\n                cells.push(cell);\n                col += cell.attrs.colspan;\n                for(let j = 1; j < cell.attrs.rowspan; j++)added[row + j] = (added[row + j] || 0) + cell.attrs.colspan;\n            }\n            newRows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells));\n        }\n        rows = newRows;\n        width = newWidth;\n    }\n    if (height != newHeight) {\n        const newRows = [];\n        for(let row = 0, i = 0; row < newHeight; row++, i++){\n            const cells = [], source = rows[i % height];\n            for(let j = 0; j < source.childCount; j++){\n                let cell = source.child(j);\n                if (row + cell.attrs.rowspan > newHeight) cell = cell.type.create({\n                    ...cell.attrs,\n                    rowspan: Math.max(1, newHeight - cell.attrs.rowspan)\n                }, cell.content);\n                cells.push(cell);\n            }\n            newRows.push(prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells));\n        }\n        rows = newRows;\n        height = newHeight;\n    }\n    return {\n        width,\n        height,\n        rows\n    };\n}\nfunction growTable(tr, map, table, start, width, height, mapFrom) {\n    const schema = tr.doc.type.schema;\n    const types = tableNodeTypes(schema);\n    let empty;\n    let emptyHead;\n    if (width > map.width) {\n        for(let row = 0, rowEnd = 0; row < map.height; row++){\n            const rowNode = table.child(row);\n            rowEnd += rowNode.nodeSize;\n            const cells = [];\n            let add;\n            if (rowNode.lastChild == null || rowNode.lastChild.type == types.cell) add = empty || (empty = types.cell.createAndFill());\n            else add = emptyHead || (emptyHead = types.header_cell.createAndFill());\n            for(let i = map.width; i < width; i++)cells.push(add);\n            tr.insert(tr.mapping.slice(mapFrom).map(rowEnd - 1 + start), cells);\n        }\n    }\n    if (height > map.height) {\n        const cells = [];\n        for(let i = 0, start2 = (map.height - 1) * map.width; i < Math.max(map.width, width); i++){\n            const header = i >= map.width ? false : table.nodeAt(map.map[start2 + i]).type == types.header_cell;\n            cells.push(header ? emptyHead || (emptyHead = types.header_cell.createAndFill()) : empty || (empty = types.cell.createAndFill()));\n        }\n        const emptyRow = types.row.create(null, prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(cells)), rows = [];\n        for(let i = map.height; i < height; i++)rows.push(emptyRow);\n        tr.insert(tr.mapping.slice(mapFrom).map(start + table.nodeSize - 2), rows);\n    }\n    return !!(empty || emptyHead);\n}\nfunction isolateHorizontal(tr, map, table, start, left, right, top, mapFrom) {\n    if (top == 0 || top == map.height) return false;\n    let found = false;\n    for(let col = left; col < right; col++){\n        const index = top * map.width + col, pos = map.map[index];\n        if (map.map[index - map.width] == pos) {\n            found = true;\n            const cell = table.nodeAt(pos);\n            const { top: cellTop, left: cellLeft } = map.findCell(pos);\n            tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + start), null, {\n                ...cell.attrs,\n                rowspan: top - cellTop\n            });\n            tr.insert(tr.mapping.slice(mapFrom).map(map.positionAt(top, cellLeft, table)), cell.type.createAndFill({\n                ...cell.attrs,\n                rowspan: cellTop + cell.attrs.rowspan - top\n            }));\n            col += cell.attrs.colspan - 1;\n        }\n    }\n    return found;\n}\nfunction isolateVertical(tr, map, table, start, top, bottom, left, mapFrom) {\n    if (left == 0 || left == map.width) return false;\n    let found = false;\n    for(let row = top; row < bottom; row++){\n        const index = row * map.width + left, pos = map.map[index];\n        if (map.map[index - 1] == pos) {\n            found = true;\n            const cell = table.nodeAt(pos);\n            const cellLeft = map.colCount(pos);\n            const updatePos = tr.mapping.slice(mapFrom).map(pos + start);\n            tr.setNodeMarkup(updatePos, null, removeColSpan(cell.attrs, left - cellLeft, cell.attrs.colspan - (left - cellLeft)));\n            tr.insert(updatePos + cell.nodeSize, cell.type.createAndFill(removeColSpan(cell.attrs, 0, left - cellLeft)));\n            row += cell.attrs.rowspan - 1;\n        }\n    }\n    return found;\n}\nfunction insertCells(state, dispatch, tableStart, rect, cells) {\n    let table = tableStart ? state.doc.nodeAt(tableStart - 1) : state.doc;\n    if (!table) {\n        throw new Error(\"No table found\");\n    }\n    let map = TableMap.get(table);\n    const { top, left } = rect;\n    const right = left + cells.width, bottom = top + cells.height;\n    const tr = state.tr;\n    let mapFrom = 0;\n    function recomp() {\n        table = tableStart ? tr.doc.nodeAt(tableStart - 1) : tr.doc;\n        if (!table) {\n            throw new Error(\"No table found\");\n        }\n        map = TableMap.get(table);\n        mapFrom = tr.mapping.maps.length;\n    }\n    if (growTable(tr, map, table, tableStart, right, bottom, mapFrom)) recomp();\n    if (isolateHorizontal(tr, map, table, tableStart, left, right, top, mapFrom)) recomp();\n    if (isolateHorizontal(tr, map, table, tableStart, left, right, bottom, mapFrom)) recomp();\n    if (isolateVertical(tr, map, table, tableStart, top, bottom, left, mapFrom)) recomp();\n    if (isolateVertical(tr, map, table, tableStart, top, bottom, right, mapFrom)) recomp();\n    for(let row = top; row < bottom; row++){\n        const from = map.positionAt(row, left, table), to = map.positionAt(row, right, table);\n        tr.replace(tr.mapping.slice(mapFrom).map(from + tableStart), tr.mapping.slice(mapFrom).map(to + tableStart), new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(cells.rows[row - top], 0, 0));\n    }\n    recomp();\n    tr.setSelection(new CellSelection(tr.doc.resolve(tableStart + map.positionAt(top, left, table)), tr.doc.resolve(tableStart + map.positionAt(bottom - 1, right - 1, table))));\n    dispatch(tr);\n}\n// src/input.ts\nvar handleKeyDown = (0,prosemirror_keymap__WEBPACK_IMPORTED_MODULE_4__.keydownHandler)({\n    ArrowLeft: arrow(\"horiz\", -1),\n    ArrowRight: arrow(\"horiz\", 1),\n    ArrowUp: arrow(\"vert\", -1),\n    ArrowDown: arrow(\"vert\", 1),\n    \"Shift-ArrowLeft\": shiftArrow(\"horiz\", -1),\n    \"Shift-ArrowRight\": shiftArrow(\"horiz\", 1),\n    \"Shift-ArrowUp\": shiftArrow(\"vert\", -1),\n    \"Shift-ArrowDown\": shiftArrow(\"vert\", 1),\n    Backspace: deleteCellSelection,\n    \"Mod-Backspace\": deleteCellSelection,\n    Delete: deleteCellSelection,\n    \"Mod-Delete\": deleteCellSelection\n});\nfunction maybeSetSelection(state, dispatch, selection) {\n    if (selection.eq(state.selection)) return false;\n    if (dispatch) dispatch(state.tr.setSelection(selection).scrollIntoView());\n    return true;\n}\nfunction arrow(axis, dir) {\n    return (state, dispatch, view)=>{\n        if (!view) return false;\n        const sel = state.selection;\n        if (sel instanceof CellSelection) {\n            return maybeSetSelection(state, dispatch, prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(sel.$headCell, dir));\n        }\n        if (axis != \"horiz\" && !sel.empty) return false;\n        const end = atEndOfCell(view, axis, dir);\n        if (end == null) return false;\n        if (axis == \"horiz\") {\n            return maybeSetSelection(state, dispatch, prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve(sel.head + dir), dir));\n        } else {\n            const $cell = state.doc.resolve(end);\n            const $next = nextCell($cell, axis, dir);\n            let newSel;\n            if ($next) newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near($next, 1);\n            else if (dir < 0) newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve($cell.before(-1)), -1);\n            else newSel = prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(state.doc.resolve($cell.after(-1)), 1);\n            return maybeSetSelection(state, dispatch, newSel);\n        }\n    };\n}\nfunction shiftArrow(axis, dir) {\n    return (state, dispatch, view)=>{\n        if (!view) return false;\n        const sel = state.selection;\n        let cellSel;\n        if (sel instanceof CellSelection) {\n            cellSel = sel;\n        } else {\n            const end = atEndOfCell(view, axis, dir);\n            if (end == null) return false;\n            cellSel = new CellSelection(state.doc.resolve(end));\n        }\n        const $head = nextCell(cellSel.$headCell, axis, dir);\n        if (!$head) return false;\n        return maybeSetSelection(state, dispatch, new CellSelection(cellSel.$anchorCell, $head));\n    };\n}\nfunction deleteCellSelection(state, dispatch) {\n    const sel = state.selection;\n    if (!(sel instanceof CellSelection)) return false;\n    if (dispatch) {\n        const tr = state.tr;\n        const baseContent = tableNodeTypes(state.schema).cell.createAndFill().content;\n        sel.forEachCell((cell, pos)=>{\n            if (!cell.content.eq(baseContent)) tr.replace(tr.mapping.map(pos + 1), tr.mapping.map(pos + cell.nodeSize - 1), new prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Slice(baseContent, 0, 0));\n        });\n        if (tr.docChanged) dispatch(tr);\n    }\n    return true;\n}\nfunction handleTripleClick(view, pos) {\n    const doc = view.state.doc, $cell = cellAround(doc.resolve(pos));\n    if (!$cell) return false;\n    view.dispatch(view.state.tr.setSelection(new CellSelection($cell)));\n    return true;\n}\nfunction handlePaste(view, _, slice) {\n    if (!isInTable(view.state)) return false;\n    let cells = pastedCells(slice);\n    const sel = view.state.selection;\n    if (sel instanceof CellSelection) {\n        if (!cells) cells = {\n            width: 1,\n            height: 1,\n            rows: [\n                prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.from(fitSlice(tableNodeTypes(view.state.schema).cell, slice))\n            ]\n        };\n        const table = sel.$anchorCell.node(-1);\n        const start = sel.$anchorCell.start(-1);\n        const rect = TableMap.get(table).rectBetween(sel.$anchorCell.pos - start, sel.$headCell.pos - start);\n        cells = clipCells(cells, rect.right - rect.left, rect.bottom - rect.top);\n        insertCells(view.state, view.dispatch, start, rect, cells);\n        return true;\n    } else if (cells) {\n        const $cell = selectionCell(view.state);\n        const start = $cell.start(-1);\n        insertCells(view.state, view.dispatch, start, TableMap.get($cell.node(-1)).findCell($cell.pos - start), cells);\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction handleMouseDown(view, startEvent) {\n    var _a;\n    if (startEvent.ctrlKey || startEvent.metaKey) return;\n    const startDOMCell = domInCell(view, startEvent.target);\n    let $anchor;\n    if (startEvent.shiftKey && view.state.selection instanceof CellSelection) {\n        setCellSelection(view.state.selection.$anchorCell, startEvent);\n        startEvent.preventDefault();\n    } else if (startEvent.shiftKey && startDOMCell && ($anchor = cellAround(view.state.selection.$anchor)) != null && ((_a = cellUnderMouse(view, startEvent)) == null ? void 0 : _a.pos) != $anchor.pos) {\n        setCellSelection($anchor, startEvent);\n        startEvent.preventDefault();\n    } else if (!startDOMCell) {\n        return;\n    }\n    function setCellSelection($anchor2, event) {\n        let $head = cellUnderMouse(view, event);\n        const starting = tableEditingKey.getState(view.state) == null;\n        if (!$head || !inSameTable($anchor2, $head)) {\n            if (starting) $head = $anchor2;\n            else return;\n        }\n        const selection = new CellSelection($anchor2, $head);\n        if (starting || !view.state.selection.eq(selection)) {\n            const tr = view.state.tr.setSelection(selection);\n            if (starting) tr.setMeta(tableEditingKey, $anchor2.pos);\n            view.dispatch(tr);\n        }\n    }\n    function stop() {\n        view.root.removeEventListener(\"mouseup\", stop);\n        view.root.removeEventListener(\"dragstart\", stop);\n        view.root.removeEventListener(\"mousemove\", move);\n        if (tableEditingKey.getState(view.state) != null) view.dispatch(view.state.tr.setMeta(tableEditingKey, -1));\n    }\n    function move(_event) {\n        const event = _event;\n        const anchor = tableEditingKey.getState(view.state);\n        let $anchor2;\n        if (anchor != null) {\n            $anchor2 = view.state.doc.resolve(anchor);\n        } else if (domInCell(view, event.target) != startDOMCell) {\n            $anchor2 = cellUnderMouse(view, startEvent);\n            if (!$anchor2) return stop();\n        }\n        if ($anchor2) setCellSelection($anchor2, event);\n    }\n    view.root.addEventListener(\"mouseup\", stop);\n    view.root.addEventListener(\"dragstart\", stop);\n    view.root.addEventListener(\"mousemove\", move);\n}\nfunction atEndOfCell(view, axis, dir) {\n    if (!(view.state.selection instanceof prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection)) return null;\n    const { $head } = view.state.selection;\n    for(let d = $head.depth - 1; d >= 0; d--){\n        const parent = $head.node(d), index = dir < 0 ? $head.index(d) : $head.indexAfter(d);\n        if (index != (dir < 0 ? 0 : parent.childCount)) return null;\n        if (parent.type.spec.tableRole == \"cell\" || parent.type.spec.tableRole == \"header_cell\") {\n            const cellPos = $head.before(d);\n            const dirStr = axis == \"vert\" ? dir > 0 ? \"down\" : \"up\" : dir > 0 ? \"right\" : \"left\";\n            return view.endOfTextblock(dirStr) ? cellPos : null;\n        }\n    }\n    return null;\n}\nfunction domInCell(view, dom) {\n    for(; dom && dom != view.dom; dom = dom.parentNode){\n        if (dom.nodeName == \"TD\" || dom.nodeName == \"TH\") {\n            return dom;\n        }\n    }\n    return null;\n}\nfunction cellUnderMouse(view, event) {\n    const mousePos = view.posAtCoords({\n        left: event.clientX,\n        top: event.clientY\n    });\n    if (!mousePos) return null;\n    return mousePos ? cellAround(view.state.doc.resolve(mousePos.pos)) : null;\n}\n// src/columnresizing.ts\n\n\n// src/tableview.ts\nvar TableView = class {\n    constructor(node, cellMinWidth){\n        this.node = node;\n        this.cellMinWidth = cellMinWidth;\n        this.dom = document.createElement(\"div\");\n        this.dom.className = \"tableWrapper\";\n        this.table = this.dom.appendChild(document.createElement(\"table\"));\n        this.colgroup = this.table.appendChild(document.createElement(\"colgroup\"));\n        updateColumnsOnResize(node, this.colgroup, this.table, cellMinWidth);\n        this.contentDOM = this.table.appendChild(document.createElement(\"tbody\"));\n    }\n    update(node) {\n        if (node.type != this.node.type) return false;\n        this.node = node;\n        updateColumnsOnResize(node, this.colgroup, this.table, this.cellMinWidth);\n        return true;\n    }\n    ignoreMutation(record) {\n        return record.type == \"attributes\" && (record.target == this.table || this.colgroup.contains(record.target));\n    }\n};\nfunction updateColumnsOnResize(node, colgroup, table, cellMinWidth, overrideCol, overrideValue) {\n    var _a;\n    let totalWidth = 0;\n    let fixedWidth = true;\n    let nextDOM = colgroup.firstChild;\n    const row = node.firstChild;\n    if (!row) return;\n    for(let i = 0, col = 0; i < row.childCount; i++){\n        const { colspan, colwidth } = row.child(i).attrs;\n        for(let j = 0; j < colspan; j++, col++){\n            const hasWidth = overrideCol == col ? overrideValue : colwidth && colwidth[j];\n            const cssWidth = hasWidth ? hasWidth + \"px\" : \"\";\n            totalWidth += hasWidth || cellMinWidth;\n            if (!hasWidth) fixedWidth = false;\n            if (!nextDOM) {\n                colgroup.appendChild(document.createElement(\"col\")).style.width = cssWidth;\n            } else {\n                if (nextDOM.style.width != cssWidth) nextDOM.style.width = cssWidth;\n                nextDOM = nextDOM.nextSibling;\n            }\n        }\n    }\n    while(nextDOM){\n        const after = nextDOM.nextSibling;\n        (_a = nextDOM.parentNode) == null ? void 0 : _a.removeChild(nextDOM);\n        nextDOM = after;\n    }\n    if (fixedWidth) {\n        table.style.width = totalWidth + \"px\";\n        table.style.minWidth = \"\";\n    } else {\n        table.style.width = \"\";\n        table.style.minWidth = totalWidth + \"px\";\n    }\n}\n// src/columnresizing.ts\nvar columnResizingPluginKey = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"tableColumnResizing\");\nfunction columnResizing({ handleWidth = 5, cellMinWidth = 25, View = TableView, lastColumnResizable = true } = {}) {\n    const plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        key: columnResizingPluginKey,\n        state: {\n            init (_, state) {\n                plugin.spec.props.nodeViews[tableNodeTypes(state.schema).table.name] = (node, view)=>new View(node, cellMinWidth, view);\n                return new ResizeState(-1, false);\n            },\n            apply (tr, prev) {\n                return prev.apply(tr);\n            }\n        },\n        props: {\n            attributes: (state)=>{\n                const pluginState = columnResizingPluginKey.getState(state);\n                return pluginState && pluginState.activeHandle > -1 ? {\n                    class: \"resize-cursor\"\n                } : {};\n            },\n            handleDOMEvents: {\n                mousemove: (view, event)=>{\n                    handleMouseMove(view, event, handleWidth, cellMinWidth, lastColumnResizable);\n                },\n                mouseleave: (view)=>{\n                    handleMouseLeave(view);\n                },\n                mousedown: (view, event)=>{\n                    handleMouseDown2(view, event, cellMinWidth);\n                }\n            },\n            decorations: (state)=>{\n                const pluginState = columnResizingPluginKey.getState(state);\n                if (pluginState && pluginState.activeHandle > -1) {\n                    return handleDecorations(state, pluginState.activeHandle);\n                }\n            },\n            nodeViews: {}\n        }\n    });\n    return plugin;\n}\nvar ResizeState = class _ResizeState {\n    constructor(activeHandle, dragging){\n        this.activeHandle = activeHandle;\n        this.dragging = dragging;\n    }\n    apply(tr) {\n        const state = this;\n        const action = tr.getMeta(columnResizingPluginKey);\n        if (action && action.setHandle != null) return new _ResizeState(action.setHandle, false);\n        if (action && action.setDragging !== void 0) return new _ResizeState(state.activeHandle, action.setDragging);\n        if (state.activeHandle > -1 && tr.docChanged) {\n            let handle = tr.mapping.map(state.activeHandle, -1);\n            if (!pointsAtCell(tr.doc.resolve(handle))) {\n                handle = -1;\n            }\n            return new _ResizeState(handle, state.dragging);\n        }\n        return state;\n    }\n};\nfunction handleMouseMove(view, event, handleWidth, cellMinWidth, lastColumnResizable) {\n    const pluginState = columnResizingPluginKey.getState(view.state);\n    if (!pluginState) return;\n    if (!pluginState.dragging) {\n        const target = domCellAround(event.target);\n        let cell = -1;\n        if (target) {\n            const { left, right } = target.getBoundingClientRect();\n            if (event.clientX - left <= handleWidth) cell = edgeCell(view, event, \"left\", handleWidth);\n            else if (right - event.clientX <= handleWidth) cell = edgeCell(view, event, \"right\", handleWidth);\n        }\n        if (cell != pluginState.activeHandle) {\n            if (!lastColumnResizable && cell !== -1) {\n                const $cell = view.state.doc.resolve(cell);\n                const table = $cell.node(-1);\n                const map = TableMap.get(table);\n                const tableStart = $cell.start(-1);\n                const col = map.colCount($cell.pos - tableStart) + $cell.nodeAfter.attrs.colspan - 1;\n                if (col == map.width - 1) {\n                    return;\n                }\n            }\n            updateHandle(view, cell);\n        }\n    }\n}\nfunction handleMouseLeave(view) {\n    const pluginState = columnResizingPluginKey.getState(view.state);\n    if (pluginState && pluginState.activeHandle > -1 && !pluginState.dragging) updateHandle(view, -1);\n}\nfunction handleMouseDown2(view, event, cellMinWidth) {\n    const pluginState = columnResizingPluginKey.getState(view.state);\n    if (!pluginState || pluginState.activeHandle == -1 || pluginState.dragging) return false;\n    const cell = view.state.doc.nodeAt(pluginState.activeHandle);\n    const width = currentColWidth(view, pluginState.activeHandle, cell.attrs);\n    view.dispatch(view.state.tr.setMeta(columnResizingPluginKey, {\n        setDragging: {\n            startX: event.clientX,\n            startWidth: width\n        }\n    }));\n    function finish(event2) {\n        window.removeEventListener(\"mouseup\", finish);\n        window.removeEventListener(\"mousemove\", move);\n        const pluginState2 = columnResizingPluginKey.getState(view.state);\n        if (pluginState2 == null ? void 0 : pluginState2.dragging) {\n            updateColumnWidth(view, pluginState2.activeHandle, draggedWidth(pluginState2.dragging, event2, cellMinWidth));\n            view.dispatch(view.state.tr.setMeta(columnResizingPluginKey, {\n                setDragging: null\n            }));\n        }\n    }\n    function move(event2) {\n        if (!event2.which) return finish(event2);\n        const pluginState2 = columnResizingPluginKey.getState(view.state);\n        if (!pluginState2) return;\n        if (pluginState2.dragging) {\n            const dragged = draggedWidth(pluginState2.dragging, event2, cellMinWidth);\n            displayColumnWidth(view, pluginState2.activeHandle, dragged, cellMinWidth);\n        }\n    }\n    window.addEventListener(\"mouseup\", finish);\n    window.addEventListener(\"mousemove\", move);\n    event.preventDefault();\n    return true;\n}\nfunction currentColWidth(view, cellPos, { colspan, colwidth }) {\n    const width = colwidth && colwidth[colwidth.length - 1];\n    if (width) return width;\n    const dom = view.domAtPos(cellPos);\n    const node = dom.node.childNodes[dom.offset];\n    let domWidth = node.offsetWidth, parts = colspan;\n    if (colwidth) {\n        for(let i = 0; i < colspan; i++)if (colwidth[i]) {\n            domWidth -= colwidth[i];\n            parts--;\n        }\n    }\n    return domWidth / parts;\n}\nfunction domCellAround(target) {\n    while(target && target.nodeName != \"TD\" && target.nodeName != \"TH\")target = target.classList && target.classList.contains(\"ProseMirror\") ? null : target.parentNode;\n    return target;\n}\nfunction edgeCell(view, event, side, handleWidth) {\n    const offset = side == \"right\" ? -handleWidth : handleWidth;\n    const found = view.posAtCoords({\n        left: event.clientX + offset,\n        top: event.clientY\n    });\n    if (!found) return -1;\n    const { pos } = found;\n    const $cell = cellAround(view.state.doc.resolve(pos));\n    if (!$cell) return -1;\n    if (side == \"right\") return $cell.pos;\n    const map = TableMap.get($cell.node(-1)), start = $cell.start(-1);\n    const index = map.map.indexOf($cell.pos - start);\n    return index % map.width == 0 ? -1 : start + map.map[index - 1];\n}\nfunction draggedWidth(dragging, event, cellMinWidth) {\n    const offset = event.clientX - dragging.startX;\n    return Math.max(cellMinWidth, dragging.startWidth + offset);\n}\nfunction updateHandle(view, value) {\n    view.dispatch(view.state.tr.setMeta(columnResizingPluginKey, {\n        setHandle: value\n    }));\n}\nfunction updateColumnWidth(view, cell, width) {\n    const $cell = view.state.doc.resolve(cell);\n    const table = $cell.node(-1), map = TableMap.get(table), start = $cell.start(-1);\n    const col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n    const tr = view.state.tr;\n    for(let row = 0; row < map.height; row++){\n        const mapIndex = row * map.width + col;\n        if (row && map.map[mapIndex] == map.map[mapIndex - map.width]) continue;\n        const pos = map.map[mapIndex];\n        const attrs = table.nodeAt(pos).attrs;\n        const index = attrs.colspan == 1 ? 0 : col - map.colCount(pos);\n        if (attrs.colwidth && attrs.colwidth[index] == width) continue;\n        const colwidth = attrs.colwidth ? attrs.colwidth.slice() : zeroes(attrs.colspan);\n        colwidth[index] = width;\n        tr.setNodeMarkup(start + pos, null, {\n            ...attrs,\n            colwidth\n        });\n    }\n    if (tr.docChanged) view.dispatch(tr);\n}\nfunction displayColumnWidth(view, cell, width, cellMinWidth) {\n    const $cell = view.state.doc.resolve(cell);\n    const table = $cell.node(-1), start = $cell.start(-1);\n    const col = TableMap.get(table).colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan - 1;\n    let dom = view.domAtPos($cell.start(-1)).node;\n    while(dom && dom.nodeName != \"TABLE\"){\n        dom = dom.parentNode;\n    }\n    if (!dom) return;\n    updateColumnsOnResize(table, dom.firstChild, dom, cellMinWidth, col, width);\n}\nfunction zeroes(n) {\n    return Array(n).fill(0);\n}\nfunction handleDecorations(state, cell) {\n    const decorations = [];\n    const $cell = state.doc.resolve(cell);\n    const table = $cell.node(-1);\n    if (!table) {\n        return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.empty;\n    }\n    const map = TableMap.get(table);\n    const start = $cell.start(-1);\n    const col = map.colCount($cell.pos - start) + $cell.nodeAfter.attrs.colspan;\n    for(let row = 0; row < map.height; row++){\n        const index = col + row * map.width - 1;\n        if ((col == map.width || map.map[index] != map.map[index + 1]) && (row == 0 || map.map[index] != map.map[index - map.width])) {\n            const cellPos = map.map[index];\n            const pos = start + cellPos + table.nodeAt(cellPos).nodeSize - 1;\n            const dom = document.createElement(\"div\");\n            dom.className = \"column-resize-handle\";\n            decorations.push(prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.Decoration.widget(pos, dom));\n        }\n    }\n    return prosemirror_view__WEBPACK_IMPORTED_MODULE_2__.DecorationSet.create(state.doc, decorations);\n}\n// src/commands.ts\n\n\nfunction selectedRect(state) {\n    const sel = state.selection;\n    const $pos = selectionCell(state);\n    const table = $pos.node(-1);\n    const tableStart = $pos.start(-1);\n    const map = TableMap.get(table);\n    const rect = sel instanceof CellSelection ? map.rectBetween(sel.$anchorCell.pos - tableStart, sel.$headCell.pos - tableStart) : map.findCell($pos.pos - tableStart);\n    return {\n        ...rect,\n        tableStart,\n        map,\n        table\n    };\n}\nfunction addColumn(tr, { map, tableStart, table }, col) {\n    let refColumn = col > 0 ? -1 : 0;\n    if (columnIsHeader(map, table, col + refColumn)) {\n        refColumn = col == 0 || col == map.width ? null : 0;\n    }\n    for(let row = 0; row < map.height; row++){\n        const index = row * map.width + col;\n        if (col > 0 && col < map.width && map.map[index - 1] == map.map[index]) {\n            const pos = map.map[index];\n            const cell = table.nodeAt(pos);\n            tr.setNodeMarkup(tr.mapping.map(tableStart + pos), null, addColSpan(cell.attrs, col - map.colCount(pos)));\n            row += cell.attrs.rowspan - 1;\n        } else {\n            const type = refColumn == null ? tableNodeTypes(table.type.schema).cell : table.nodeAt(map.map[index + refColumn]).type;\n            const pos = map.positionAt(row, col, table);\n            tr.insert(tr.mapping.map(tableStart + pos), type.createAndFill());\n        }\n    }\n    return tr;\n}\nfunction addColumnBefore(state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n        const rect = selectedRect(state);\n        dispatch(addColumn(state.tr, rect, rect.left));\n    }\n    return true;\n}\nfunction addColumnAfter(state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n        const rect = selectedRect(state);\n        dispatch(addColumn(state.tr, rect, rect.right));\n    }\n    return true;\n}\nfunction removeColumn(tr, { map, table, tableStart }, col) {\n    const mapStart = tr.mapping.maps.length;\n    for(let row = 0; row < map.height;){\n        const index = row * map.width + col;\n        const pos = map.map[index];\n        const cell = table.nodeAt(pos);\n        const attrs = cell.attrs;\n        if (col > 0 && map.map[index - 1] == pos || col < map.width - 1 && map.map[index + 1] == pos) {\n            tr.setNodeMarkup(tr.mapping.slice(mapStart).map(tableStart + pos), null, removeColSpan(attrs, col - map.colCount(pos)));\n        } else {\n            const start = tr.mapping.slice(mapStart).map(tableStart + pos);\n            tr.delete(start, start + cell.nodeSize);\n        }\n        row += attrs.rowspan;\n    }\n}\nfunction deleteColumn(state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n        const rect = selectedRect(state);\n        const tr = state.tr;\n        if (rect.left == 0 && rect.right == rect.map.width) return false;\n        for(let i = rect.right - 1;; i--){\n            removeColumn(tr, rect, i);\n            if (i == rect.left) break;\n            const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;\n            if (!table) {\n                throw RangeError(\"No table found\");\n            }\n            rect.table = table;\n            rect.map = TableMap.get(table);\n        }\n        dispatch(tr);\n    }\n    return true;\n}\nfunction rowIsHeader(map, table, row) {\n    var _a;\n    const headerCell = tableNodeTypes(table.type.schema).header_cell;\n    for(let col = 0; col < map.width; col++)if (((_a = table.nodeAt(map.map[col + row * map.width])) == null ? void 0 : _a.type) != headerCell) return false;\n    return true;\n}\nfunction addRow(tr, { map, tableStart, table }, row) {\n    var _a;\n    let rowPos = tableStart;\n    for(let i = 0; i < row; i++)rowPos += table.child(i).nodeSize;\n    const cells = [];\n    let refRow = row > 0 ? -1 : 0;\n    if (rowIsHeader(map, table, row + refRow)) refRow = row == 0 || row == map.height ? null : 0;\n    for(let col = 0, index = map.width * row; col < map.width; col++, index++){\n        if (row > 0 && row < map.height && map.map[index] == map.map[index - map.width]) {\n            const pos = map.map[index];\n            const attrs = table.nodeAt(pos).attrs;\n            tr.setNodeMarkup(tableStart + pos, null, {\n                ...attrs,\n                rowspan: attrs.rowspan + 1\n            });\n            col += attrs.colspan - 1;\n        } else {\n            const type = refRow == null ? tableNodeTypes(table.type.schema).cell : (_a = table.nodeAt(map.map[index + refRow * map.width])) == null ? void 0 : _a.type;\n            const node = type == null ? void 0 : type.createAndFill();\n            if (node) cells.push(node);\n        }\n    }\n    tr.insert(rowPos, tableNodeTypes(table.type.schema).row.create(null, cells));\n    return tr;\n}\nfunction addRowBefore(state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n        const rect = selectedRect(state);\n        dispatch(addRow(state.tr, rect, rect.top));\n    }\n    return true;\n}\nfunction addRowAfter(state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n        const rect = selectedRect(state);\n        dispatch(addRow(state.tr, rect, rect.bottom));\n    }\n    return true;\n}\nfunction removeRow(tr, { map, table, tableStart }, row) {\n    let rowPos = 0;\n    for(let i = 0; i < row; i++)rowPos += table.child(i).nodeSize;\n    const nextRow = rowPos + table.child(row).nodeSize;\n    const mapFrom = tr.mapping.maps.length;\n    tr.delete(rowPos + tableStart, nextRow + tableStart);\n    const seen = /* @__PURE__ */ new Set();\n    for(let col = 0, index = row * map.width; col < map.width; col++, index++){\n        const pos = map.map[index];\n        if (seen.has(pos)) continue;\n        seen.add(pos);\n        if (row > 0 && pos == map.map[index - map.width]) {\n            const attrs = table.nodeAt(pos).attrs;\n            tr.setNodeMarkup(tr.mapping.slice(mapFrom).map(pos + tableStart), null, {\n                ...attrs,\n                rowspan: attrs.rowspan - 1\n            });\n            col += attrs.colspan - 1;\n        } else if (row < map.height && pos == map.map[index + map.width]) {\n            const cell = table.nodeAt(pos);\n            const attrs = cell.attrs;\n            const copy = cell.type.create({\n                ...attrs,\n                rowspan: cell.attrs.rowspan - 1\n            }, cell.content);\n            const newPos = map.positionAt(row + 1, col, table);\n            tr.insert(tr.mapping.slice(mapFrom).map(tableStart + newPos), copy);\n            col += attrs.colspan - 1;\n        }\n    }\n}\nfunction deleteRow(state, dispatch) {\n    if (!isInTable(state)) return false;\n    if (dispatch) {\n        const rect = selectedRect(state), tr = state.tr;\n        if (rect.top == 0 && rect.bottom == rect.map.height) return false;\n        for(let i = rect.bottom - 1;; i--){\n            removeRow(tr, rect, i);\n            if (i == rect.top) break;\n            const table = rect.tableStart ? tr.doc.nodeAt(rect.tableStart - 1) : tr.doc;\n            if (!table) {\n                throw RangeError(\"No table found\");\n            }\n            rect.table = table;\n            rect.map = TableMap.get(rect.table);\n        }\n        dispatch(tr);\n    }\n    return true;\n}\nfunction isEmpty(cell) {\n    const c = cell.content;\n    return c.childCount == 1 && c.child(0).isTextblock && c.child(0).childCount == 0;\n}\nfunction cellsOverlapRectangle({ width, height, map }, rect) {\n    let indexTop = rect.top * width + rect.left, indexLeft = indexTop;\n    let indexBottom = (rect.bottom - 1) * width + rect.left, indexRight = indexTop + (rect.right - rect.left - 1);\n    for(let i = rect.top; i < rect.bottom; i++){\n        if (rect.left > 0 && map[indexLeft] == map[indexLeft - 1] || rect.right < width && map[indexRight] == map[indexRight + 1]) return true;\n        indexLeft += width;\n        indexRight += width;\n    }\n    for(let i = rect.left; i < rect.right; i++){\n        if (rect.top > 0 && map[indexTop] == map[indexTop - width] || rect.bottom < height && map[indexBottom] == map[indexBottom + width]) return true;\n        indexTop++;\n        indexBottom++;\n    }\n    return false;\n}\nfunction mergeCells(state, dispatch) {\n    const sel = state.selection;\n    if (!(sel instanceof CellSelection) || sel.$anchorCell.pos == sel.$headCell.pos) return false;\n    const rect = selectedRect(state), { map } = rect;\n    if (cellsOverlapRectangle(map, rect)) return false;\n    if (dispatch) {\n        const tr = state.tr;\n        const seen = {};\n        let content = prosemirror_model__WEBPACK_IMPORTED_MODULE_1__.Fragment.empty;\n        let mergedPos;\n        let mergedCell;\n        for(let row = rect.top; row < rect.bottom; row++){\n            for(let col = rect.left; col < rect.right; col++){\n                const cellPos = map.map[row * map.width + col];\n                const cell = rect.table.nodeAt(cellPos);\n                if (seen[cellPos] || !cell) continue;\n                seen[cellPos] = true;\n                if (mergedPos == null) {\n                    mergedPos = cellPos;\n                    mergedCell = cell;\n                } else {\n                    if (!isEmpty(cell)) content = content.append(cell.content);\n                    const mapped = tr.mapping.map(cellPos + rect.tableStart);\n                    tr.delete(mapped, mapped + cell.nodeSize);\n                }\n            }\n        }\n        if (mergedPos == null || mergedCell == null) {\n            return true;\n        }\n        tr.setNodeMarkup(mergedPos + rect.tableStart, null, {\n            ...addColSpan(mergedCell.attrs, mergedCell.attrs.colspan, rect.right - rect.left - mergedCell.attrs.colspan),\n            rowspan: rect.bottom - rect.top\n        });\n        if (content.size) {\n            const end = mergedPos + 1 + mergedCell.content.size;\n            const start = isEmpty(mergedCell) ? mergedPos + 1 : end;\n            tr.replaceWith(start + rect.tableStart, end + rect.tableStart, content);\n        }\n        tr.setSelection(new CellSelection(tr.doc.resolve(mergedPos + rect.tableStart)));\n        dispatch(tr);\n    }\n    return true;\n}\nfunction splitCell(state, dispatch) {\n    const nodeTypes = tableNodeTypes(state.schema);\n    return splitCellWithType(({ node })=>{\n        return nodeTypes[node.type.spec.tableRole];\n    })(state, dispatch);\n}\nfunction splitCellWithType(getCellType) {\n    return (state, dispatch)=>{\n        var _a;\n        const sel = state.selection;\n        let cellNode;\n        let cellPos;\n        if (!(sel instanceof CellSelection)) {\n            cellNode = cellWrapping(sel.$from);\n            if (!cellNode) return false;\n            cellPos = (_a = cellAround(sel.$from)) == null ? void 0 : _a.pos;\n        } else {\n            if (sel.$anchorCell.pos != sel.$headCell.pos) return false;\n            cellNode = sel.$anchorCell.nodeAfter;\n            cellPos = sel.$anchorCell.pos;\n        }\n        if (cellNode == null || cellPos == null) {\n            return false;\n        }\n        if (cellNode.attrs.colspan == 1 && cellNode.attrs.rowspan == 1) {\n            return false;\n        }\n        if (dispatch) {\n            let baseAttrs = cellNode.attrs;\n            const attrs = [];\n            const colwidth = baseAttrs.colwidth;\n            if (baseAttrs.rowspan > 1) baseAttrs = {\n                ...baseAttrs,\n                rowspan: 1\n            };\n            if (baseAttrs.colspan > 1) baseAttrs = {\n                ...baseAttrs,\n                colspan: 1\n            };\n            const rect = selectedRect(state), tr = state.tr;\n            for(let i = 0; i < rect.right - rect.left; i++)attrs.push(colwidth ? {\n                ...baseAttrs,\n                colwidth: colwidth && colwidth[i] ? [\n                    colwidth[i]\n                ] : null\n            } : baseAttrs);\n            let lastCell;\n            for(let row = rect.top; row < rect.bottom; row++){\n                let pos = rect.map.positionAt(row, rect.left, rect.table);\n                if (row == rect.top) pos += cellNode.nodeSize;\n                for(let col = rect.left, i = 0; col < rect.right; col++, i++){\n                    if (col == rect.left && row == rect.top) continue;\n                    tr.insert(lastCell = tr.mapping.map(pos + rect.tableStart, 1), getCellType({\n                        node: cellNode,\n                        row,\n                        col\n                    }).createAndFill(attrs[i]));\n                }\n            }\n            tr.setNodeMarkup(cellPos, getCellType({\n                node: cellNode,\n                row: rect.top,\n                col: rect.left\n            }), attrs[0]);\n            if (sel instanceof CellSelection) tr.setSelection(new CellSelection(tr.doc.resolve(sel.$anchorCell.pos), lastCell ? tr.doc.resolve(lastCell) : void 0));\n            dispatch(tr);\n        }\n        return true;\n    };\n}\nfunction setCellAttr(name, value) {\n    return function(state, dispatch) {\n        if (!isInTable(state)) return false;\n        const $cell = selectionCell(state);\n        if ($cell.nodeAfter.attrs[name] === value) return false;\n        if (dispatch) {\n            const tr = state.tr;\n            if (state.selection instanceof CellSelection) state.selection.forEachCell((node, pos)=>{\n                if (node.attrs[name] !== value) tr.setNodeMarkup(pos, null, {\n                    ...node.attrs,\n                    [name]: value\n                });\n            });\n            else tr.setNodeMarkup($cell.pos, null, {\n                ...$cell.nodeAfter.attrs,\n                [name]: value\n            });\n            dispatch(tr);\n        }\n        return true;\n    };\n}\nfunction deprecated_toggleHeader(type) {\n    return function(state, dispatch) {\n        if (!isInTable(state)) return false;\n        if (dispatch) {\n            const types = tableNodeTypes(state.schema);\n            const rect = selectedRect(state), tr = state.tr;\n            const cells = rect.map.cellsInRect(type == \"column\" ? {\n                left: rect.left,\n                top: 0,\n                right: rect.right,\n                bottom: rect.map.height\n            } : type == \"row\" ? {\n                left: 0,\n                top: rect.top,\n                right: rect.map.width,\n                bottom: rect.bottom\n            } : rect);\n            const nodes = cells.map((pos)=>rect.table.nodeAt(pos));\n            for(let i = 0; i < cells.length; i++)if (nodes[i].type == types.header_cell) tr.setNodeMarkup(rect.tableStart + cells[i], types.cell, nodes[i].attrs);\n            if (tr.steps.length == 0) for(let i = 0; i < cells.length; i++)tr.setNodeMarkup(rect.tableStart + cells[i], types.header_cell, nodes[i].attrs);\n            dispatch(tr);\n        }\n        return true;\n    };\n}\nfunction isHeaderEnabledByType(type, rect, types) {\n    const cellPositions = rect.map.cellsInRect({\n        left: 0,\n        top: 0,\n        right: type == \"row\" ? rect.map.width : 1,\n        bottom: type == \"column\" ? rect.map.height : 1\n    });\n    for(let i = 0; i < cellPositions.length; i++){\n        const cell = rect.table.nodeAt(cellPositions[i]);\n        if (cell && cell.type !== types.header_cell) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction toggleHeader(type, options) {\n    options = options || {\n        useDeprecatedLogic: false\n    };\n    if (options.useDeprecatedLogic) return deprecated_toggleHeader(type);\n    return function(state, dispatch) {\n        if (!isInTable(state)) return false;\n        if (dispatch) {\n            const types = tableNodeTypes(state.schema);\n            const rect = selectedRect(state), tr = state.tr;\n            const isHeaderRowEnabled = isHeaderEnabledByType(\"row\", rect, types);\n            const isHeaderColumnEnabled = isHeaderEnabledByType(\"column\", rect, types);\n            const isHeaderEnabled = type === \"column\" ? isHeaderRowEnabled : type === \"row\" ? isHeaderColumnEnabled : false;\n            const selectionStartsAt = isHeaderEnabled ? 1 : 0;\n            const cellsRect = type == \"column\" ? {\n                left: 0,\n                top: selectionStartsAt,\n                right: 1,\n                bottom: rect.map.height\n            } : type == \"row\" ? {\n                left: selectionStartsAt,\n                top: 0,\n                right: rect.map.width,\n                bottom: 1\n            } : rect;\n            const newType = type == \"column\" ? isHeaderColumnEnabled ? types.cell : types.header_cell : type == \"row\" ? isHeaderRowEnabled ? types.cell : types.header_cell : types.cell;\n            rect.map.cellsInRect(cellsRect).forEach((relativeCellPos)=>{\n                const cellPos = relativeCellPos + rect.tableStart;\n                const cell = tr.doc.nodeAt(cellPos);\n                if (cell) {\n                    tr.setNodeMarkup(cellPos, newType, cell.attrs);\n                }\n            });\n            dispatch(tr);\n        }\n        return true;\n    };\n}\nvar toggleHeaderRow = toggleHeader(\"row\", {\n    useDeprecatedLogic: true\n});\nvar toggleHeaderColumn = toggleHeader(\"column\", {\n    useDeprecatedLogic: true\n});\nvar toggleHeaderCell = toggleHeader(\"cell\", {\n    useDeprecatedLogic: true\n});\nfunction findNextCell($cell, dir) {\n    if (dir < 0) {\n        const before = $cell.nodeBefore;\n        if (before) return $cell.pos - before.nodeSize;\n        for(let row = $cell.index(-1) - 1, rowEnd = $cell.before(); row >= 0; row--){\n            const rowNode = $cell.node(-1).child(row);\n            const lastChild = rowNode.lastChild;\n            if (lastChild) {\n                return rowEnd - 1 - lastChild.nodeSize;\n            }\n            rowEnd -= rowNode.nodeSize;\n        }\n    } else {\n        if ($cell.index() < $cell.parent.childCount - 1) {\n            return $cell.pos + $cell.nodeAfter.nodeSize;\n        }\n        const table = $cell.node(-1);\n        for(let row = $cell.indexAfter(-1), rowStart = $cell.after(); row < table.childCount; row++){\n            const rowNode = table.child(row);\n            if (rowNode.childCount) return rowStart + 1;\n            rowStart += rowNode.nodeSize;\n        }\n    }\n    return null;\n}\nfunction goToNextCell(direction) {\n    return function(state, dispatch) {\n        if (!isInTable(state)) return false;\n        const cell = findNextCell(selectionCell(state), direction);\n        if (cell == null) return false;\n        if (dispatch) {\n            const $cell = state.doc.resolve(cell);\n            dispatch(state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.between($cell, moveCellForward($cell))).scrollIntoView());\n        }\n        return true;\n    };\n}\nfunction deleteTable(state, dispatch) {\n    const $pos = state.selection.$anchor;\n    for(let d = $pos.depth; d > 0; d--){\n        const node = $pos.node(d);\n        if (node.type.spec.tableRole == \"table\") {\n            if (dispatch) dispatch(state.tr.delete($pos.before(d), $pos.after(d)).scrollIntoView());\n            return true;\n        }\n    }\n    return false;\n}\n// src/index.ts\nfunction tableEditing({ allowTableNodeSelection = false } = {}) {\n    return new prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        key: tableEditingKey,\n        // This piece of state is used to remember when a mouse-drag\n        // cell-selection is happening, so that it can continue even as\n        // transactions (which might move its anchor cell) come in.\n        state: {\n            init () {\n                return null;\n            },\n            apply (tr, cur) {\n                const set = tr.getMeta(tableEditingKey);\n                if (set != null) return set == -1 ? null : set;\n                if (cur == null || !tr.docChanged) return cur;\n                const { deleted, pos } = tr.mapping.mapResult(cur);\n                return deleted ? null : pos;\n            }\n        },\n        props: {\n            decorations: drawCellSelection,\n            handleDOMEvents: {\n                mousedown: handleMouseDown\n            },\n            createSelectionBetween (view) {\n                return tableEditingKey.getState(view.state) != null ? view.state.selection : null;\n            },\n            handleTripleClick,\n            handleKeyDown,\n            handlePaste\n        },\n        appendTransaction (_, oldState, state) {\n            return normalizeSelection(state, fixTables(state, oldState), allowTableNodeSelection);\n        }\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/prosemirror-tables/dist/index.js\n");

/***/ })

};
;