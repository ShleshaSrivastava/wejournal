"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tiptap";
exports.ids = ["vendor-chunks/@tiptap"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tiptap/core/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@tiptap/core/dist/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CommandManager: () => (/* binding */ CommandManager),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   Extension: () => (/* binding */ Extension),\n/* harmony export */   InputRule: () => (/* binding */ InputRule),\n/* harmony export */   Mark: () => (/* binding */ Mark),\n/* harmony export */   Node: () => (/* binding */ Node),\n/* harmony export */   NodePos: () => (/* binding */ NodePos),\n/* harmony export */   NodeView: () => (/* binding */ NodeView),\n/* harmony export */   PasteRule: () => (/* binding */ PasteRule),\n/* harmony export */   Tracker: () => (/* binding */ Tracker),\n/* harmony export */   callOrReturn: () => (/* binding */ callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* binding */ combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* binding */ createChainableState),\n/* harmony export */   createDocument: () => (/* binding */ createDocument),\n/* harmony export */   createNodeFromContent: () => (/* binding */ createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* binding */ createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* binding */ defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* binding */ deleteProps),\n/* harmony export */   elementFromString: () => (/* binding */ elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* binding */ escapeForRegEx),\n/* harmony export */   extensions: () => (/* binding */ extensions),\n/* harmony export */   findChildren: () => (/* binding */ findChildren),\n/* harmony export */   findChildrenInRange: () => (/* binding */ findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* binding */ findDuplicates),\n/* harmony export */   findParentNode: () => (/* binding */ findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* binding */ findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   generateHTML: () => (/* binding */ generateHTML),\n/* harmony export */   generateJSON: () => (/* binding */ generateJSON),\n/* harmony export */   generateText: () => (/* binding */ generateText),\n/* harmony export */   getAttributes: () => (/* binding */ getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* binding */ getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* binding */ getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* binding */ getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* binding */ getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* binding */ getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* binding */ getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* binding */ getMarkRange),\n/* harmony export */   getMarkType: () => (/* binding */ getMarkType),\n/* harmony export */   getMarksBetween: () => (/* binding */ getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* binding */ getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* binding */ getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* binding */ getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* binding */ getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* binding */ getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* binding */ getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* binding */ getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* binding */ getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* binding */ getSplittedAttributes),\n/* harmony export */   getText: () => (/* binding */ getText),\n/* harmony export */   getTextBetween: () => (/* binding */ getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* binding */ getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* binding */ getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* binding */ injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* binding */ inputRulesPlugin),\n/* harmony export */   isActive: () => (/* binding */ isActive),\n/* harmony export */   isAtEndOfNode: () => (/* binding */ isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* binding */ isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* binding */ isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* binding */ isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isList: () => (/* binding */ isList),\n/* harmony export */   isMacOS: () => (/* binding */ isMacOS),\n/* harmony export */   isMarkActive: () => (/* binding */ isMarkActive),\n/* harmony export */   isNodeActive: () => (/* binding */ isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* binding */ isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* binding */ isNodeSelection),\n/* harmony export */   isNumber: () => (/* binding */ isNumber),\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   isRegExp: () => (/* binding */ isRegExp),\n/* harmony export */   isString: () => (/* binding */ isString),\n/* harmony export */   isTextSelection: () => (/* binding */ isTextSelection),\n/* harmony export */   isiOS: () => (/* binding */ isiOS),\n/* harmony export */   markInputRule: () => (/* binding */ markInputRule),\n/* harmony export */   markPasteRule: () => (/* binding */ markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* binding */ mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* binding */ mergeDeep),\n/* harmony export */   minMax: () => (/* binding */ minMax),\n/* harmony export */   nodeInputRule: () => (/* binding */ nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* binding */ nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* binding */ objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* binding */ pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* binding */ posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* binding */ removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* binding */ resolveFocusPosition),\n/* harmony export */   selectionToInsertionEnd: () => (/* binding */ selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* binding */ splitExtensions),\n/* harmony export */   textInputRule: () => (/* binding */ textInputRule),\n/* harmony export */   textPasteRule: () => (/* binding */ textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* binding */ textblockTypeInputRule),\n/* harmony export */   wrappingInputRule: () => (/* binding */ wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/view */ \"(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\");\n/* harmony import */ var _tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/pm/keymap */ \"(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js\");\n/* harmony import */ var _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/pm/model */ \"(ssr)/./node_modules/@tiptap/pm/model/dist/index.js\");\n/* harmony import */ var _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/pm/transform */ \"(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js\");\n/* harmony import */ var _tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/pm/commands */ \"(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js\");\n/* harmony import */ var _tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/pm/schema-list */ \"(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js\");\n\n\n\n\n\n\n\nfunction createChainableState(config) {\n    const { state, transaction } = config;\n    let { selection } = transaction;\n    let { doc } = transaction;\n    let { storedMarks } = transaction;\n    return {\n        ...state,\n        apply: state.apply.bind(state),\n        applyTransaction: state.applyTransaction.bind(state),\n        plugins: state.plugins,\n        schema: state.schema,\n        reconfigure: state.reconfigure.bind(state),\n        toJSON: state.toJSON.bind(state),\n        get storedMarks () {\n            return storedMarks;\n        },\n        get selection () {\n            return selection;\n        },\n        get doc () {\n            return doc;\n        },\n        get tr () {\n            selection = transaction.selection;\n            doc = transaction.doc;\n            storedMarks = transaction.storedMarks;\n            return transaction;\n        }\n    };\n}\nclass CommandManager {\n    constructor(props){\n        this.editor = props.editor;\n        this.rawCommands = this.editor.extensionManager.commands;\n        this.customState = props.state;\n    }\n    get hasCustomState() {\n        return !!this.customState;\n    }\n    get state() {\n        return this.customState || this.editor.state;\n    }\n    get commands() {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const { tr } = state;\n        const props = this.buildProps(tr);\n        return Object.fromEntries(Object.entries(rawCommands).map(([name, command])=>{\n            const method = (...args)=>{\n                const callback = command(...args)(props);\n                if (!tr.getMeta(\"preventDispatch\") && !this.hasCustomState) {\n                    view.dispatch(tr);\n                }\n                return callback;\n            };\n            return [\n                name,\n                method\n            ];\n        }));\n    }\n    get chain() {\n        return ()=>this.createChain();\n    }\n    get can() {\n        return ()=>this.createCan();\n    }\n    createChain(startTr, shouldDispatch = true) {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const callbacks = [];\n        const hasStartTransaction = !!startTr;\n        const tr = startTr || state.tr;\n        const run = ()=>{\n            if (!hasStartTransaction && shouldDispatch && !tr.getMeta(\"preventDispatch\") && !this.hasCustomState) {\n                view.dispatch(tr);\n            }\n            return callbacks.every((callback)=>callback === true);\n        };\n        const chain = {\n            ...Object.fromEntries(Object.entries(rawCommands).map(([name, command])=>{\n                const chainedCommand = (...args)=>{\n                    const props = this.buildProps(tr, shouldDispatch);\n                    const callback = command(...args)(props);\n                    callbacks.push(callback);\n                    return chain;\n                };\n                return [\n                    name,\n                    chainedCommand\n                ];\n            })),\n            run\n        };\n        return chain;\n    }\n    createCan(startTr) {\n        const { rawCommands, state } = this;\n        const dispatch = false;\n        const tr = startTr || state.tr;\n        const props = this.buildProps(tr, dispatch);\n        const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command])=>{\n            return [\n                name,\n                (...args)=>command(...args)({\n                        ...props,\n                        dispatch: undefined\n                    })\n            ];\n        }));\n        return {\n            ...formattedCommands,\n            chain: ()=>this.createChain(tr, dispatch)\n        };\n    }\n    buildProps(tr, shouldDispatch = true) {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const props = {\n            tr,\n            editor,\n            view,\n            state: createChainableState({\n                state,\n                transaction: tr\n            }),\n            dispatch: shouldDispatch ? ()=>undefined : undefined,\n            chain: ()=>this.createChain(tr, shouldDispatch),\n            can: ()=>this.createCan(tr),\n            get commands () {\n                return Object.fromEntries(Object.entries(rawCommands).map(([name, command])=>{\n                    return [\n                        name,\n                        (...args)=>command(...args)(props)\n                    ];\n                }));\n            }\n        };\n        return props;\n    }\n}\nclass EventEmitter {\n    constructor(){\n        this.callbacks = {};\n    }\n    on(event, fn) {\n        if (!this.callbacks[event]) {\n            this.callbacks[event] = [];\n        }\n        this.callbacks[event].push(fn);\n        return this;\n    }\n    emit(event, ...args) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            callbacks.forEach((callback)=>callback.apply(this, args));\n        }\n        return this;\n    }\n    off(event, fn) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            if (fn) {\n                this.callbacks[event] = callbacks.filter((callback)=>callback !== fn);\n            } else {\n                delete this.callbacks[event];\n            }\n        }\n        return this;\n    }\n    removeAllListeners() {\n        this.callbacks = {};\n    }\n}\nfunction getExtensionField(extension, field, context) {\n    if (extension.config[field] === undefined && extension.parent) {\n        return getExtensionField(extension.parent, field, context);\n    }\n    if (typeof extension.config[field] === \"function\") {\n        const value = extension.config[field].bind({\n            ...context,\n            parent: extension.parent ? getExtensionField(extension.parent, field, context) : null\n        });\n        return value;\n    }\n    return extension.config[field];\n}\nfunction splitExtensions(extensions) {\n    const baseExtensions = extensions.filter((extension)=>extension.type === \"extension\");\n    const nodeExtensions = extensions.filter((extension)=>extension.type === \"node\");\n    const markExtensions = extensions.filter((extension)=>extension.type === \"mark\");\n    return {\n        baseExtensions,\n        nodeExtensions,\n        markExtensions\n    };\n}\n/**\r\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\r\n * @param extensions List of extensions\r\n */ function getAttributesFromExtensions(extensions) {\n    const extensionAttributes = [];\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\n    const nodeAndMarkExtensions = [\n        ...nodeExtensions,\n        ...markExtensions\n    ];\n    const defaultAttribute = {\n        default: null,\n        rendered: true,\n        renderHTML: null,\n        parseHTML: null,\n        keepOnSplit: true,\n        isRequired: false\n    };\n    extensions.forEach((extension)=>{\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage\n        };\n        const addGlobalAttributes = getExtensionField(extension, \"addGlobalAttributes\", context);\n        if (!addGlobalAttributes) {\n            return;\n        }\n        // TODO: remove `as GlobalAttributes`\n        const globalAttributes = addGlobalAttributes();\n        globalAttributes.forEach((globalAttribute)=>{\n            globalAttribute.types.forEach((type)=>{\n                Object.entries(globalAttribute.attributes).forEach(([name, attribute])=>{\n                    extensionAttributes.push({\n                        type,\n                        name,\n                        attribute: {\n                            ...defaultAttribute,\n                            ...attribute\n                        }\n                    });\n                });\n            });\n        });\n    });\n    nodeAndMarkExtensions.forEach((extension)=>{\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage\n        };\n        const addAttributes = getExtensionField(extension, \"addAttributes\", context);\n        if (!addAttributes) {\n            return;\n        }\n        // TODO: remove `as Attributes`\n        const attributes = addAttributes();\n        Object.entries(attributes).forEach(([name, attribute])=>{\n            const mergedAttr = {\n                ...defaultAttribute,\n                ...attribute\n            };\n            if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === \"function\") {\n                mergedAttr.default = mergedAttr.default();\n            }\n            if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === undefined) {\n                delete mergedAttr.default;\n            }\n            extensionAttributes.push({\n                type: extension.name,\n                name,\n                attribute: mergedAttr\n            });\n        });\n    });\n    return extensionAttributes;\n}\nfunction getNodeType(nameOrType, schema) {\n    if (typeof nameOrType === \"string\") {\n        if (!schema.nodes[nameOrType]) {\n            throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n        }\n        return schema.nodes[nameOrType];\n    }\n    return nameOrType;\n}\nfunction mergeAttributes(...objects) {\n    return objects.filter((item)=>!!item).reduce((items, item)=>{\n        const mergedAttributes = {\n            ...items\n        };\n        Object.entries(item).forEach(([key, value])=>{\n            const exists = mergedAttributes[key];\n            if (!exists) {\n                mergedAttributes[key] = value;\n                return;\n            }\n            if (key === \"class\") {\n                const valueClasses = value ? value.split(\" \") : [];\n                const existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(\" \") : [];\n                const insertClasses = valueClasses.filter((valueClass)=>!existingClasses.includes(valueClass));\n                mergedAttributes[key] = [\n                    ...existingClasses,\n                    ...insertClasses\n                ].join(\" \");\n            } else if (key === \"style\") {\n                mergedAttributes[key] = [\n                    mergedAttributes[key],\n                    value\n                ].join(\"; \");\n            } else {\n                mergedAttributes[key] = value;\n            }\n        });\n        return mergedAttributes;\n    }, {});\n}\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n    return extensionAttributes.filter((item)=>item.attribute.rendered).map((item)=>{\n        if (!item.attribute.renderHTML) {\n            return {\n                [item.name]: nodeOrMark.attrs[item.name]\n            };\n        }\n        return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n    }).reduce((attributes, attribute)=>mergeAttributes(attributes, attribute), {});\n}\nfunction isFunction(value) {\n    return typeof value === \"function\";\n}\n/**\r\n * Optionally calls `value` as a function.\r\n * Otherwise it is returned directly.\r\n * @param value Function or any value.\r\n * @param context Optional context to bind to function.\r\n * @param props Optional props to pass to function.\r\n */ function callOrReturn(value, context = undefined, ...props) {\n    if (isFunction(value)) {\n        if (context) {\n            return value.bind(context)(...props);\n        }\n        return value(...props);\n    }\n    return value;\n}\nfunction isEmptyObject(value = {}) {\n    return Object.keys(value).length === 0 && value.constructor === Object;\n}\nfunction fromString(value) {\n    if (typeof value !== \"string\") {\n        return value;\n    }\n    if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n        return Number(value);\n    }\n    if (value === \"true\") {\n        return true;\n    }\n    if (value === \"false\") {\n        return false;\n    }\n    return value;\n}\n/**\r\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\r\n * Cancels when `getAttrs` returned `false`.\r\n * @param parseRule ProseMirror ParseRule\r\n * @param extensionAttributes List of attributes to inject\r\n */ function injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n    if (parseRule.style) {\n        return parseRule;\n    }\n    return {\n        ...parseRule,\n        getAttrs: (node)=>{\n            const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n            if (oldAttributes === false) {\n                return false;\n            }\n            const newAttributes = extensionAttributes.reduce((items, item)=>{\n                const value = item.attribute.parseHTML ? item.attribute.parseHTML(node) : fromString(node.getAttribute(item.name));\n                if (value === null || value === undefined) {\n                    return items;\n                }\n                return {\n                    ...items,\n                    [item.name]: value\n                };\n            }, {});\n            return {\n                ...oldAttributes,\n                ...newAttributes\n            };\n        }\n    };\n}\nfunction cleanUpSchemaItem(data) {\n    return Object.fromEntries(// @ts-ignore\n    Object.entries(data).filter(([key, value])=>{\n        if (key === \"attrs\" && isEmptyObject(value)) {\n            return false;\n        }\n        return value !== null && value !== undefined;\n    }));\n}\nfunction getSchemaByResolvedExtensions(extensions, editor) {\n    var _a;\n    const allAttributes = getAttributesFromExtensions(extensions);\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\n    const topNode = (_a = nodeExtensions.find((extension)=>getExtensionField(extension, \"topNode\"))) === null || _a === void 0 ? void 0 : _a.name;\n    const nodes = Object.fromEntries(nodeExtensions.map((extension)=>{\n        const extensionAttributes = allAttributes.filter((attribute)=>attribute.type === extension.name);\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor\n        };\n        const extraNodeFields = extensions.reduce((fields, e)=>{\n            const extendNodeSchema = getExtensionField(e, \"extendNodeSchema\", context);\n            return {\n                ...fields,\n                ...extendNodeSchema ? extendNodeSchema(extension) : {}\n            };\n        }, {});\n        const schema = cleanUpSchemaItem({\n            ...extraNodeFields,\n            content: callOrReturn(getExtensionField(extension, \"content\", context)),\n            marks: callOrReturn(getExtensionField(extension, \"marks\", context)),\n            group: callOrReturn(getExtensionField(extension, \"group\", context)),\n            inline: callOrReturn(getExtensionField(extension, \"inline\", context)),\n            atom: callOrReturn(getExtensionField(extension, \"atom\", context)),\n            selectable: callOrReturn(getExtensionField(extension, \"selectable\", context)),\n            draggable: callOrReturn(getExtensionField(extension, \"draggable\", context)),\n            code: callOrReturn(getExtensionField(extension, \"code\", context)),\n            defining: callOrReturn(getExtensionField(extension, \"defining\", context)),\n            isolating: callOrReturn(getExtensionField(extension, \"isolating\", context)),\n            attrs: Object.fromEntries(extensionAttributes.map((extensionAttribute)=>{\n                var _a;\n                return [\n                    extensionAttribute.name,\n                    {\n                        default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n                    }\n                ];\n            }))\n        });\n        const parseHTML = callOrReturn(getExtensionField(extension, \"parseHTML\", context));\n        if (parseHTML) {\n            schema.parseDOM = parseHTML.map((parseRule)=>injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n        }\n        const renderHTML = getExtensionField(extension, \"renderHTML\", context);\n        if (renderHTML) {\n            schema.toDOM = (node)=>renderHTML({\n                    node,\n                    HTMLAttributes: getRenderedAttributes(node, extensionAttributes)\n                });\n        }\n        const renderText = getExtensionField(extension, \"renderText\", context);\n        if (renderText) {\n            schema.toText = renderText;\n        }\n        return [\n            extension.name,\n            schema\n        ];\n    }));\n    const marks = Object.fromEntries(markExtensions.map((extension)=>{\n        const extensionAttributes = allAttributes.filter((attribute)=>attribute.type === extension.name);\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor\n        };\n        const extraMarkFields = extensions.reduce((fields, e)=>{\n            const extendMarkSchema = getExtensionField(e, \"extendMarkSchema\", context);\n            return {\n                ...fields,\n                ...extendMarkSchema ? extendMarkSchema(extension) : {}\n            };\n        }, {});\n        const schema = cleanUpSchemaItem({\n            ...extraMarkFields,\n            inclusive: callOrReturn(getExtensionField(extension, \"inclusive\", context)),\n            excludes: callOrReturn(getExtensionField(extension, \"excludes\", context)),\n            group: callOrReturn(getExtensionField(extension, \"group\", context)),\n            spanning: callOrReturn(getExtensionField(extension, \"spanning\", context)),\n            code: callOrReturn(getExtensionField(extension, \"code\", context)),\n            attrs: Object.fromEntries(extensionAttributes.map((extensionAttribute)=>{\n                var _a;\n                return [\n                    extensionAttribute.name,\n                    {\n                        default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n                    }\n                ];\n            }))\n        });\n        const parseHTML = callOrReturn(getExtensionField(extension, \"parseHTML\", context));\n        if (parseHTML) {\n            schema.parseDOM = parseHTML.map((parseRule)=>injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n        }\n        const renderHTML = getExtensionField(extension, \"renderHTML\", context);\n        if (renderHTML) {\n            schema.toDOM = (mark)=>renderHTML({\n                    mark,\n                    HTMLAttributes: getRenderedAttributes(mark, extensionAttributes)\n                });\n        }\n        return [\n            extension.name,\n            schema\n        ];\n    }));\n    return new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Schema({\n        topNode,\n        nodes,\n        marks\n    });\n}\nfunction getSchemaTypeByName(name, schema) {\n    return schema.nodes[name] || schema.marks[name] || null;\n}\nfunction isExtensionRulesEnabled(extension, enabled) {\n    if (Array.isArray(enabled)) {\n        return enabled.some((enabledExtension)=>{\n            const name = typeof enabledExtension === \"string\" ? enabledExtension : enabledExtension.name;\n            return name === extension.name;\n        });\n    }\n    return enabled;\n}\nconst getTextContentFromNodes = ($from, maxMatch = 500)=>{\n    let textBefore = \"\";\n    const sliceEndPos = $from.parentOffset;\n    $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index)=>{\n        var _a, _b;\n        const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            node,\n            pos,\n            parent,\n            index\n        })) || node.textContent || \"%leaf%\";\n        textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));\n    });\n    return textBefore;\n};\nfunction isRegExp(value) {\n    return Object.prototype.toString.call(value) === \"[object RegExp]\";\n}\nclass InputRule {\n    constructor(config){\n        this.find = config.find;\n        this.handler = config.handler;\n    }\n}\nconst inputRuleMatcherHandler = (text, find)=>{\n    if (isRegExp(find)) {\n        return find.exec(text);\n    }\n    const inputRuleMatch = find(text);\n    if (!inputRuleMatch) {\n        return null;\n    }\n    const result = [\n        inputRuleMatch.text\n    ];\n    result.index = inputRuleMatch.index;\n    result.input = text;\n    result.data = inputRuleMatch.data;\n    if (inputRuleMatch.replaceWith) {\n        if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n            console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n        }\n        result.push(inputRuleMatch.replaceWith);\n    }\n    return result;\n};\nfunction run$1(config) {\n    var _a;\n    const { editor, from, to, text, rules, plugin } = config;\n    const { view } = editor;\n    if (view.composing) {\n        return false;\n    }\n    const $from = view.state.doc.resolve(from);\n    if (// check for code node\n    $from.parent.type.spec.code || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find((mark)=>mark.type.spec.code))) {\n        return false;\n    }\n    let matched = false;\n    const textBefore = getTextContentFromNodes($from) + text;\n    rules.forEach((rule)=>{\n        if (matched) {\n            return;\n        }\n        const match = inputRuleMatcherHandler(textBefore, rule.find);\n        if (!match) {\n            return;\n        }\n        const tr = view.state.tr;\n        const state = createChainableState({\n            state: view.state,\n            transaction: tr\n        });\n        const range = {\n            from: from - (match[0].length - text.length),\n            to\n        };\n        const { commands, chain, can } = new CommandManager({\n            editor,\n            state\n        });\n        const handler = rule.handler({\n            state,\n            range,\n            match,\n            commands,\n            chain,\n            can\n        });\n        // stop if there are no changes\n        if (handler === null || !tr.steps.length) {\n            return;\n        }\n        // store transform as meta data\n        // so we can undo input rules within the `undoInputRules` command\n        tr.setMeta(plugin, {\n            transform: tr,\n            from,\n            to,\n            text\n        });\n        view.dispatch(tr);\n        matched = true;\n    });\n    return matched;\n}\n/**\r\n * Create an input rules plugin. When enabled, it will cause text\r\n * input that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */ function inputRulesPlugin(props) {\n    const { editor, rules } = props;\n    const plugin = new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        state: {\n            init () {\n                return null;\n            },\n            apply (tr, prev) {\n                const stored = tr.getMeta(plugin);\n                if (stored) {\n                    return stored;\n                }\n                return tr.selectionSet || tr.docChanged ? null : prev;\n            }\n        },\n        props: {\n            handleTextInput (view, from, to, text) {\n                return run$1({\n                    editor,\n                    from,\n                    to,\n                    text,\n                    rules,\n                    plugin\n                });\n            },\n            handleDOMEvents: {\n                compositionend: (view)=>{\n                    setTimeout(()=>{\n                        const { $cursor } = view.state.selection;\n                        if ($cursor) {\n                            run$1({\n                                editor,\n                                from: $cursor.pos,\n                                to: $cursor.pos,\n                                text: \"\",\n                                rules,\n                                plugin\n                            });\n                        }\n                    });\n                    return false;\n                }\n            },\n            // add support for input rules to trigger on enter\n            // this is useful for example for code blocks\n            handleKeyDown (view, event) {\n                if (event.key !== \"Enter\") {\n                    return false;\n                }\n                const { $cursor } = view.state.selection;\n                if ($cursor) {\n                    return run$1({\n                        editor,\n                        from: $cursor.pos,\n                        to: $cursor.pos,\n                        text: \"\\n\",\n                        rules,\n                        plugin\n                    });\n                }\n                return false;\n            }\n        },\n        // @ts-ignore\n        isInputRules: true\n    });\n    return plugin;\n}\nfunction isNumber(value) {\n    return typeof value === \"number\";\n}\nclass PasteRule {\n    constructor(config){\n        this.find = config.find;\n        this.handler = config.handler;\n    }\n}\nconst pasteRuleMatcherHandler = (text, find, event)=>{\n    if (isRegExp(find)) {\n        return [\n            ...text.matchAll(find)\n        ];\n    }\n    const matches = find(text, event);\n    if (!matches) {\n        return [];\n    }\n    return matches.map((pasteRuleMatch)=>{\n        const result = [\n            pasteRuleMatch.text\n        ];\n        result.index = pasteRuleMatch.index;\n        result.input = text;\n        result.data = pasteRuleMatch.data;\n        if (pasteRuleMatch.replaceWith) {\n            if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n                console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n            }\n            result.push(pasteRuleMatch.replaceWith);\n        }\n        return result;\n    });\n};\nfunction run(config) {\n    const { editor, state, from, to, rule, pasteEvent, dropEvent } = config;\n    const { commands, chain, can } = new CommandManager({\n        editor,\n        state\n    });\n    const handlers = [];\n    state.doc.nodesBetween(from, to, (node, pos)=>{\n        if (!node.isTextblock || node.type.spec.code) {\n            return;\n        }\n        const resolvedFrom = Math.max(from, pos);\n        const resolvedTo = Math.min(to, pos + node.content.size);\n        const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, \"￼\");\n        const matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent);\n        matches.forEach((match)=>{\n            if (match.index === undefined) {\n                return;\n            }\n            const start = resolvedFrom + match.index + 1;\n            const end = start + match[0].length;\n            const range = {\n                from: state.tr.mapping.map(start),\n                to: state.tr.mapping.map(end)\n            };\n            const handler = rule.handler({\n                state,\n                range,\n                match,\n                commands,\n                chain,\n                can,\n                pasteEvent,\n                dropEvent\n            });\n            handlers.push(handler);\n        });\n    });\n    const success = handlers.every((handler)=>handler !== null);\n    return success;\n}\n/**\r\n * Create an paste rules plugin. When enabled, it will cause pasted\r\n * text that matches any of the given rules to trigger the rule’s\r\n * action.\r\n */ function pasteRulesPlugin(props) {\n    const { editor, rules } = props;\n    let dragSourceElement = null;\n    let isPastedFromProseMirror = false;\n    let isDroppedFromProseMirror = false;\n    let pasteEvent = new ClipboardEvent(\"paste\");\n    let dropEvent = new DragEvent(\"drop\");\n    const plugins = rules.map((rule)=>{\n        return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n            // we register a global drag handler to track the current drag source element\n            view (view) {\n                const handleDragstart = (event)=>{\n                    var _a;\n                    dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target)) ? view.dom.parentElement : null;\n                };\n                window.addEventListener(\"dragstart\", handleDragstart);\n                return {\n                    destroy () {\n                        window.removeEventListener(\"dragstart\", handleDragstart);\n                    }\n                };\n            },\n            props: {\n                handleDOMEvents: {\n                    drop: (view, event)=>{\n                        isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\n                        dropEvent = event;\n                        return false;\n                    },\n                    paste: (_view, event)=>{\n                        var _a;\n                        const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData(\"text/html\");\n                        pasteEvent = event;\n                        isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes(\"data-pm-slice\"));\n                        return false;\n                    }\n                }\n            },\n            appendTransaction: (transactions, oldState, state)=>{\n                const transaction = transactions[0];\n                const isPaste = transaction.getMeta(\"uiEvent\") === \"paste\" && !isPastedFromProseMirror;\n                const isDrop = transaction.getMeta(\"uiEvent\") === \"drop\" && !isDroppedFromProseMirror;\n                if (!isPaste && !isDrop) {\n                    return;\n                }\n                // stop if there is no changed range\n                const from = oldState.doc.content.findDiffStart(state.doc.content);\n                const to = oldState.doc.content.findDiffEnd(state.doc.content);\n                if (!isNumber(from) || !to || from === to.b) {\n                    return;\n                }\n                // build a chainable state\n                // so we can use a single transaction for all paste rules\n                const tr = state.tr;\n                const chainableState = createChainableState({\n                    state,\n                    transaction: tr\n                });\n                const handler = run({\n                    editor,\n                    state: chainableState,\n                    from: Math.max(from - 1, 0),\n                    to: to.b - 1,\n                    rule,\n                    pasteEvent,\n                    dropEvent\n                });\n                // stop if there are no changes\n                if (!handler || !tr.steps.length) {\n                    return;\n                }\n                dropEvent = new DragEvent(\"drop\");\n                pasteEvent = new ClipboardEvent(\"paste\");\n                return tr;\n            }\n        });\n    });\n    return plugins;\n}\nfunction findDuplicates(items) {\n    const filtered = items.filter((el, index)=>items.indexOf(el) !== index);\n    return [\n        ...new Set(filtered)\n    ];\n}\nclass ExtensionManager {\n    constructor(extensions, editor){\n        this.splittableMarks = [];\n        this.editor = editor;\n        this.extensions = ExtensionManager.resolve(extensions);\n        this.schema = getSchemaByResolvedExtensions(this.extensions, editor);\n        this.extensions.forEach((extension)=>{\n            var _a;\n            // store extension storage in editor\n            this.editor.extensionStorage[extension.name] = extension.storage;\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor: this.editor,\n                type: getSchemaTypeByName(extension.name, this.schema)\n            };\n            if (extension.type === \"mark\") {\n                const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, \"keepOnSplit\", context))) !== null && _a !== void 0 ? _a : true;\n                if (keepOnSplit) {\n                    this.splittableMarks.push(extension.name);\n                }\n            }\n            const onBeforeCreate = getExtensionField(extension, \"onBeforeCreate\", context);\n            if (onBeforeCreate) {\n                this.editor.on(\"beforeCreate\", onBeforeCreate);\n            }\n            const onCreate = getExtensionField(extension, \"onCreate\", context);\n            if (onCreate) {\n                this.editor.on(\"create\", onCreate);\n            }\n            const onUpdate = getExtensionField(extension, \"onUpdate\", context);\n            if (onUpdate) {\n                this.editor.on(\"update\", onUpdate);\n            }\n            const onSelectionUpdate = getExtensionField(extension, \"onSelectionUpdate\", context);\n            if (onSelectionUpdate) {\n                this.editor.on(\"selectionUpdate\", onSelectionUpdate);\n            }\n            const onTransaction = getExtensionField(extension, \"onTransaction\", context);\n            if (onTransaction) {\n                this.editor.on(\"transaction\", onTransaction);\n            }\n            const onFocus = getExtensionField(extension, \"onFocus\", context);\n            if (onFocus) {\n                this.editor.on(\"focus\", onFocus);\n            }\n            const onBlur = getExtensionField(extension, \"onBlur\", context);\n            if (onBlur) {\n                this.editor.on(\"blur\", onBlur);\n            }\n            const onDestroy = getExtensionField(extension, \"onDestroy\", context);\n            if (onDestroy) {\n                this.editor.on(\"destroy\", onDestroy);\n            }\n        });\n    }\n    static resolve(extensions) {\n        const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n        const duplicatedNames = findDuplicates(resolvedExtensions.map((extension)=>extension.name));\n        if (duplicatedNames.length) {\n            console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map((item)=>`'${item}'`).join(\", \")}]. This can lead to issues.`);\n        }\n        return resolvedExtensions;\n    }\n    static flatten(extensions) {\n        return extensions.map((extension)=>{\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage\n            };\n            const addExtensions = getExtensionField(extension, \"addExtensions\", context);\n            if (addExtensions) {\n                return [\n                    extension,\n                    ...this.flatten(addExtensions())\n                ];\n            }\n            return extension;\n        })// `Infinity` will break TypeScript so we set a number that is probably high enough\n        .flat(10);\n    }\n    static sort(extensions) {\n        const defaultPriority = 100;\n        return extensions.sort((a, b)=>{\n            const priorityA = getExtensionField(a, \"priority\") || defaultPriority;\n            const priorityB = getExtensionField(b, \"priority\") || defaultPriority;\n            if (priorityA > priorityB) {\n                return -1;\n            }\n            if (priorityA < priorityB) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n    get commands() {\n        return this.extensions.reduce((commands, extension)=>{\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor: this.editor,\n                type: getSchemaTypeByName(extension.name, this.schema)\n            };\n            const addCommands = getExtensionField(extension, \"addCommands\", context);\n            if (!addCommands) {\n                return commands;\n            }\n            return {\n                ...commands,\n                ...addCommands()\n            };\n        }, {});\n    }\n    get plugins() {\n        const { editor } = this;\n        // With ProseMirror, first plugins within an array are executed first.\n        // In Tiptap, we provide the ability to override plugins,\n        // so it feels more natural to run plugins at the end of an array first.\n        // That’s why we have to reverse the `extensions` array and sort again\n        // based on the `priority` option.\n        const extensions = ExtensionManager.sort([\n            ...this.extensions\n        ].reverse());\n        const inputRules = [];\n        const pasteRules = [];\n        const allPlugins = extensions.map((extension)=>{\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor,\n                type: getSchemaTypeByName(extension.name, this.schema)\n            };\n            const plugins = [];\n            const addKeyboardShortcuts = getExtensionField(extension, \"addKeyboardShortcuts\", context);\n            let defaultBindings = {};\n            // bind exit handling\n            if (extension.type === \"mark\" && extension.config.exitable) {\n                defaultBindings.ArrowRight = ()=>Mark.handleExit({\n                        editor,\n                        mark: extension\n                    });\n            }\n            if (addKeyboardShortcuts) {\n                const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method])=>{\n                    return [\n                        shortcut,\n                        ()=>method({\n                                editor\n                            })\n                    ];\n                }));\n                defaultBindings = {\n                    ...defaultBindings,\n                    ...bindings\n                };\n            }\n            const keyMapPlugin = (0,_tiptap_pm_keymap__WEBPACK_IMPORTED_MODULE_2__.keymap)(defaultBindings);\n            plugins.push(keyMapPlugin);\n            const addInputRules = getExtensionField(extension, \"addInputRules\", context);\n            if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n                inputRules.push(...addInputRules());\n            }\n            const addPasteRules = getExtensionField(extension, \"addPasteRules\", context);\n            if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n                pasteRules.push(...addPasteRules());\n            }\n            const addProseMirrorPlugins = getExtensionField(extension, \"addProseMirrorPlugins\", context);\n            if (addProseMirrorPlugins) {\n                const proseMirrorPlugins = addProseMirrorPlugins();\n                plugins.push(...proseMirrorPlugins);\n            }\n            return plugins;\n        }).flat();\n        return [\n            inputRulesPlugin({\n                editor,\n                rules: inputRules\n            }),\n            ...pasteRulesPlugin({\n                editor,\n                rules: pasteRules\n            }),\n            ...allPlugins\n        ];\n    }\n    get attributes() {\n        return getAttributesFromExtensions(this.extensions);\n    }\n    get nodeViews() {\n        const { editor } = this;\n        const { nodeExtensions } = splitExtensions(this.extensions);\n        return Object.fromEntries(nodeExtensions.filter((extension)=>!!getExtensionField(extension, \"addNodeView\")).map((extension)=>{\n            const extensionAttributes = this.attributes.filter((attribute)=>attribute.type === extension.name);\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor,\n                type: getNodeType(extension.name, this.schema)\n            };\n            const addNodeView = getExtensionField(extension, \"addNodeView\", context);\n            if (!addNodeView) {\n                return [];\n            }\n            const nodeview = (node, view, getPos, decorations)=>{\n                const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n                return addNodeView()({\n                    editor,\n                    node,\n                    getPos,\n                    decorations,\n                    HTMLAttributes,\n                    extension\n                });\n            };\n            return [\n                extension.name,\n                nodeview\n            ];\n        }));\n    }\n}\n// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\nfunction getType(value) {\n    return Object.prototype.toString.call(value).slice(8, -1);\n}\nfunction isPlainObject(value) {\n    if (getType(value) !== \"Object\") {\n        return false;\n    }\n    return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\nfunction mergeDeep(target, source) {\n    const output = {\n        ...target\n    };\n    if (isPlainObject(target) && isPlainObject(source)) {\n        Object.keys(source).forEach((key)=>{\n            if (isPlainObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, {\n                        [key]: source[key]\n                    });\n                } else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            } else {\n                Object.assign(output, {\n                    [key]: source[key]\n                });\n            }\n        });\n    }\n    return output;\n}\nclass Extension {\n    constructor(config = {}){\n        this.type = \"extension\";\n        this.name = \"extension\";\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {}\n        };\n        this.config = {\n            ...this.config,\n            ...config\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, \"addOptions\", {\n                name: this.name\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, \"addStorage\", {\n            name: this.name,\n            options: this.options\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Extension(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend();\n        extension.options = mergeDeep(this.options, options);\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Extension({\n            ...this.config,\n            ...extendedConfig\n        });\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, \"addOptions\", {\n            name: extension.name\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n}\nfunction getTextBetween(startNode, range, options) {\n    const { from, to } = range;\n    const { blockSeparator = \"\\n\\n\", textSerializers = {} } = options || {};\n    let text = \"\";\n    let separated = true;\n    startNode.nodesBetween(from, to, (node, pos, parent, index)=>{\n        var _a;\n        const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n        if (textSerializer) {\n            if (node.isBlock && !separated) {\n                text += blockSeparator;\n                separated = true;\n            }\n            if (parent) {\n                text += textSerializer({\n                    node,\n                    pos,\n                    parent,\n                    index,\n                    range\n                });\n            }\n        } else if (node.isText) {\n            text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\n            separated = false;\n        } else if (node.isBlock && !separated) {\n            text += blockSeparator;\n            separated = true;\n        }\n    });\n    return text;\n}\nfunction getTextSerializersFromSchema(schema) {\n    return Object.fromEntries(Object.entries(schema.nodes).filter(([, node])=>node.spec.toText).map(([name, node])=>[\n            name,\n            node.spec.toText\n        ]));\n}\nconst ClipboardTextSerializer = Extension.create({\n    name: \"clipboardTextSerializer\",\n    addProseMirrorPlugins () {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"clipboardTextSerializer\"),\n                props: {\n                    clipboardTextSerializer: ()=>{\n                        const { editor } = this;\n                        const { state, schema } = editor;\n                        const { doc, selection } = state;\n                        const { ranges } = selection;\n                        const from = Math.min(...ranges.map((range)=>range.$from.pos));\n                        const to = Math.max(...ranges.map((range)=>range.$to.pos));\n                        const textSerializers = getTextSerializersFromSchema(schema);\n                        const range = {\n                            from,\n                            to\n                        };\n                        return getTextBetween(doc, range, {\n                            textSerializers\n                        });\n                    }\n                }\n            })\n        ];\n    }\n});\nconst blur = ()=>({ editor, view })=>{\n        requestAnimationFrame(()=>{\n            var _a;\n            if (!editor.isDestroyed) {\n                view.dom.blur();\n                // Browsers should remove the caret on blur but safari does not.\n                // See: https://github.com/ueberdosis/tiptap/issues/2405\n                (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n            }\n        });\n        return true;\n    };\nconst clearContent = (emitUpdate = false)=>({ commands })=>{\n        return commands.setContent(\"\", emitUpdate);\n    };\nconst clearNodes = ()=>({ state, tr, dispatch })=>{\n        const { selection } = tr;\n        const { ranges } = selection;\n        if (!dispatch) {\n            return true;\n        }\n        ranges.forEach(({ $from, $to })=>{\n            state.doc.nodesBetween($from.pos, $to.pos, (node, pos)=>{\n                if (node.type.isText) {\n                    return;\n                }\n                const { doc, mapping } = tr;\n                const $mappedFrom = doc.resolve(mapping.map(pos));\n                const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n                const nodeRange = $mappedFrom.blockRange($mappedTo);\n                if (!nodeRange) {\n                    return;\n                }\n                const targetLiftDepth = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.liftTarget)(nodeRange);\n                if (node.type.isTextblock) {\n                    const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());\n                    tr.setNodeMarkup(nodeRange.start, defaultType);\n                }\n                if (targetLiftDepth || targetLiftDepth === 0) {\n                    tr.lift(nodeRange, targetLiftDepth);\n                }\n            });\n        });\n        return true;\n    };\nconst command = (fn)=>(props)=>{\n        return fn(props);\n    };\nconst createParagraphNear = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.createParagraphNear)(state, dispatch);\n    };\nconst cut = (originRange, targetPos)=>({ editor, tr })=>{\n        const { state } = editor;\n        const contentSlice = state.doc.slice(originRange.from, originRange.to);\n        tr.deleteRange(originRange.from, originRange.to);\n        const newPos = tr.mapping.map(targetPos);\n        tr.insert(newPos, contentSlice.content);\n        tr.setSelection(new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection(tr.doc.resolve(newPos - 1)));\n        return true;\n    };\nconst deleteCurrentNode = ()=>({ tr, dispatch })=>{\n        const { selection } = tr;\n        const currentNode = selection.$anchor.node();\n        // if there is content inside the current node, break out of this command\n        if (currentNode.content.size > 0) {\n            return false;\n        }\n        const $pos = tr.selection.$anchor;\n        for(let depth = $pos.depth; depth > 0; depth -= 1){\n            const node = $pos.node(depth);\n            if (node.type === currentNode.type) {\n                if (dispatch) {\n                    const from = $pos.before(depth);\n                    const to = $pos.after(depth);\n                    tr.delete(from, to).scrollIntoView();\n                }\n                return true;\n            }\n        }\n        return false;\n    };\nconst deleteNode = (typeOrName)=>({ tr, state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        const $pos = tr.selection.$anchor;\n        for(let depth = $pos.depth; depth > 0; depth -= 1){\n            const node = $pos.node(depth);\n            if (node.type === type) {\n                if (dispatch) {\n                    const from = $pos.before(depth);\n                    const to = $pos.after(depth);\n                    tr.delete(from, to).scrollIntoView();\n                }\n                return true;\n            }\n        }\n        return false;\n    };\nconst deleteRange = (range)=>({ tr, dispatch })=>{\n        const { from, to } = range;\n        if (dispatch) {\n            tr.delete(from, to);\n        }\n        return true;\n    };\nconst deleteSelection = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.deleteSelection)(state, dispatch);\n    };\nconst enter = ()=>({ commands })=>{\n        return commands.keyboardShortcut(\"Enter\");\n    };\nconst exitCode = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.exitCode)(state, dispatch);\n    };\n/**\r\n * Check if object1 includes object2\r\n * @param object1 Object\r\n * @param object2 Object\r\n */ function objectIncludes(object1, object2, options = {\n    strict: true\n}) {\n    const keys = Object.keys(object2);\n    if (!keys.length) {\n        return true;\n    }\n    return keys.every((key)=>{\n        if (options.strict) {\n            return object2[key] === object1[key];\n        }\n        if (isRegExp(object2[key])) {\n            return object2[key].test(object1[key]);\n        }\n        return object2[key] === object1[key];\n    });\n}\nfunction findMarkInSet(marks, type, attributes = {}) {\n    return marks.find((item)=>{\n        return item.type === type && objectIncludes(item.attrs, attributes);\n    });\n}\nfunction isMarkInSet(marks, type, attributes = {}) {\n    return !!findMarkInSet(marks, type, attributes);\n}\nfunction getMarkRange($pos, type, attributes = {}) {\n    if (!$pos || !type) {\n        return;\n    }\n    let start = $pos.parent.childAfter($pos.parentOffset);\n    if ($pos.parentOffset === start.offset && start.offset !== 0) {\n        start = $pos.parent.childBefore($pos.parentOffset);\n    }\n    if (!start.node) {\n        return;\n    }\n    const mark = findMarkInSet([\n        ...start.node.marks\n    ], type, attributes);\n    if (!mark) {\n        return;\n    }\n    let startIndex = start.index;\n    let startPos = $pos.start() + start.offset;\n    let endIndex = startIndex + 1;\n    let endPos = startPos + start.node.nodeSize;\n    findMarkInSet([\n        ...start.node.marks\n    ], type, attributes);\n    while(startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)){\n        startIndex -= 1;\n        startPos -= $pos.parent.child(startIndex).nodeSize;\n    }\n    while(endIndex < $pos.parent.childCount && isMarkInSet([\n        ...$pos.parent.child(endIndex).marks\n    ], type, attributes)){\n        endPos += $pos.parent.child(endIndex).nodeSize;\n        endIndex += 1;\n    }\n    return {\n        from: startPos,\n        to: endPos\n    };\n}\nfunction getMarkType(nameOrType, schema) {\n    if (typeof nameOrType === \"string\") {\n        if (!schema.marks[nameOrType]) {\n            throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n        }\n        return schema.marks[nameOrType];\n    }\n    return nameOrType;\n}\nconst extendMarkRange = (typeOrName, attributes = {})=>({ tr, state, dispatch })=>{\n        const type = getMarkType(typeOrName, state.schema);\n        const { doc, selection } = tr;\n        const { $from, from, to } = selection;\n        if (dispatch) {\n            const range = getMarkRange($from, type, attributes);\n            if (range && range.from <= from && range.to >= to) {\n                const newSelection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, range.from, range.to);\n                tr.setSelection(newSelection);\n            }\n        }\n        return true;\n    };\nconst first = (commands)=>(props)=>{\n        const items = typeof commands === \"function\" ? commands(props) : commands;\n        for(let i = 0; i < items.length; i += 1){\n            if (items[i](props)) {\n                return true;\n            }\n        }\n        return false;\n    };\nfunction isTextSelection(value) {\n    return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection;\n}\nfunction minMax(value = 0, min = 0, max = 0) {\n    return Math.min(Math.max(value, min), max);\n}\nfunction resolveFocusPosition(doc, position = null) {\n    if (!position) {\n        return null;\n    }\n    const selectionAtStart = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc);\n    const selectionAtEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(doc);\n    if (position === \"start\" || position === true) {\n        return selectionAtStart;\n    }\n    if (position === \"end\") {\n        return selectionAtEnd;\n    }\n    const minPos = selectionAtStart.from;\n    const maxPos = selectionAtEnd.to;\n    if (position === \"all\") {\n        return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\n    }\n    return _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\n}\nfunction isiOS() {\n    return [\n        \"iPad Simulator\",\n        \"iPhone Simulator\",\n        \"iPod Simulator\",\n        \"iPad\",\n        \"iPhone\",\n        \"iPod\"\n    ].includes(navigator.platform) || navigator.userAgent.includes(\"Mac\") && \"ontouchend\" in document;\n}\nconst focus = (position = null, options = {})=>({ editor, view, tr, dispatch })=>{\n        options = {\n            scrollIntoView: true,\n            ...options\n        };\n        const delayedFocus = ()=>{\n            // focus within `requestAnimationFrame` breaks focus on iOS\n            // so we have to call this\n            if (isiOS()) {\n                view.dom.focus();\n            }\n            // For React we have to focus asynchronously. Otherwise wild things happen.\n            // see: https://github.com/ueberdosis/tiptap/issues/1520\n            requestAnimationFrame(()=>{\n                if (!editor.isDestroyed) {\n                    view.focus();\n                    if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n                        editor.commands.scrollIntoView();\n                    }\n                }\n            });\n        };\n        if (view.hasFocus() && position === null || position === false) {\n            return true;\n        }\n        // we don’t try to resolve a NodeSelection or CellSelection\n        if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n            delayedFocus();\n            return true;\n        }\n        // pass through tr.doc instead of editor.state.doc\n        // since transactions could change the editors state before this command has been run\n        const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\n        const isSameSelection = editor.state.selection.eq(selection);\n        if (dispatch) {\n            if (!isSameSelection) {\n                tr.setSelection(selection);\n            }\n            // `tr.setSelection` resets the stored marks\n            // so we’ll restore them if the selection is the same as before\n            if (isSameSelection && tr.storedMarks) {\n                tr.setStoredMarks(tr.storedMarks);\n            }\n            delayedFocus();\n        }\n        return true;\n    };\nconst forEach = (items, fn)=>(props)=>{\n        return items.every((item, index)=>fn(item, {\n                ...props,\n                index\n            }));\n    };\nconst insertContent = (value, options)=>({ tr, commands })=>{\n        return commands.insertContentAt({\n            from: tr.selection.from,\n            to: tr.selection.to\n        }, value, options);\n    };\nconst removeWhitespaces = (node)=>{\n    const children = node.childNodes;\n    for(let i = children.length - 1; i >= 0; i -= 1){\n        const child = children[i];\n        if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\n            node.removeChild(child);\n        } else if (child.nodeType === 1) {\n            removeWhitespaces(child);\n        }\n    }\n    return node;\n};\nfunction elementFromString(value) {\n    // add a wrapper to preserve leading and trailing whitespace\n    const wrappedValue = `<body>${value}</body>`;\n    const html = new window.DOMParser().parseFromString(wrappedValue, \"text/html\").body;\n    return removeWhitespaces(html);\n}\nfunction createNodeFromContent(content, schema, options) {\n    options = {\n        slice: true,\n        parseOptions: {},\n        ...options\n    };\n    if (typeof content === \"object\" && content !== null) {\n        try {\n            if (Array.isArray(content) && content.length > 0) {\n                return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.fromArray(content.map((item)=>schema.nodeFromJSON(item)));\n            }\n            return schema.nodeFromJSON(content);\n        } catch (error) {\n            console.warn(\"[tiptap warn]: Invalid content.\", \"Passed value:\", content, \"Error:\", error);\n            return createNodeFromContent(\"\", schema, options);\n        }\n    }\n    if (typeof content === \"string\") {\n        const parser = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema);\n        return options.slice ? parser.parseSlice(elementFromString(content), options.parseOptions).content : parser.parse(elementFromString(content), options.parseOptions);\n    }\n    return createNodeFromContent(\"\", schema, options);\n}\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n    const last = tr.steps.length - 1;\n    if (last < startLen) {\n        return;\n    }\n    const step = tr.steps[last];\n    if (!(step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceStep || step instanceof _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.ReplaceAroundStep)) {\n        return;\n    }\n    const map = tr.mapping.maps[last];\n    let end = 0;\n    map.forEach((_from, _to, _newFrom, newTo)=>{\n        if (end === 0) {\n            end = newTo;\n        }\n    });\n    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.near(tr.doc.resolve(end), bias));\n}\nconst isFragment = (nodeOrFragment)=>{\n    return nodeOrFragment.toString().startsWith(\"<\");\n};\nconst insertContentAt = (position, value, options)=>({ tr, dispatch, editor })=>{\n        if (dispatch) {\n            options = {\n                parseOptions: {},\n                updateSelection: true,\n                ...options\n            };\n            const content = createNodeFromContent(value, editor.schema, {\n                parseOptions: {\n                    preserveWhitespace: \"full\",\n                    ...options.parseOptions\n                }\n            });\n            // don’t dispatch an empty fragment because this can lead to strange errors\n            if (content.toString() === \"<>\") {\n                return true;\n            }\n            let { from, to } = typeof position === \"number\" ? {\n                from: position,\n                to: position\n            } : {\n                from: position.from,\n                to: position.to\n            };\n            let isOnlyTextContent = true;\n            let isOnlyBlockContent = true;\n            const nodes = isFragment(content) ? content : [\n                content\n            ];\n            nodes.forEach((node)=>{\n                // check if added node is valid\n                node.check();\n                isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\n                isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n            });\n            // check if we can replace the wrapping node by\n            // the newly inserted content\n            // example:\n            // replace an empty paragraph by an inserted image\n            // instead of inserting the image below the paragraph\n            if (from === to && isOnlyBlockContent) {\n                const { parent } = tr.doc.resolve(from);\n                const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n                if (isEmptyTextBlock) {\n                    from -= 1;\n                    to += 1;\n                }\n            }\n            // if there is only plain text we have to use `insertText`\n            // because this will keep the current marks\n            if (isOnlyTextContent) {\n                // if value is string, we can use it directly\n                // otherwise if it is an array, we have to join it\n                if (Array.isArray(value)) {\n                    tr.insertText(value.map((v)=>v.text || \"\").join(\"\"), from, to);\n                } else if (typeof value === \"object\" && !!value && !!value.text) {\n                    tr.insertText(value.text, from, to);\n                } else {\n                    tr.insertText(value, from, to);\n                }\n            } else {\n                tr.replaceWith(from, to, content);\n            }\n            // set cursor at end of inserted content\n            if (options.updateSelection) {\n                selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n            }\n        }\n        return true;\n    };\nconst joinUp = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinUp)(state, dispatch);\n    };\nconst joinDown = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinDown)(state, dispatch);\n    };\nconst joinBackward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinBackward)(state, dispatch);\n    };\nconst joinForward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinForward)(state, dispatch);\n    };\nconst joinItemBackward = ()=>({ tr, state, dispatch })=>{\n        try {\n            const point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, -1);\n            if (point === null || point === undefined) {\n                return false;\n            }\n            tr.join(point, 2);\n            if (dispatch) {\n                dispatch(tr);\n            }\n            return true;\n        } catch  {\n            return false;\n        }\n    };\nconst joinItemForward = ()=>({ state, dispatch, tr })=>{\n        try {\n            const point = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.joinPoint)(state.doc, state.selection.$from.pos, +1);\n            if (point === null || point === undefined) {\n                return false;\n            }\n            tr.join(point, 2);\n            if (dispatch) {\n                dispatch(tr);\n            }\n            return true;\n        } catch (e) {\n            return false;\n        }\n    };\nconst joinTextblockBackward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinTextblockBackward)(state, dispatch);\n    };\nconst joinTextblockForward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.joinTextblockForward)(state, dispatch);\n    };\nfunction isMacOS() {\n    return typeof navigator !== \"undefined\" ? /Mac/.test(navigator.platform) : false;\n}\nfunction normalizeKeyName(name) {\n    const parts = name.split(/-(?!$)/);\n    let result = parts[parts.length - 1];\n    if (result === \"Space\") {\n        result = \" \";\n    }\n    let alt;\n    let ctrl;\n    let shift;\n    let meta;\n    for(let i = 0; i < parts.length - 1; i += 1){\n        const mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod)) {\n            meta = true;\n        } else if (/^a(lt)?$/i.test(mod)) {\n            alt = true;\n        } else if (/^(c|ctrl|control)$/i.test(mod)) {\n            ctrl = true;\n        } else if (/^s(hift)?$/i.test(mod)) {\n            shift = true;\n        } else if (/^mod$/i.test(mod)) {\n            if (isiOS() || isMacOS()) {\n                meta = true;\n            } else {\n                ctrl = true;\n            }\n        } else {\n            throw new Error(`Unrecognized modifier name: ${mod}`);\n        }\n    }\n    if (alt) {\n        result = `Alt-${result}`;\n    }\n    if (ctrl) {\n        result = `Ctrl-${result}`;\n    }\n    if (meta) {\n        result = `Meta-${result}`;\n    }\n    if (shift) {\n        result = `Shift-${result}`;\n    }\n    return result;\n}\nconst keyboardShortcut = (name)=>({ editor, view, tr, dispatch })=>{\n        const keys = normalizeKeyName(name).split(/-(?!$)/);\n        const key = keys.find((item)=>![\n                \"Alt\",\n                \"Ctrl\",\n                \"Meta\",\n                \"Shift\"\n            ].includes(item));\n        const event = new KeyboardEvent(\"keydown\", {\n            key: key === \"Space\" ? \" \" : key,\n            altKey: keys.includes(\"Alt\"),\n            ctrlKey: keys.includes(\"Ctrl\"),\n            metaKey: keys.includes(\"Meta\"),\n            shiftKey: keys.includes(\"Shift\"),\n            bubbles: true,\n            cancelable: true\n        });\n        const capturedTransaction = editor.captureTransaction(()=>{\n            view.someProp(\"handleKeyDown\", (f)=>f(view, event));\n        });\n        capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach((step)=>{\n            const newStep = step.map(tr.mapping);\n            if (newStep && dispatch) {\n                tr.maybeStep(newStep);\n            }\n        });\n        return true;\n    };\nfunction isNodeActive(state, typeOrName, attributes = {}) {\n    const { from, to, empty } = state.selection;\n    const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n    const nodeRanges = [];\n    state.doc.nodesBetween(from, to, (node, pos)=>{\n        if (node.isText) {\n            return;\n        }\n        const relativeFrom = Math.max(from, pos);\n        const relativeTo = Math.min(to, pos + node.nodeSize);\n        nodeRanges.push({\n            node,\n            from: relativeFrom,\n            to: relativeTo\n        });\n    });\n    const selectionRange = to - from;\n    const matchedNodeRanges = nodeRanges.filter((nodeRange)=>{\n        if (!type) {\n            return true;\n        }\n        return type.name === nodeRange.node.type.name;\n    }).filter((nodeRange)=>objectIncludes(nodeRange.node.attrs, attributes, {\n            strict: false\n        }));\n    if (empty) {\n        return !!matchedNodeRanges.length;\n    }\n    const range = matchedNodeRanges.reduce((sum, nodeRange)=>sum + nodeRange.to - nodeRange.from, 0);\n    return range >= selectionRange;\n}\nconst lift = (typeOrName, attributes = {})=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        const isActive = isNodeActive(state, type, attributes);\n        if (!isActive) {\n            return false;\n        }\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.lift)(state, dispatch);\n    };\nconst liftEmptyBlock = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.liftEmptyBlock)(state, dispatch);\n    };\nconst liftListItem = (typeOrName)=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.liftListItem)(type)(state, dispatch);\n    };\nconst newlineInCode = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.newlineInCode)(state, dispatch);\n    };\nfunction getSchemaTypeNameByName(name, schema) {\n    if (schema.nodes[name]) {\n        return \"node\";\n    }\n    if (schema.marks[name]) {\n        return \"mark\";\n    }\n    return null;\n}\n/**\r\n * Remove a property or an array of properties from an object\r\n * @param obj Object\r\n * @param key Key to remove\r\n */ function deleteProps(obj, propOrProps) {\n    const props = typeof propOrProps === \"string\" ? [\n        propOrProps\n    ] : propOrProps;\n    return Object.keys(obj).reduce((newObj, prop)=>{\n        if (!props.includes(prop)) {\n            newObj[prop] = obj[prop];\n        }\n        return newObj;\n    }, {});\n}\nconst resetAttributes = (typeOrName, attributes)=>({ tr, state, dispatch })=>{\n        let nodeType = null;\n        let markType = null;\n        const schemaType = getSchemaTypeNameByName(typeof typeOrName === \"string\" ? typeOrName : typeOrName.name, state.schema);\n        if (!schemaType) {\n            return false;\n        }\n        if (schemaType === \"node\") {\n            nodeType = getNodeType(typeOrName, state.schema);\n        }\n        if (schemaType === \"mark\") {\n            markType = getMarkType(typeOrName, state.schema);\n        }\n        if (dispatch) {\n            tr.selection.ranges.forEach((range)=>{\n                state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos)=>{\n                    if (nodeType && nodeType === node.type) {\n                        tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n                    }\n                    if (markType && node.marks.length) {\n                        node.marks.forEach((mark)=>{\n                            if (markType === mark.type) {\n                                tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        return true;\n    };\nconst scrollIntoView = ()=>({ tr, dispatch })=>{\n        if (dispatch) {\n            tr.scrollIntoView();\n        }\n        return true;\n    };\nconst selectAll = ()=>({ tr, commands })=>{\n        return commands.setTextSelection({\n            from: 0,\n            to: tr.doc.content.size\n        });\n    };\nconst selectNodeBackward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeBackward)(state, dispatch);\n    };\nconst selectNodeForward = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectNodeForward)(state, dispatch);\n    };\nconst selectParentNode = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectParentNode)(state, dispatch);\n    };\n// @ts-ignore\nconst selectTextblockEnd = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockEnd)(state, dispatch);\n    };\n// @ts-ignore\nconst selectTextblockStart = ()=>({ state, dispatch })=>{\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.selectTextblockStart)(state, dispatch);\n    };\nfunction createDocument(content, schema, parseOptions = {}) {\n    return createNodeFromContent(content, schema, {\n        slice: false,\n        parseOptions\n    });\n}\nconst setContent = (content, emitUpdate = false, parseOptions = {})=>({ tr, editor, dispatch })=>{\n        const { doc } = tr;\n        const document1 = createDocument(content, editor.schema, parseOptions);\n        if (dispatch) {\n            tr.replaceWith(0, doc.content.size, document1).setMeta(\"preventUpdate\", !emitUpdate);\n        }\n        return true;\n    };\nfunction getMarkAttributes(state, typeOrName) {\n    const type = getMarkType(typeOrName, state.schema);\n    const { from, to, empty } = state.selection;\n    const marks = [];\n    if (empty) {\n        if (state.storedMarks) {\n            marks.push(...state.storedMarks);\n        }\n        marks.push(...state.selection.$head.marks());\n    } else {\n        state.doc.nodesBetween(from, to, (node)=>{\n            marks.push(...node.marks);\n        });\n    }\n    const mark = marks.find((markItem)=>markItem.type.name === type.name);\n    if (!mark) {\n        return {};\n    }\n    return {\n        ...mark.attrs\n    };\n}\n/**\r\n * Returns a new `Transform` based on all steps of the passed transactions.\r\n */ function combineTransactionSteps(oldDoc, transactions) {\n    const transform = new _tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.Transform(oldDoc);\n    transactions.forEach((transaction)=>{\n        transaction.steps.forEach((step)=>{\n            transform.step(step);\n        });\n    });\n    return transform;\n}\nfunction defaultBlockAt(match) {\n    for(let i = 0; i < match.edgeCount; i += 1){\n        const { type } = match.edge(i);\n        if (type.isTextblock && !type.hasRequiredAttrs()) {\n            return type;\n        }\n    }\n    return null;\n}\nfunction findChildren(node, predicate) {\n    const nodesWithPos = [];\n    node.descendants((child, pos)=>{\n        if (predicate(child)) {\n            nodesWithPos.push({\n                node: child,\n                pos\n            });\n        }\n    });\n    return nodesWithPos;\n}\n/**\r\n * Same as `findChildren` but searches only within a `range`.\r\n */ function findChildrenInRange(node, range, predicate) {\n    const nodesWithPos = [];\n    // if (range.from === range.to) {\n    //   const nodeAt = node.nodeAt(range.from)\n    //   if (nodeAt) {\n    //     nodesWithPos.push({\n    //       node: nodeAt,\n    //       pos: range.from,\n    //     })\n    //   }\n    // }\n    node.nodesBetween(range.from, range.to, (child, pos)=>{\n        if (predicate(child)) {\n            nodesWithPos.push({\n                node: child,\n                pos\n            });\n        }\n    });\n    return nodesWithPos;\n}\nfunction findParentNodeClosestToPos($pos, predicate) {\n    for(let i = $pos.depth; i > 0; i -= 1){\n        const node = $pos.node(i);\n        if (predicate(node)) {\n            return {\n                pos: i > 0 ? $pos.before(i) : 0,\n                start: $pos.start(i),\n                depth: i,\n                node\n            };\n        }\n    }\n}\nfunction findParentNode(predicate) {\n    return (selection)=>findParentNodeClosestToPos(selection.$from, predicate);\n}\nfunction getHTMLFromFragment(fragment, schema) {\n    const documentFragment = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n    const temporaryDocument = document.implementation.createHTMLDocument();\n    const container = temporaryDocument.createElement(\"div\");\n    container.appendChild(documentFragment);\n    return container.innerHTML;\n}\nfunction getSchema(extensions, editor) {\n    const resolvedExtensions = ExtensionManager.resolve(extensions);\n    return getSchemaByResolvedExtensions(resolvedExtensions, editor);\n}\nfunction generateHTML(doc, extensions) {\n    const schema = getSchema(extensions);\n    const contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\n    return getHTMLFromFragment(contentNode.content, schema);\n}\nfunction generateJSON(html, extensions) {\n    const schema = getSchema(extensions);\n    const dom = elementFromString(html);\n    return _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\nfunction getText(node, options) {\n    const range = {\n        from: 0,\n        to: node.content.size\n    };\n    return getTextBetween(node, range, options);\n}\nfunction generateText(doc, extensions, options) {\n    const { blockSeparator = \"\\n\\n\", textSerializers = {} } = options || {};\n    const schema = getSchema(extensions);\n    const contentNode = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Node.fromJSON(schema, doc);\n    return getText(contentNode, {\n        blockSeparator,\n        textSerializers: {\n            ...getTextSerializersFromSchema(schema),\n            ...textSerializers\n        }\n    });\n}\nfunction getNodeAttributes(state, typeOrName) {\n    const type = getNodeType(typeOrName, state.schema);\n    const { from, to } = state.selection;\n    const nodes = [];\n    state.doc.nodesBetween(from, to, (node)=>{\n        nodes.push(node);\n    });\n    const node = nodes.reverse().find((nodeItem)=>nodeItem.type.name === type.name);\n    if (!node) {\n        return {};\n    }\n    return {\n        ...node.attrs\n    };\n}\nfunction getAttributes(state, typeOrName) {\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === \"string\" ? typeOrName : typeOrName.name, state.schema);\n    if (schemaType === \"node\") {\n        return getNodeAttributes(state, typeOrName);\n    }\n    if (schemaType === \"mark\") {\n        return getMarkAttributes(state, typeOrName);\n    }\n    return {};\n}\n/**\r\n * Removes duplicated values within an array.\r\n * Supports numbers, strings and objects.\r\n */ function removeDuplicates(array, by = JSON.stringify) {\n    const seen = {};\n    return array.filter((item)=>{\n        const key = by(item);\n        return Object.prototype.hasOwnProperty.call(seen, key) ? false : seen[key] = true;\n    });\n}\n/**\r\n * Removes duplicated ranges and ranges that are\r\n * fully captured by other ranges.\r\n */ function simplifyChangedRanges(changes) {\n    const uniqueChanges = removeDuplicates(changes);\n    return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter((change, index)=>{\n        const rest = uniqueChanges.filter((_, i)=>i !== index);\n        return !rest.some((otherChange)=>{\n            return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;\n        });\n    });\n}\n/**\r\n * Returns a list of changed ranges\r\n * based on the first and last state of all steps.\r\n */ function getChangedRanges(transform) {\n    const { mapping, steps } = transform;\n    const changes = [];\n    mapping.maps.forEach((stepMap, index)=>{\n        const ranges = [];\n        // This accounts for step changes where no range was actually altered\n        // e.g. when setting a mark, node attribute, etc.\n        // @ts-ignore\n        if (!stepMap.ranges.length) {\n            const { from, to } = steps[index];\n            if (from === undefined || to === undefined) {\n                return;\n            }\n            ranges.push({\n                from,\n                to\n            });\n        } else {\n            stepMap.forEach((from, to)=>{\n                ranges.push({\n                    from,\n                    to\n                });\n            });\n        }\n        ranges.forEach(({ from, to })=>{\n            const newStart = mapping.slice(index).map(from, -1);\n            const newEnd = mapping.slice(index).map(to);\n            const oldStart = mapping.invert().map(newStart, -1);\n            const oldEnd = mapping.invert().map(newEnd);\n            changes.push({\n                oldRange: {\n                    from: oldStart,\n                    to: oldEnd\n                },\n                newRange: {\n                    from: newStart,\n                    to: newEnd\n                }\n            });\n        });\n    });\n    return simplifyChangedRanges(changes);\n}\nfunction getDebugJSON(node, startOffset = 0) {\n    const isTopNode = node.type === node.type.schema.topNodeType;\n    const increment = isTopNode ? 0 : 1;\n    const from = startOffset;\n    const to = from + node.nodeSize;\n    const marks = node.marks.map((mark)=>{\n        const output = {\n            type: mark.type.name\n        };\n        if (Object.keys(mark.attrs).length) {\n            output.attrs = {\n                ...mark.attrs\n            };\n        }\n        return output;\n    });\n    const attrs = {\n        ...node.attrs\n    };\n    const output = {\n        type: node.type.name,\n        from,\n        to\n    };\n    if (Object.keys(attrs).length) {\n        output.attrs = attrs;\n    }\n    if (marks.length) {\n        output.marks = marks;\n    }\n    if (node.content.childCount) {\n        output.content = [];\n        node.forEach((child, offset)=>{\n            var _a;\n            (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n        });\n    }\n    if (node.text) {\n        output.text = node.text;\n    }\n    return output;\n}\nfunction getMarksBetween(from, to, doc) {\n    const marks = [];\n    // get all inclusive marks on empty selection\n    if (from === to) {\n        doc.resolve(from).marks().forEach((mark)=>{\n            const $pos = doc.resolve(from - 1);\n            const range = getMarkRange($pos, mark.type);\n            if (!range) {\n                return;\n            }\n            marks.push({\n                mark,\n                ...range\n            });\n        });\n    } else {\n        doc.nodesBetween(from, to, (node, pos)=>{\n            if (!node || (node === null || node === void 0 ? void 0 : node.nodeSize) === undefined) {\n                return;\n            }\n            marks.push(...node.marks.map((mark)=>({\n                    from: pos,\n                    to: pos + node.nodeSize,\n                    mark\n                })));\n        });\n    }\n    return marks;\n}\n/**\r\n * Finds the first node of a given type or name in the current selection.\r\n * @param state The editor state.\r\n * @param typeOrName The node type or name.\r\n * @param pos The position to start searching from.\r\n * @param maxDepth The maximum depth to search.\r\n * @returns The node and the depth as an array.\r\n */ const getNodeAtPosition = (state, typeOrName, pos, maxDepth = 20)=>{\n    const $pos = state.doc.resolve(pos);\n    let currentDepth = maxDepth;\n    let node = null;\n    while(currentDepth > 0 && node === null){\n        const currentNode = $pos.node(currentDepth);\n        if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {\n            node = currentNode;\n        } else {\n            currentDepth -= 1;\n        }\n    }\n    return [\n        node,\n        currentDepth\n    ];\n};\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n    return Object.fromEntries(Object.entries(attributes).filter(([name])=>{\n        const extensionAttribute = extensionAttributes.find((item)=>{\n            return item.type === typeName && item.name === name;\n        });\n        if (!extensionAttribute) {\n            return false;\n        }\n        return extensionAttribute.attribute.keepOnSplit;\n    }));\n}\nfunction isMarkActive(state, typeOrName, attributes = {}) {\n    const { empty, ranges } = state.selection;\n    const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n    if (empty) {\n        return !!(state.storedMarks || state.selection.$from.marks()).filter((mark)=>{\n            if (!type) {\n                return true;\n            }\n            return type.name === mark.type.name;\n        }).find((mark)=>objectIncludes(mark.attrs, attributes, {\n                strict: false\n            }));\n    }\n    let selectionRange = 0;\n    const markRanges = [];\n    ranges.forEach(({ $from, $to })=>{\n        const from = $from.pos;\n        const to = $to.pos;\n        state.doc.nodesBetween(from, to, (node, pos)=>{\n            if (!node.isText && !node.marks.length) {\n                return;\n            }\n            const relativeFrom = Math.max(from, pos);\n            const relativeTo = Math.min(to, pos + node.nodeSize);\n            const range = relativeTo - relativeFrom;\n            selectionRange += range;\n            markRanges.push(...node.marks.map((mark)=>({\n                    mark,\n                    from: relativeFrom,\n                    to: relativeTo\n                })));\n        });\n    });\n    if (selectionRange === 0) {\n        return false;\n    }\n    // calculate range of matched mark\n    const matchedRange = markRanges.filter((markRange)=>{\n        if (!type) {\n            return true;\n        }\n        return type.name === markRange.mark.type.name;\n    }).filter((markRange)=>objectIncludes(markRange.mark.attrs, attributes, {\n            strict: false\n        })).reduce((sum, markRange)=>sum + markRange.to - markRange.from, 0);\n    // calculate range of marks that excludes the searched mark\n    // for example `code` doesn’t allow any other marks\n    const excludedRange = markRanges.filter((markRange)=>{\n        if (!type) {\n            return true;\n        }\n        return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n    }).reduce((sum, markRange)=>sum + markRange.to - markRange.from, 0);\n    // we only include the result of `excludedRange`\n    // if there is a match at all\n    const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n    return range >= selectionRange;\n}\nfunction isActive(state, name, attributes = {}) {\n    if (!name) {\n        return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n    }\n    const schemaType = getSchemaTypeNameByName(name, state.schema);\n    if (schemaType === \"node\") {\n        return isNodeActive(state, name, attributes);\n    }\n    if (schemaType === \"mark\") {\n        return isMarkActive(state, name, attributes);\n    }\n    return false;\n}\nconst isAtEndOfNode = (state, nodeType)=>{\n    const { $from, $to, $anchor } = state.selection;\n    if (nodeType) {\n        const parentNode = findParentNode((node)=>node.type.name === nodeType)(state.selection);\n        if (!parentNode) {\n            return false;\n        }\n        const $parentPos = state.doc.resolve(parentNode.pos + 1);\n        if ($anchor.pos + 1 === $parentPos.end()) {\n            return true;\n        }\n        return false;\n    }\n    if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n        return false;\n    }\n    return true;\n};\nconst isAtStartOfNode = (state)=>{\n    const { $from, $to } = state.selection;\n    if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n        return false;\n    }\n    return true;\n};\nfunction isList(name, extensions) {\n    const { nodeExtensions } = splitExtensions(extensions);\n    const extension = nodeExtensions.find((item)=>item.name === name);\n    if (!extension) {\n        return false;\n    }\n    const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage\n    };\n    const group = callOrReturn(getExtensionField(extension, \"group\", context));\n    if (typeof group !== \"string\") {\n        return false;\n    }\n    return group.split(\" \").includes(\"list\");\n}\nfunction isNodeEmpty(node) {\n    var _a;\n    const defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();\n    const content = node.toJSON();\n    return JSON.stringify(defaultContent) === JSON.stringify(content);\n}\nfunction isNodeSelection(value) {\n    return value instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection;\n}\nfunction posToDOMRect(view, from, to) {\n    const minPos = 0;\n    const maxPos = view.state.doc.content.size;\n    const resolvedFrom = minMax(from, minPos, maxPos);\n    const resolvedEnd = minMax(to, minPos, maxPos);\n    const start = view.coordsAtPos(resolvedFrom);\n    const end = view.coordsAtPos(resolvedEnd, -1);\n    const top = Math.min(start.top, end.top);\n    const bottom = Math.max(start.bottom, end.bottom);\n    const left = Math.min(start.left, end.left);\n    const right = Math.max(start.right, end.right);\n    const width = right - left;\n    const height = bottom - top;\n    const x = left;\n    const y = top;\n    const data = {\n        top,\n        bottom,\n        left,\n        right,\n        width,\n        height,\n        x,\n        y\n    };\n    return {\n        ...data,\n        toJSON: ()=>data\n    };\n}\nfunction canSetMark(state, tr, newMarkType) {\n    var _a;\n    const { selection } = tr;\n    let cursor = null;\n    if (isTextSelection(selection)) {\n        cursor = selection.$cursor;\n    }\n    if (cursor) {\n        const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\n        // There can be no current marks that exclude the new mark\n        return !!newMarkType.isInSet(currentMarks) || !currentMarks.some((mark)=>mark.type.excludes(newMarkType));\n    }\n    const { ranges } = selection;\n    return ranges.some(({ $from, $to })=>{\n        let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;\n        state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent)=>{\n            // If we already found a mark that we can enable, return false to bypass the remaining search\n            if (someNodeSupportsMark) {\n                return false;\n            }\n            if (node.isInline) {\n                const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\n                const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some((otherMark)=>otherMark.type.excludes(newMarkType));\n                someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\n            }\n            return !someNodeSupportsMark;\n        });\n        return someNodeSupportsMark;\n    });\n}\nconst setMark = (typeOrName, attributes = {})=>({ tr, state, dispatch })=>{\n        const { selection } = tr;\n        const { empty, ranges } = selection;\n        const type = getMarkType(typeOrName, state.schema);\n        if (dispatch) {\n            if (empty) {\n                const oldAttributes = getMarkAttributes(state, type);\n                tr.addStoredMark(type.create({\n                    ...oldAttributes,\n                    ...attributes\n                }));\n            } else {\n                ranges.forEach((range)=>{\n                    const from = range.$from.pos;\n                    const to = range.$to.pos;\n                    state.doc.nodesBetween(from, to, (node, pos)=>{\n                        const trimmedFrom = Math.max(pos, from);\n                        const trimmedTo = Math.min(pos + node.nodeSize, to);\n                        const someHasMark = node.marks.find((mark)=>mark.type === type);\n                        // if there is already a mark of this type\n                        // we know that we have to merge its attributes\n                        // otherwise we add a fresh new mark\n                        if (someHasMark) {\n                            node.marks.forEach((mark)=>{\n                                if (type === mark.type) {\n                                    tr.addMark(trimmedFrom, trimmedTo, type.create({\n                                        ...mark.attrs,\n                                        ...attributes\n                                    }));\n                                }\n                            });\n                        } else {\n                            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n                        }\n                    });\n                });\n            }\n        }\n        return canSetMark(state, tr, type);\n    };\nconst setMeta = (key, value)=>({ tr })=>{\n        tr.setMeta(key, value);\n        return true;\n    };\nconst setNode = (typeOrName, attributes = {})=>({ state, dispatch, chain })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        // TODO: use a fallback like insertContent?\n        if (!type.isTextblock) {\n            console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n            return false;\n        }\n        return chain()// try to convert node to default node if needed\n        .command(({ commands })=>{\n            const canSetBlock = (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, attributes)(state);\n            if (canSetBlock) {\n                return true;\n            }\n            return commands.clearNodes();\n        }).command(({ state: updatedState })=>{\n            return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.setBlockType)(type, attributes)(updatedState, dispatch);\n        }).run();\n    };\nconst setNodeSelection = (position)=>({ tr, dispatch })=>{\n        if (dispatch) {\n            const { doc } = tr;\n            const from = minMax(position, 0, doc.content.size);\n            const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(doc, from);\n            tr.setSelection(selection);\n        }\n        return true;\n    };\nconst setTextSelection = (position)=>({ tr, dispatch })=>{\n        if (dispatch) {\n            const { doc } = tr;\n            const { from, to } = typeof position === \"number\" ? {\n                from: position,\n                to: position\n            } : position;\n            const minPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atStart(doc).from;\n            const maxPos = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.atEnd(doc).to;\n            const resolvedFrom = minMax(from, minPos, maxPos);\n            const resolvedEnd = minMax(to, minPos, maxPos);\n            const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.create(doc, resolvedFrom, resolvedEnd);\n            tr.setSelection(selection);\n        }\n        return true;\n    };\nconst sinkListItem = (typeOrName)=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.sinkListItem)(type)(state, dispatch);\n    };\nfunction ensureMarks(state, splittableMarks) {\n    const marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n    if (marks) {\n        const filteredMarks = marks.filter((mark)=>splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));\n        state.tr.ensureMarks(filteredMarks);\n    }\n}\nconst splitBlock = ({ keepMarks = true } = {})=>({ tr, state, dispatch, editor })=>{\n        const { selection, doc } = tr;\n        const { $from, $to } = selection;\n        const extensionAttributes = editor.extensionManager.attributes;\n        const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n        if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection && selection.node.isBlock) {\n            if (!$from.parentOffset || !(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(doc, $from.pos)) {\n                return false;\n            }\n            if (dispatch) {\n                if (keepMarks) {\n                    ensureMarks(state, editor.extensionManager.splittableMarks);\n                }\n                tr.split($from.pos).scrollIntoView();\n            }\n            return true;\n        }\n        if (!$from.parent.isBlock) {\n            return false;\n        }\n        if (dispatch) {\n            const atEnd = $to.parentOffset === $to.parent.content.size;\n            if (selection instanceof _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection) {\n                tr.deleteSelection();\n            }\n            const deflt = $from.depth === 0 ? undefined : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n            let types = atEnd && deflt ? [\n                {\n                    type: deflt,\n                    attrs: newAttributes\n                }\n            ] : undefined;\n            let can = (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, types);\n            if (!types && !can && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [\n                {\n                    type: deflt\n                }\n            ] : undefined)) {\n                can = true;\n                types = deflt ? [\n                    {\n                        type: deflt,\n                        attrs: newAttributes\n                    }\n                ] : undefined;\n            }\n            if (can) {\n                tr.split(tr.mapping.map($from.pos), 1, types);\n                if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n                    const first = tr.mapping.map($from.before());\n                    const $first = tr.doc.resolve(first);\n                    if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n                        tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n                    }\n                }\n            }\n            if (keepMarks) {\n                ensureMarks(state, editor.extensionManager.splittableMarks);\n            }\n            tr.scrollIntoView();\n        }\n        return true;\n    };\nconst splitListItem = (typeOrName)=>({ tr, state, dispatch, editor })=>{\n        var _a;\n        const type = getNodeType(typeOrName, state.schema);\n        const { $from, $to } = state.selection;\n        // @ts-ignore\n        // eslint-disable-next-line\n        const node = state.selection.node;\n        if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) {\n            return false;\n        }\n        const grandParent = $from.node(-1);\n        if (grandParent.type !== type) {\n            return false;\n        }\n        const extensionAttributes = editor.extensionManager.attributes;\n        if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n            // In an empty block. If this is a nested list, the wrapping\n            // list item should be split. Otherwise, bail out and let next\n            // command handle lifting.\n            if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {\n                return false;\n            }\n            if (dispatch) {\n                let wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.empty;\n                // eslint-disable-next-line\n                const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n                // Build a fragment containing empty versions of the structure\n                // from the outer list item to the parent node of the cursor\n                for(let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1){\n                    wrap = _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from($from.node(d).copy(wrap));\n                }\n                // eslint-disable-next-line\n                const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n                // Add a second list item with an empty default start node\n                const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n                const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;\n                wrap = wrap.append(_tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Fragment.from(type.createAndFill(null, nextType) || undefined));\n                const start = $from.before($from.depth - (depthBefore - 1));\n                tr.replace(start, $from.after(-depthAfter), new _tiptap_pm_model__WEBPACK_IMPORTED_MODULE_3__.Slice(wrap, 4 - depthBefore, 0));\n                let sel = -1;\n                tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos)=>{\n                    if (sel > -1) {\n                        return false;\n                    }\n                    if (n.isTextblock && n.content.size === 0) {\n                        sel = pos + 1;\n                    }\n                });\n                if (sel > -1) {\n                    tr.setSelection(_tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection.near(tr.doc.resolve(sel)));\n                }\n                tr.scrollIntoView();\n            }\n            return true;\n        }\n        const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n        const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);\n        const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n        tr.delete($from.pos, $to.pos);\n        const types = nextType ? [\n            {\n                type,\n                attrs: newTypeAttributes\n            },\n            {\n                type: nextType,\n                attrs: newNextTypeAttributes\n            }\n        ] : [\n            {\n                type,\n                attrs: newTypeAttributes\n            }\n        ];\n        if (!(0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canSplit)(tr.doc, $from.pos, 2)) {\n            return false;\n        }\n        if (dispatch) {\n            const { selection, storedMarks } = state;\n            const { splittableMarks } = editor.extensionManager;\n            const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n            tr.split($from.pos, 2, types).scrollIntoView();\n            if (!marks || !dispatch) {\n                return true;\n            }\n            const filteredMarks = marks.filter((mark)=>splittableMarks.includes(mark.type.name));\n            tr.ensureMarks(filteredMarks);\n        }\n        return true;\n    };\nconst joinListBackwards = (tr, listType)=>{\n    const list = findParentNode((node)=>node.type === listType)(tr.selection);\n    if (!list) {\n        return true;\n    }\n    const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n    if (before === undefined) {\n        return true;\n    }\n    const nodeBefore = tr.doc.nodeAt(before);\n    const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, list.pos);\n    if (!canJoinBackwards) {\n        return true;\n    }\n    tr.join(list.pos);\n    return true;\n};\nconst joinListForwards = (tr, listType)=>{\n    const list = findParentNode((node)=>node.type === listType)(tr.selection);\n    if (!list) {\n        return true;\n    }\n    const after = tr.doc.resolve(list.start).after(list.depth);\n    if (after === undefined) {\n        return true;\n    }\n    const nodeAfter = tr.doc.nodeAt(after);\n    const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, after);\n    if (!canJoinForwards) {\n        return true;\n    }\n    tr.join(after);\n    return true;\n};\nconst toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {})=>({ editor, tr, state, dispatch, chain, commands, can })=>{\n        const { extensions, splittableMarks } = editor.extensionManager;\n        const listType = getNodeType(listTypeOrName, state.schema);\n        const itemType = getNodeType(itemTypeOrName, state.schema);\n        const { selection, storedMarks } = state;\n        const { $from, $to } = selection;\n        const range = $from.blockRange($to);\n        const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n        if (!range) {\n            return false;\n        }\n        const parentList = findParentNode((node)=>isList(node.type.name, extensions))(selection);\n        if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n            // remove list\n            if (parentList.node.type === listType) {\n                return commands.liftListItem(itemType);\n            }\n            // change list type\n            if (isList(parentList.node.type.name, extensions) && listType.validContent(parentList.node.content) && dispatch) {\n                return chain().command(()=>{\n                    tr.setNodeMarkup(parentList.pos, listType);\n                    return true;\n                }).command(()=>joinListBackwards(tr, listType)).command(()=>joinListForwards(tr, listType)).run();\n            }\n        }\n        if (!keepMarks || !marks || !dispatch) {\n            return chain()// try to convert node to default node if needed\n            .command(()=>{\n                const canWrapInList = can().wrapInList(listType, attributes);\n                if (canWrapInList) {\n                    return true;\n                }\n                return commands.clearNodes();\n            }).wrapInList(listType, attributes).command(()=>joinListBackwards(tr, listType)).command(()=>joinListForwards(tr, listType)).run();\n        }\n        return chain()// try to convert node to default node if needed\n        .command(()=>{\n            const canWrapInList = can().wrapInList(listType, attributes);\n            const filteredMarks = marks.filter((mark)=>splittableMarks.includes(mark.type.name));\n            tr.ensureMarks(filteredMarks);\n            if (canWrapInList) {\n                return true;\n            }\n            return commands.clearNodes();\n        }).wrapInList(listType, attributes).command(()=>joinListBackwards(tr, listType)).command(()=>joinListForwards(tr, listType)).run();\n    };\nconst toggleMark = (typeOrName, attributes = {}, options = {})=>({ state, commands })=>{\n        const { extendEmptyMarkRange = false } = options;\n        const type = getMarkType(typeOrName, state.schema);\n        const isActive = isMarkActive(state, type, attributes);\n        if (isActive) {\n            return commands.unsetMark(type, {\n                extendEmptyMarkRange\n            });\n        }\n        return commands.setMark(type, attributes);\n    };\nconst toggleNode = (typeOrName, toggleTypeOrName, attributes = {})=>({ state, commands })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        const toggleType = getNodeType(toggleTypeOrName, state.schema);\n        const isActive = isNodeActive(state, type, attributes);\n        if (isActive) {\n            return commands.setNode(toggleType);\n        }\n        return commands.setNode(type, attributes);\n    };\nconst toggleWrap = (typeOrName, attributes = {})=>({ state, commands })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        const isActive = isNodeActive(state, type, attributes);\n        if (isActive) {\n            return commands.lift(type);\n        }\n        return commands.wrapIn(type, attributes);\n    };\nconst undoInputRule = ()=>({ state, dispatch })=>{\n        const plugins = state.plugins;\n        for(let i = 0; i < plugins.length; i += 1){\n            const plugin = plugins[i];\n            let undoable;\n            // @ts-ignore\n            // eslint-disable-next-line\n            if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n                if (dispatch) {\n                    const tr = state.tr;\n                    const toUndo = undoable.transform;\n                    for(let j = toUndo.steps.length - 1; j >= 0; j -= 1){\n                        tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n                    }\n                    if (undoable.text) {\n                        const marks = tr.doc.resolve(undoable.from).marks();\n                        tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n                    } else {\n                        tr.delete(undoable.from, undoable.to);\n                    }\n                }\n                return true;\n            }\n        }\n        return false;\n    };\nconst unsetAllMarks = ()=>({ tr, dispatch })=>{\n        const { selection } = tr;\n        const { empty, ranges } = selection;\n        if (empty) {\n            return true;\n        }\n        if (dispatch) {\n            ranges.forEach((range)=>{\n                tr.removeMark(range.$from.pos, range.$to.pos);\n            });\n        }\n        return true;\n    };\nconst unsetMark = (typeOrName, options = {})=>({ tr, state, dispatch })=>{\n        var _a;\n        const { extendEmptyMarkRange = false } = options;\n        const { selection } = tr;\n        const type = getMarkType(typeOrName, state.schema);\n        const { $from, empty, ranges } = selection;\n        if (!dispatch) {\n            return true;\n        }\n        if (empty && extendEmptyMarkRange) {\n            let { from, to } = selection;\n            const attrs = (_a = $from.marks().find((mark)=>mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;\n            const range = getMarkRange($from, type, attrs);\n            if (range) {\n                from = range.from;\n                to = range.to;\n            }\n            tr.removeMark(from, to, type);\n        } else {\n            ranges.forEach((range)=>{\n                tr.removeMark(range.$from.pos, range.$to.pos, type);\n            });\n        }\n        tr.removeStoredMark(type);\n        return true;\n    };\nconst updateAttributes = (typeOrName, attributes = {})=>({ tr, state, dispatch })=>{\n        let nodeType = null;\n        let markType = null;\n        const schemaType = getSchemaTypeNameByName(typeof typeOrName === \"string\" ? typeOrName : typeOrName.name, state.schema);\n        if (!schemaType) {\n            return false;\n        }\n        if (schemaType === \"node\") {\n            nodeType = getNodeType(typeOrName, state.schema);\n        }\n        if (schemaType === \"mark\") {\n            markType = getMarkType(typeOrName, state.schema);\n        }\n        if (dispatch) {\n            tr.selection.ranges.forEach((range)=>{\n                const from = range.$from.pos;\n                const to = range.$to.pos;\n                state.doc.nodesBetween(from, to, (node, pos)=>{\n                    if (nodeType && nodeType === node.type) {\n                        tr.setNodeMarkup(pos, undefined, {\n                            ...node.attrs,\n                            ...attributes\n                        });\n                    }\n                    if (markType && node.marks.length) {\n                        node.marks.forEach((mark)=>{\n                            if (markType === mark.type) {\n                                const trimmedFrom = Math.max(pos, from);\n                                const trimmedTo = Math.min(pos + node.nodeSize, to);\n                                tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                                    ...mark.attrs,\n                                    ...attributes\n                                }));\n                            }\n                        });\n                    }\n                });\n            });\n        }\n        return true;\n    };\nconst wrapIn = (typeOrName, attributes = {})=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        return (0,_tiptap_pm_commands__WEBPACK_IMPORTED_MODULE_5__.wrapIn)(type, attributes)(state, dispatch);\n    };\nconst wrapInList = (typeOrName, attributes = {})=>({ state, dispatch })=>{\n        const type = getNodeType(typeOrName, state.schema);\n        return (0,_tiptap_pm_schema_list__WEBPACK_IMPORTED_MODULE_6__.wrapInList)(type, attributes)(state, dispatch);\n    };\nvar commands = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    blur: blur,\n    clearContent: clearContent,\n    clearNodes: clearNodes,\n    command: command,\n    createParagraphNear: createParagraphNear,\n    cut: cut,\n    deleteCurrentNode: deleteCurrentNode,\n    deleteNode: deleteNode,\n    deleteRange: deleteRange,\n    deleteSelection: deleteSelection,\n    enter: enter,\n    exitCode: exitCode,\n    extendMarkRange: extendMarkRange,\n    first: first,\n    focus: focus,\n    forEach: forEach,\n    insertContent: insertContent,\n    insertContentAt: insertContentAt,\n    joinUp: joinUp,\n    joinDown: joinDown,\n    joinBackward: joinBackward,\n    joinForward: joinForward,\n    joinItemBackward: joinItemBackward,\n    joinItemForward: joinItemForward,\n    joinTextblockBackward: joinTextblockBackward,\n    joinTextblockForward: joinTextblockForward,\n    keyboardShortcut: keyboardShortcut,\n    lift: lift,\n    liftEmptyBlock: liftEmptyBlock,\n    liftListItem: liftListItem,\n    newlineInCode: newlineInCode,\n    resetAttributes: resetAttributes,\n    scrollIntoView: scrollIntoView,\n    selectAll: selectAll,\n    selectNodeBackward: selectNodeBackward,\n    selectNodeForward: selectNodeForward,\n    selectParentNode: selectParentNode,\n    selectTextblockEnd: selectTextblockEnd,\n    selectTextblockStart: selectTextblockStart,\n    setContent: setContent,\n    setMark: setMark,\n    setMeta: setMeta,\n    setNode: setNode,\n    setNodeSelection: setNodeSelection,\n    setTextSelection: setTextSelection,\n    sinkListItem: sinkListItem,\n    splitBlock: splitBlock,\n    splitListItem: splitListItem,\n    toggleList: toggleList,\n    toggleMark: toggleMark,\n    toggleNode: toggleNode,\n    toggleWrap: toggleWrap,\n    undoInputRule: undoInputRule,\n    unsetAllMarks: unsetAllMarks,\n    unsetMark: unsetMark,\n    updateAttributes: updateAttributes,\n    wrapIn: wrapIn,\n    wrapInList: wrapInList\n});\nconst Commands = Extension.create({\n    name: \"commands\",\n    addCommands () {\n        return {\n            ...commands\n        };\n    }\n});\nconst Editable = Extension.create({\n    name: \"editable\",\n    addProseMirrorPlugins () {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"editable\"),\n                props: {\n                    editable: ()=>this.editor.options.editable\n                }\n            })\n        ];\n    }\n});\nconst FocusEvents = Extension.create({\n    name: \"focusEvents\",\n    addProseMirrorPlugins () {\n        const { editor } = this;\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"focusEvents\"),\n                props: {\n                    handleDOMEvents: {\n                        focus: (view, event)=>{\n                            editor.isFocused = true;\n                            const transaction = editor.state.tr.setMeta(\"focus\", {\n                                event\n                            }).setMeta(\"addToHistory\", false);\n                            view.dispatch(transaction);\n                            return false;\n                        },\n                        blur: (view, event)=>{\n                            editor.isFocused = false;\n                            const transaction = editor.state.tr.setMeta(\"blur\", {\n                                event\n                            }).setMeta(\"addToHistory\", false);\n                            view.dispatch(transaction);\n                            return false;\n                        }\n                    }\n                }\n            })\n        ];\n    }\n});\nconst Keymap = Extension.create({\n    name: \"keymap\",\n    addKeyboardShortcuts () {\n        const handleBackspace = ()=>this.editor.commands.first(({ commands })=>[\n                    ()=>commands.undoInputRule(),\n                    // maybe convert first text block node to default node\n                    ()=>commands.command(({ tr })=>{\n                            const { selection, doc } = tr;\n                            const { empty, $anchor } = selection;\n                            const { pos, parent } = $anchor;\n                            const $parentPos = $anchor.parent.isTextblock ? tr.doc.resolve(pos - 1) : $anchor;\n                            const parentIsIsolating = $parentPos.parent.type.spec.isolating;\n                            const parentPos = $anchor.pos - $anchor.parentOffset;\n                            const isAtStart = parentIsIsolating && $parentPos.parent.childCount === 1 ? parentPos === $anchor.pos : _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(doc).from === pos;\n                            if (!empty || !isAtStart || !parent.type.isTextblock || parent.textContent.length) {\n                                return false;\n                            }\n                            return commands.clearNodes();\n                        }),\n                    ()=>commands.deleteSelection(),\n                    ()=>commands.joinBackward(),\n                    ()=>commands.selectNodeBackward()\n                ]);\n        const handleDelete = ()=>this.editor.commands.first(({ commands })=>[\n                    ()=>commands.deleteSelection(),\n                    ()=>commands.deleteCurrentNode(),\n                    ()=>commands.joinForward(),\n                    ()=>commands.selectNodeForward()\n                ]);\n        const handleEnter = ()=>this.editor.commands.first(({ commands })=>[\n                    ()=>commands.newlineInCode(),\n                    ()=>commands.createParagraphNear(),\n                    ()=>commands.liftEmptyBlock(),\n                    ()=>commands.splitBlock()\n                ]);\n        const baseKeymap = {\n            Enter: handleEnter,\n            \"Mod-Enter\": ()=>this.editor.commands.exitCode(),\n            Backspace: handleBackspace,\n            \"Mod-Backspace\": handleBackspace,\n            \"Shift-Backspace\": handleBackspace,\n            Delete: handleDelete,\n            \"Mod-Delete\": handleDelete,\n            \"Mod-a\": ()=>this.editor.commands.selectAll()\n        };\n        const pcKeymap = {\n            ...baseKeymap\n        };\n        const macKeymap = {\n            ...baseKeymap,\n            \"Ctrl-h\": handleBackspace,\n            \"Alt-Backspace\": handleBackspace,\n            \"Ctrl-d\": handleDelete,\n            \"Ctrl-Alt-Backspace\": handleDelete,\n            \"Alt-Delete\": handleDelete,\n            \"Alt-d\": handleDelete,\n            \"Ctrl-a\": ()=>this.editor.commands.selectTextblockStart(),\n            \"Ctrl-e\": ()=>this.editor.commands.selectTextblockEnd()\n        };\n        if (isiOS() || isMacOS()) {\n            return macKeymap;\n        }\n        return pcKeymap;\n    },\n    addProseMirrorPlugins () {\n        return [\n            // With this plugin we check if the whole document was selected and deleted.\n            // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n            // to a paragraph if necessary.\n            // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n            // with many other commands.\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"clearDocument\"),\n                appendTransaction: (transactions, oldState, newState)=>{\n                    const docChanges = transactions.some((transaction)=>transaction.docChanged) && !oldState.doc.eq(newState.doc);\n                    if (!docChanges) {\n                        return;\n                    }\n                    const { empty, from, to } = oldState.selection;\n                    const allFrom = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atStart(oldState.doc).from;\n                    const allEnd = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Selection.atEnd(oldState.doc).to;\n                    const allWasSelected = from === allFrom && to === allEnd;\n                    if (empty || !allWasSelected) {\n                        return;\n                    }\n                    const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, \" \", \" \").length === 0;\n                    if (!isEmpty) {\n                        return;\n                    }\n                    const tr = newState.tr;\n                    const state = createChainableState({\n                        state: newState,\n                        transaction: tr\n                    });\n                    const { commands } = new CommandManager({\n                        editor: this.editor,\n                        state\n                    });\n                    commands.clearNodes();\n                    if (!tr.steps.length) {\n                        return;\n                    }\n                    return tr;\n                }\n            })\n        ];\n    }\n});\nconst Tabindex = Extension.create({\n    name: \"tabindex\",\n    addProseMirrorPlugins () {\n        return [\n            new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n                key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(\"tabindex\"),\n                props: {\n                    attributes: this.editor.isEditable ? {\n                        tabindex: \"0\"\n                    } : {}\n                }\n            })\n        ];\n    }\n});\nvar extensions = /*#__PURE__*/ Object.freeze({\n    __proto__: null,\n    ClipboardTextSerializer: ClipboardTextSerializer,\n    Commands: Commands,\n    Editable: Editable,\n    FocusEvents: FocusEvents,\n    Keymap: Keymap,\n    Tabindex: Tabindex\n});\nclass NodePos {\n    constructor(pos, editor, isBlock = false, node = null){\n        this.currentNode = null;\n        this.actualDepth = null;\n        this.isBlock = isBlock;\n        this.resolvedPos = pos;\n        this.editor = editor;\n        this.currentNode = node;\n    }\n    get name() {\n        return this.node.type.name;\n    }\n    get node() {\n        return this.currentNode || this.resolvedPos.node();\n    }\n    get element() {\n        return this.editor.view.domAtPos(this.pos).node;\n    }\n    get depth() {\n        var _a;\n        return (_a = this.actualDepth) !== null && _a !== void 0 ? _a : this.resolvedPos.depth;\n    }\n    get pos() {\n        return this.resolvedPos.pos;\n    }\n    get content() {\n        return this.node.content;\n    }\n    set content(content) {\n        let from = this.from;\n        let to = this.to;\n        if (this.isBlock) {\n            if (this.content.size === 0) {\n                console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);\n                return;\n            }\n            from = this.from + 1;\n            to = this.to - 1;\n        }\n        this.editor.commands.insertContentAt({\n            from,\n            to\n        }, content);\n    }\n    get attributes() {\n        return this.node.attrs;\n    }\n    get textContent() {\n        return this.node.textContent;\n    }\n    get size() {\n        return this.node.nodeSize;\n    }\n    get from() {\n        if (this.isBlock) {\n            return this.pos;\n        }\n        return this.resolvedPos.start(this.resolvedPos.depth);\n    }\n    get range() {\n        return {\n            from: this.from,\n            to: this.to\n        };\n    }\n    get to() {\n        if (this.isBlock) {\n            return this.pos + this.size;\n        }\n        return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);\n    }\n    get parent() {\n        if (this.depth === 0) {\n            return null;\n        }\n        const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1);\n        const $pos = this.resolvedPos.doc.resolve(parentPos);\n        return new NodePos($pos, this.editor);\n    }\n    get before() {\n        let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));\n        if ($pos.depth !== this.depth) {\n            $pos = this.resolvedPos.doc.resolve(this.from - 3);\n        }\n        return new NodePos($pos, this.editor);\n    }\n    get after() {\n        let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));\n        if ($pos.depth !== this.depth) {\n            $pos = this.resolvedPos.doc.resolve(this.to + 3);\n        }\n        return new NodePos($pos, this.editor);\n    }\n    get children() {\n        const children = [];\n        this.node.content.forEach((node, offset)=>{\n            const isBlock = node.isBlock && !node.isTextblock;\n            const targetPos = this.pos + offset + (isBlock ? 0 : 1);\n            const $pos = this.resolvedPos.doc.resolve(targetPos);\n            if (!isBlock && $pos.depth <= this.depth) {\n                return;\n            }\n            const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node : null);\n            if (isBlock) {\n                childNodePos.actualDepth = this.depth + 1;\n            }\n            children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node : null));\n        });\n        return children;\n    }\n    get firstChild() {\n        return this.children[0] || null;\n    }\n    get lastChild() {\n        const children = this.children;\n        return children[children.length - 1] || null;\n    }\n    closest(selector, attributes = {}) {\n        let node = null;\n        let currentNode = this.parent;\n        while(currentNode && !node){\n            if (currentNode.node.type.name === selector) {\n                if (Object.keys(attributes).length > 0) {\n                    const nodeAttributes = currentNode.node.attrs;\n                    const attrKeys = Object.keys(attributes);\n                    for(let index = 0; index < attrKeys.length; index += 1){\n                        const key = attrKeys[index];\n                        if (nodeAttributes[key] !== attributes[key]) {\n                            break;\n                        }\n                    }\n                } else {\n                    node = currentNode;\n                }\n            }\n            currentNode = currentNode.parent;\n        }\n        return node;\n    }\n    querySelector(selector, attributes = {}) {\n        return this.querySelectorAll(selector, attributes, true)[0] || null;\n    }\n    querySelectorAll(selector, attributes = {}, firstItemOnly = false) {\n        let nodes = [];\n        // iterate through children recursively finding all nodes which match the selector with the node name\n        if (this.isBlock || !this.children || this.children.length === 0) {\n            return nodes;\n        }\n        this.children.forEach((childPos)=>{\n            if (childPos.node.type.name === selector) {\n                if (Object.keys(attributes).length > 0) {\n                    const nodeAttributes = childPos.node.attrs;\n                    const attrKeys = Object.keys(attributes);\n                    for(let index = 0; index < attrKeys.length; index += 1){\n                        const key = attrKeys[index];\n                        if (nodeAttributes[key] !== attributes[key]) {\n                            return;\n                        }\n                    }\n                }\n                nodes.push(childPos);\n                if (firstItemOnly) {\n                    return;\n                }\n            }\n            nodes = nodes.concat(childPos.querySelectorAll(selector));\n        });\n        return nodes;\n    }\n    setAttribute(attributes) {\n        const oldSelection = this.editor.state.selection;\n        this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, attributes).setTextSelection(oldSelection.from).run();\n    }\n}\nconst style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 1px !important;\n  height: 1px !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`;\nfunction createStyleTag(style, nonce, suffix) {\n    const tiptapStyleTag = document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : \"\"}]`);\n    if (tiptapStyleTag !== null) {\n        return tiptapStyleTag;\n    }\n    const styleNode = document.createElement(\"style\");\n    if (nonce) {\n        styleNode.setAttribute(\"nonce\", nonce);\n    }\n    styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : \"\"}`, \"\");\n    styleNode.innerHTML = style;\n    document.getElementsByTagName(\"head\")[0].appendChild(styleNode);\n    return styleNode;\n}\nclass Editor extends EventEmitter {\n    constructor(options = {}){\n        super();\n        this.isFocused = false;\n        this.extensionStorage = {};\n        this.options = {\n            element: document.createElement(\"div\"),\n            content: \"\",\n            injectCSS: true,\n            injectNonce: undefined,\n            extensions: [],\n            autofocus: false,\n            editable: true,\n            editorProps: {},\n            parseOptions: {},\n            enableInputRules: true,\n            enablePasteRules: true,\n            enableCoreExtensions: true,\n            onBeforeCreate: ()=>null,\n            onCreate: ()=>null,\n            onUpdate: ()=>null,\n            onSelectionUpdate: ()=>null,\n            onTransaction: ()=>null,\n            onFocus: ()=>null,\n            onBlur: ()=>null,\n            onDestroy: ()=>null\n        };\n        this.isCapturingTransaction = false;\n        this.capturedTransaction = null;\n        this.setOptions(options);\n        this.createExtensionManager();\n        this.createCommandManager();\n        this.createSchema();\n        this.on(\"beforeCreate\", this.options.onBeforeCreate);\n        this.emit(\"beforeCreate\", {\n            editor: this\n        });\n        this.createView();\n        this.injectCSS();\n        this.on(\"create\", this.options.onCreate);\n        this.on(\"update\", this.options.onUpdate);\n        this.on(\"selectionUpdate\", this.options.onSelectionUpdate);\n        this.on(\"transaction\", this.options.onTransaction);\n        this.on(\"focus\", this.options.onFocus);\n        this.on(\"blur\", this.options.onBlur);\n        this.on(\"destroy\", this.options.onDestroy);\n        window.setTimeout(()=>{\n            if (this.isDestroyed) {\n                return;\n            }\n            this.commands.focus(this.options.autofocus);\n            this.emit(\"create\", {\n                editor: this\n            });\n        }, 0);\n    }\n    /**\r\n     * Returns the editor storage.\r\n     */ get storage() {\n        return this.extensionStorage;\n    }\n    /**\r\n     * An object of all registered commands.\r\n     */ get commands() {\n        return this.commandManager.commands;\n    }\n    /**\r\n     * Create a command chain to call multiple commands at once.\r\n     */ chain() {\n        return this.commandManager.chain();\n    }\n    /**\r\n     * Check if a command or a command chain can be executed. Without executing it.\r\n     */ can() {\n        return this.commandManager.can();\n    }\n    /**\r\n     * Inject CSS styles.\r\n     */ injectCSS() {\n        if (this.options.injectCSS && document) {\n            this.css = createStyleTag(style, this.options.injectNonce);\n        }\n    }\n    /**\r\n     * Update editor options.\r\n     *\r\n     * @param options A list of options\r\n     */ setOptions(options = {}) {\n        this.options = {\n            ...this.options,\n            ...options\n        };\n        if (!this.view || !this.state || this.isDestroyed) {\n            return;\n        }\n        if (this.options.editorProps) {\n            this.view.setProps(this.options.editorProps);\n        }\n        this.view.updateState(this.state);\n    }\n    /**\r\n     * Update editable state of the editor.\r\n     */ setEditable(editable, emitUpdate = true) {\n        this.setOptions({\n            editable\n        });\n        if (emitUpdate) {\n            this.emit(\"update\", {\n                editor: this,\n                transaction: this.state.tr\n            });\n        }\n    }\n    /**\r\n     * Returns whether the editor is editable.\r\n     */ get isEditable() {\n        // since plugins are applied after creating the view\n        // `editable` is always `true` for one tick.\n        // that’s why we also have to check for `options.editable`\n        return this.options.editable && this.view && this.view.editable;\n    }\n    /**\r\n     * Returns the editor state.\r\n     */ get state() {\n        return this.view.state;\n    }\n    /**\r\n     * Register a ProseMirror plugin.\r\n     *\r\n     * @param plugin A ProseMirror plugin\r\n     * @param handlePlugins Control how to merge the plugin into the existing plugins.\r\n     */ registerPlugin(plugin, handlePlugins) {\n        const plugins = isFunction(handlePlugins) ? handlePlugins(plugin, [\n            ...this.state.plugins\n        ]) : [\n            ...this.state.plugins,\n            plugin\n        ];\n        const state = this.state.reconfigure({\n            plugins\n        });\n        this.view.updateState(state);\n    }\n    /**\r\n     * Unregister a ProseMirror plugin.\r\n     *\r\n     * @param nameOrPluginKey The plugins name\r\n     */ unregisterPlugin(nameOrPluginKey) {\n        if (this.isDestroyed) {\n            return;\n        }\n        // @ts-ignore\n        const name = typeof nameOrPluginKey === \"string\" ? `${nameOrPluginKey}$` : nameOrPluginKey.key;\n        const state = this.state.reconfigure({\n            // @ts-ignore\n            plugins: this.state.plugins.filter((plugin)=>!plugin.key.startsWith(name))\n        });\n        this.view.updateState(state);\n    }\n    /**\r\n     * Creates an extension manager.\r\n     */ createExtensionManager() {\n        const coreExtensions = this.options.enableCoreExtensions ? Object.values(extensions) : [];\n        const allExtensions = [\n            ...coreExtensions,\n            ...this.options.extensions\n        ].filter((extension)=>{\n            return [\n                \"extension\",\n                \"node\",\n                \"mark\"\n            ].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n        });\n        this.extensionManager = new ExtensionManager(allExtensions, this);\n    }\n    /**\r\n     * Creates an command manager.\r\n     */ createCommandManager() {\n        this.commandManager = new CommandManager({\n            editor: this\n        });\n    }\n    /**\r\n     * Creates a ProseMirror schema.\r\n     */ createSchema() {\n        this.schema = this.extensionManager.schema;\n    }\n    /**\r\n     * Creates a ProseMirror view.\r\n     */ createView() {\n        const doc = createDocument(this.options.content, this.schema, this.options.parseOptions);\n        const selection = resolveFocusPosition(doc, this.options.autofocus);\n        this.view = new _tiptap_pm_view__WEBPACK_IMPORTED_MODULE_1__.EditorView(this.options.element, {\n            ...this.options.editorProps,\n            dispatchTransaction: this.dispatchTransaction.bind(this),\n            state: _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.EditorState.create({\n                doc,\n                selection: selection || undefined\n            })\n        });\n        // `editor.view` is not yet available at this time.\n        // Therefore we will add all plugins and node views directly afterwards.\n        const newState = this.state.reconfigure({\n            plugins: this.extensionManager.plugins\n        });\n        this.view.updateState(newState);\n        this.createNodeViews();\n        this.prependClass();\n        // Let’s store the editor instance in the DOM element.\n        // So we’ll have access to it for tests.\n        const dom = this.view.dom;\n        dom.editor = this;\n    }\n    /**\r\n     * Creates all node views.\r\n     */ createNodeViews() {\n        this.view.setProps({\n            nodeViews: this.extensionManager.nodeViews\n        });\n    }\n    /**\r\n     * Prepend class name to element.\r\n     */ prependClass() {\n        this.view.dom.className = `tiptap ${this.view.dom.className}`;\n    }\n    captureTransaction(fn) {\n        this.isCapturingTransaction = true;\n        fn();\n        this.isCapturingTransaction = false;\n        const tr = this.capturedTransaction;\n        this.capturedTransaction = null;\n        return tr;\n    }\n    /**\r\n     * The callback over which to send transactions (state updates) produced by the view.\r\n     *\r\n     * @param transaction An editor state transaction\r\n     */ dispatchTransaction(transaction) {\n        // if the editor / the view of the editor was destroyed\n        // the transaction should not be dispatched as there is no view anymore.\n        if (this.view.isDestroyed) {\n            return;\n        }\n        if (this.isCapturingTransaction) {\n            if (!this.capturedTransaction) {\n                this.capturedTransaction = transaction;\n                return;\n            }\n            transaction.steps.forEach((step)=>{\n                var _a;\n                return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);\n            });\n            return;\n        }\n        const state = this.state.apply(transaction);\n        const selectionHasChanged = !this.state.selection.eq(state.selection);\n        this.view.updateState(state);\n        this.emit(\"transaction\", {\n            editor: this,\n            transaction\n        });\n        if (selectionHasChanged) {\n            this.emit(\"selectionUpdate\", {\n                editor: this,\n                transaction\n            });\n        }\n        const focus = transaction.getMeta(\"focus\");\n        const blur = transaction.getMeta(\"blur\");\n        if (focus) {\n            this.emit(\"focus\", {\n                editor: this,\n                event: focus.event,\n                transaction\n            });\n        }\n        if (blur) {\n            this.emit(\"blur\", {\n                editor: this,\n                event: blur.event,\n                transaction\n            });\n        }\n        if (!transaction.docChanged || transaction.getMeta(\"preventUpdate\")) {\n            return;\n        }\n        this.emit(\"update\", {\n            editor: this,\n            transaction\n        });\n    }\n    /**\r\n     * Get attributes of the currently selected node or mark.\r\n     */ getAttributes(nameOrType) {\n        return getAttributes(this.state, nameOrType);\n    }\n    isActive(nameOrAttributes, attributesOrUndefined) {\n        const name = typeof nameOrAttributes === \"string\" ? nameOrAttributes : null;\n        const attributes = typeof nameOrAttributes === \"string\" ? attributesOrUndefined : nameOrAttributes;\n        return isActive(this.state, name, attributes);\n    }\n    /**\r\n     * Get the document as JSON.\r\n     */ getJSON() {\n        return this.state.doc.toJSON();\n    }\n    /**\r\n     * Get the document as HTML.\r\n     */ getHTML() {\n        return getHTMLFromFragment(this.state.doc.content, this.schema);\n    }\n    /**\r\n     * Get the document as text.\r\n     */ getText(options) {\n        const { blockSeparator = \"\\n\\n\", textSerializers = {} } = options || {};\n        return getText(this.state.doc, {\n            blockSeparator,\n            textSerializers: {\n                ...getTextSerializersFromSchema(this.schema),\n                ...textSerializers\n            }\n        });\n    }\n    /**\r\n     * Check if there is no content.\r\n     */ get isEmpty() {\n        return isNodeEmpty(this.state.doc);\n    }\n    /**\r\n     * Get the number of characters for the current document.\r\n     *\r\n     * @deprecated\r\n     */ getCharacterCount() {\n        console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n        return this.state.doc.content.size - 2;\n    }\n    /**\r\n     * Destroy the editor.\r\n     */ destroy() {\n        this.emit(\"destroy\");\n        if (this.view) {\n            this.view.destroy();\n        }\n        this.removeAllListeners();\n    }\n    /**\r\n     * Check if the editor is already destroyed.\r\n     */ get isDestroyed() {\n        var _a;\n        // @ts-ignore\n        return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n    }\n    $node(selector, attributes) {\n        var _a;\n        return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelector(selector, attributes)) || null;\n    }\n    $nodes(selector, attributes) {\n        var _a;\n        return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector, attributes)) || null;\n    }\n    $pos(pos) {\n        const $pos = this.state.doc.resolve(pos);\n        return new NodePos($pos, this);\n    }\n    get $doc() {\n        return this.$pos(0);\n    }\n}\n/**\r\n * Build an input rule that adds a mark when the\r\n * matched text is typed into it.\r\n */ function markInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            const attributes = callOrReturn(config.getAttributes, undefined, match);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const { tr } = state;\n            const captureGroup = match[match.length - 1];\n            const fullMatch = match[0];\n            if (captureGroup) {\n                const startSpaces = fullMatch.search(/\\S/);\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\n                const textEnd = textStart + captureGroup.length;\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter((item)=>{\n                    // @ts-ignore\n                    const excluded = item.mark.type.excluded;\n                    return excluded.find((type)=>type === config.type && type !== item.mark.type);\n                }).filter((item)=>item.to > textStart);\n                if (excludedMarks.length) {\n                    return null;\n                }\n                if (textEnd < range.to) {\n                    tr.delete(textEnd, range.to);\n                }\n                if (textStart > range.from) {\n                    tr.delete(range.from + startSpaces, textStart);\n                }\n                const markEnd = range.from + startSpaces + captureGroup.length;\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n                tr.removeStoredMark(config.type);\n            }\n        }\n    });\n}\n/**\r\n * Build an input rule that adds a node when the\r\n * matched text is typed into it.\r\n */ function nodeInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            const { tr } = state;\n            const start = range.from;\n            let end = range.to;\n            const newNode = config.type.create(attributes);\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                let matchStart = start + offset;\n                if (matchStart > end) {\n                    matchStart = end;\n                } else {\n                    end = matchStart + match[1].length;\n                }\n                // insert last typed character\n                const lastChar = match[0][match[0].length - 1];\n                tr.insertText(lastChar, start + match[0].length - 1);\n                // insert node from input rule\n                tr.replaceWith(matchStart, end, newNode);\n            } else if (match[0]) {\n                tr.insert(start - 1, config.type.create(attributes)).delete(tr.mapping.map(start), tr.mapping.map(end));\n            }\n            tr.scrollIntoView();\n        }\n    });\n}\n/**\r\n * Build an input rule that changes the type of a textblock when the\r\n * matched text is typed into it. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n */ function textblockTypeInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            const $start = state.doc.resolve(range.from);\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n                return null;\n            }\n            state.tr.delete(range.from, range.to).setBlockType(range.from, range.from, config.type, attributes);\n        }\n    });\n}\n/**\r\n * Build an input rule that replaces text when the\r\n * matched text is typed into it.\r\n */ function textInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            let insert = config.replace;\n            let start = range.from;\n            const end = range.to;\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                insert += match[0].slice(offset + match[1].length);\n                start += offset;\n                const cutOff = start - end;\n                if (cutOff > 0) {\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\n                    start = end;\n                }\n            }\n            state.tr.insertText(insert, start, end);\n        }\n    });\n}\n/**\r\n * Build an input rule for automatically wrapping a textblock when a\r\n * given string is typed. When using a regular expresion you’ll\r\n * probably want the regexp to start with `^`, so that the pattern can\r\n * only occur at the start of a textblock.\r\n *\r\n * `type` is the type of node to wrap in.\r\n *\r\n * By default, if there’s a node with the same type above the newly\r\n * wrapped node, the rule will try to join those\r\n * two nodes. You can pass a join predicate, which takes a regular\r\n * expression match and the node before the wrapped node, and can\r\n * return a boolean to indicate whether a join should happen.\r\n */ function wrappingInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match, chain })=>{\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            const tr = state.tr.delete(range.from, range.to);\n            const $start = tr.doc.resolve(range.from);\n            const blockRange = $start.blockRange();\n            const wrapping = blockRange && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.findWrapping)(blockRange, config.type, attributes);\n            if (!wrapping) {\n                return null;\n            }\n            tr.wrap(blockRange, wrapping);\n            if (config.keepMarks && config.editor) {\n                const { selection, storedMarks } = state;\n                const { splittableMarks } = config.editor.extensionManager;\n                const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n                if (marks) {\n                    const filteredMarks = marks.filter((mark)=>splittableMarks.includes(mark.type.name));\n                    tr.ensureMarks(filteredMarks);\n                }\n            }\n            if (config.keepAttributes) {\n                /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */ const nodeType = config.type.name === \"bulletList\" || config.type.name === \"orderedList\" ? \"listItem\" : \"taskList\";\n                chain().updateAttributes(nodeType, attributes).run();\n            }\n            const before = tr.doc.resolve(range.from - 1).nodeBefore;\n            if (before && before.type === config.type && (0,_tiptap_pm_transform__WEBPACK_IMPORTED_MODULE_4__.canJoin)(tr.doc, range.from - 1) && (!config.joinPredicate || config.joinPredicate(match, before))) {\n                tr.join(range.from - 1);\n            }\n        }\n    });\n}\nclass Mark {\n    constructor(config = {}){\n        this.type = \"mark\";\n        this.name = \"mark\";\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {}\n        };\n        this.config = {\n            ...this.config,\n            ...config\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, \"addOptions\", {\n                name: this.name\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, \"addStorage\", {\n            name: this.name,\n            options: this.options\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Mark(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend();\n        extension.options = mergeDeep(this.options, options);\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Mark({\n            ...this.config,\n            ...extendedConfig\n        });\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, \"addOptions\", {\n            name: extension.name\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n    static handleExit({ editor, mark }) {\n        const { tr } = editor.state;\n        const currentPos = editor.state.selection.$from;\n        const isAtEnd = currentPos.pos === currentPos.end();\n        if (isAtEnd) {\n            const currentMarks = currentPos.marks();\n            const isInMark = !!currentMarks.find((m)=>(m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n            if (!isInMark) {\n                return false;\n            }\n            const removeMark = currentMarks.find((m)=>(m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n            if (removeMark) {\n                tr.removeStoredMark(removeMark);\n            }\n            tr.insertText(\" \", currentPos.pos);\n            editor.view.dispatch(tr);\n            return true;\n        }\n        return false;\n    }\n}\nclass Node {\n    constructor(config = {}){\n        this.type = \"node\";\n        this.name = \"node\";\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {}\n        };\n        this.config = {\n            ...this.config,\n            ...config\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, \"addOptions\", {\n                name: this.name\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, \"addStorage\", {\n            name: this.name,\n            options: this.options\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Node(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend();\n        extension.options = mergeDeep(this.options, options);\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Node({\n            ...this.config,\n            ...extendedConfig\n        });\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, \"addOptions\", {\n            name: extension.name\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, \"addStorage\", {\n            name: extension.name,\n            options: extension.options\n        }));\n        return extension;\n    }\n}\nfunction isAndroid() {\n    return navigator.platform === \"Android\" || /android/i.test(navigator.userAgent);\n}\nclass NodeView {\n    constructor(component, props, options){\n        this.isDragging = false;\n        this.component = component;\n        this.editor = props.editor;\n        this.options = {\n            stopEvent: null,\n            ignoreMutation: null,\n            ...options\n        };\n        this.extension = props.extension;\n        this.node = props.node;\n        this.decorations = props.decorations;\n        this.getPos = props.getPos;\n        this.mount();\n    }\n    mount() {\n        // eslint-disable-next-line\n        return;\n    }\n    get dom() {\n        return this.editor.view.dom;\n    }\n    get contentDOM() {\n        return null;\n    }\n    onDragStart(event) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const { view } = this.editor;\n        const target = event.target;\n        // get the drag handle element\n        // `closest` is not available for text nodes so we may have to use its parent\n        const dragHandle = target.nodeType === 3 ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest(\"[data-drag-handle]\") : target.closest(\"[data-drag-handle]\");\n        if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n            return;\n        }\n        let x = 0;\n        let y = 0;\n        // calculate offset for drag element if we use a different drag handle element\n        if (this.dom !== dragHandle) {\n            const domBox = this.dom.getBoundingClientRect();\n            const handleBox = dragHandle.getBoundingClientRect();\n            // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n            const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\n            const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\n            x = handleBox.x - domBox.x + offsetX;\n            y = handleBox.y - domBox.y + offsetY;\n        }\n        (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);\n        // we need to tell ProseMirror that we want to move the whole node\n        // so we create a NodeSelection\n        const selection = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.create(view.state.doc, this.getPos());\n        const transaction = view.state.tr.setSelection(selection);\n        view.dispatch(transaction);\n    }\n    stopEvent(event) {\n        var _a;\n        if (!this.dom) {\n            return false;\n        }\n        if (typeof this.options.stopEvent === \"function\") {\n            return this.options.stopEvent({\n                event\n            });\n        }\n        const target = event.target;\n        const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\n        // any event from child nodes should be handled by ProseMirror\n        if (!isInElement) {\n            return false;\n        }\n        const isDragEvent = event.type.startsWith(\"drag\");\n        const isDropEvent = event.type === \"drop\";\n        const isInput = [\n            \"INPUT\",\n            \"BUTTON\",\n            \"SELECT\",\n            \"TEXTAREA\"\n        ].includes(target.tagName) || target.isContentEditable;\n        // any input event within node views should be ignored by ProseMirror\n        if (isInput && !isDropEvent && !isDragEvent) {\n            return true;\n        }\n        const { isEditable } = this.editor;\n        const { isDragging } = this;\n        const isDraggable = !!this.node.type.spec.draggable;\n        const isSelectable = _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection.isSelectable(this.node);\n        const isCopyEvent = event.type === \"copy\";\n        const isPasteEvent = event.type === \"paste\";\n        const isCutEvent = event.type === \"cut\";\n        const isClickEvent = event.type === \"mousedown\";\n        // ProseMirror tries to drag selectable nodes\n        // even if `draggable` is set to `false`\n        // this fix prevents that\n        if (!isDraggable && isSelectable && isDragEvent) {\n            event.preventDefault();\n        }\n        if (isDraggable && isDragEvent && !isDragging) {\n            event.preventDefault();\n            return false;\n        }\n        // we have to store that dragging started\n        if (isDraggable && isEditable && !isDragging && isClickEvent) {\n            const dragHandle = target.closest(\"[data-drag-handle]\");\n            const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n            if (isValidDragHandle) {\n                this.isDragging = true;\n                document.addEventListener(\"dragend\", ()=>{\n                    this.isDragging = false;\n                }, {\n                    once: true\n                });\n                document.addEventListener(\"drop\", ()=>{\n                    this.isDragging = false;\n                }, {\n                    once: true\n                });\n                document.addEventListener(\"mouseup\", ()=>{\n                    this.isDragging = false;\n                }, {\n                    once: true\n                });\n            }\n        }\n        // these events are handled by prosemirror\n        if (isDragging || isDropEvent || isCopyEvent || isPasteEvent || isCutEvent || isClickEvent && isSelectable) {\n            return false;\n        }\n        return true;\n    }\n    ignoreMutation(mutation) {\n        if (!this.dom || !this.contentDOM) {\n            return true;\n        }\n        if (typeof this.options.ignoreMutation === \"function\") {\n            return this.options.ignoreMutation({\n                mutation\n            });\n        }\n        // a leaf/atom node is like a black box for ProseMirror\n        // and should be fully handled by the node view\n        if (this.node.isLeaf || this.node.isAtom) {\n            return true;\n        }\n        // ProseMirror should handle any selections\n        if (mutation.type === \"selection\") {\n            return false;\n        }\n        // try to prevent a bug on iOS and Android that will break node views on enter\n        // this is because ProseMirror can’t preventDispatch on enter\n        // this will lead to a re-render of the node view on enter\n        // see: https://github.com/ueberdosis/tiptap/issues/1214\n        // see: https://github.com/ueberdosis/tiptap/issues/2534\n        if (this.dom.contains(mutation.target) && mutation.type === \"childList\" && (isiOS() || isAndroid()) && this.editor.isFocused) {\n            const changedNodes = [\n                ...Array.from(mutation.addedNodes),\n                ...Array.from(mutation.removedNodes)\n            ];\n            // we’ll check if every changed node is contentEditable\n            // to make sure it’s probably mutated by ProseMirror\n            if (changedNodes.every((node)=>node.isContentEditable)) {\n                return false;\n            }\n        }\n        // we will allow mutation contentDOM with attributes\n        // so we can for example adding classes within our node view\n        if (this.contentDOM === mutation.target && mutation.type === \"attributes\") {\n            return true;\n        }\n        // ProseMirror should handle any changes within contentDOM\n        if (this.contentDOM.contains(mutation.target)) {\n            return false;\n        }\n        return true;\n    }\n    updateAttributes(attributes) {\n        this.editor.commands.command(({ tr })=>{\n            const pos = this.getPos();\n            tr.setNodeMarkup(pos, undefined, {\n                ...this.node.attrs,\n                ...attributes\n            });\n            return true;\n        });\n    }\n    deleteNode() {\n        const from = this.getPos();\n        const to = from + this.node.nodeSize;\n        this.editor.commands.deleteRange({\n            from,\n            to\n        });\n    }\n}\n/**\r\n * Build an paste rule that adds a mark when the\r\n * matched text is pasted into it.\r\n */ function markPasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler: ({ state, range, match, pasteEvent })=>{\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const { tr } = state;\n            const captureGroup = match[match.length - 1];\n            const fullMatch = match[0];\n            let markEnd = range.to;\n            if (captureGroup) {\n                const startSpaces = fullMatch.search(/\\S/);\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\n                const textEnd = textStart + captureGroup.length;\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter((item)=>{\n                    // @ts-ignore\n                    const excluded = item.mark.type.excluded;\n                    return excluded.find((type)=>type === config.type && type !== item.mark.type);\n                }).filter((item)=>item.to > textStart);\n                if (excludedMarks.length) {\n                    return null;\n                }\n                if (textEnd < range.to) {\n                    tr.delete(textEnd, range.to);\n                }\n                if (textStart > range.from) {\n                    tr.delete(range.from + startSpaces, textStart);\n                }\n                markEnd = range.from + startSpaces + captureGroup.length;\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n                tr.removeStoredMark(config.type);\n            }\n        }\n    });\n}\n// source: https://stackoverflow.com/a/6969486\nfunction escapeForRegEx(string) {\n    return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\nfunction isString(value) {\n    return typeof value === \"string\";\n}\n/**\r\n * Build an paste rule that adds a node when the\r\n * matched text is pasted into it.\r\n */ function nodePasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler ({ match, chain, range, pasteEvent }) {\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            if (match.input) {\n                chain().deleteRange(range).insertContentAt(range.from, {\n                    type: config.type.name,\n                    attrs: attributes\n                });\n            }\n        }\n    });\n}\n/**\r\n * Build an paste rule that replaces text when the\r\n * matched text is pasted into it.\r\n */ function textPasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler: ({ state, range, match })=>{\n            let insert = config.replace;\n            let start = range.from;\n            const end = range.to;\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                insert += match[0].slice(offset + match[1].length);\n                start += offset;\n                const cutOff = start - end;\n                if (cutOff > 0) {\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\n                    start = end;\n                }\n            }\n            state.tr.insertText(insert, start, end);\n        }\n    });\n}\nclass Tracker {\n    constructor(transaction){\n        this.transaction = transaction;\n        this.currentStep = this.transaction.steps.length;\n    }\n    map(position) {\n        let deleted = false;\n        const mappedPosition = this.transaction.steps.slice(this.currentStep).reduce((newPosition, step)=>{\n            const mapResult = step.getMap().mapResult(newPosition);\n            if (mapResult.deleted) {\n                deleted = true;\n            }\n            return mapResult.pos;\n        }, position);\n        return {\n            position: mappedPosition,\n            deleted\n        };\n    }\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-bold/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Bold: () => (/* binding */ Bold),\n/* harmony export */   \"default\": () => (/* binding */ Bold),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst starInputRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))$/;\nconst starPasteRegex = /(?:^|\\s)((?:\\*\\*)((?:[^*]+))(?:\\*\\*))/g;\nconst underscoreInputRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))$/;\nconst underscorePasteRegex = /(?:^|\\s)((?:__)((?:[^__]+))(?:__))/g;\nconst Bold = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"bold\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"strong\"\n            },\n            {\n                tag: \"b\",\n                getAttrs: (node)=>node.style.fontWeight !== \"normal\" && null\n            },\n            {\n                style: \"font-weight\",\n                getAttrs: (value)=>/^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"strong\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setBold: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleBold: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetBold: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-b\": ()=>this.editor.commands.toggleBold(),\n            \"Mod-B\": ()=>this.editor.commands.toggleBold()\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: starInputRegex,\n                type: this.type\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: underscoreInputRegex,\n                type: this.type\n            })\n        ];\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: starPasteRegex,\n                type: this.type\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: underscorePasteRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tYm9sZC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBbUY7QUFFbkYsTUFBTUksaUJBQWlCO0FBQ3ZCLE1BQU1DLGlCQUFpQjtBQUN2QixNQUFNQyx1QkFBdUI7QUFDN0IsTUFBTUMsdUJBQXVCO0FBQzdCLE1BQU1DLE9BQU9SLDhDQUFJQSxDQUFDUyxNQUFNLENBQUM7SUFDckJDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0g7Z0JBQ0lDLEtBQUs7WUFDVDtZQUNBO2dCQUNJQSxLQUFLO2dCQUNMQyxVQUFVQyxDQUFBQSxPQUFRQSxLQUFLQyxLQUFLLENBQUNDLFVBQVUsS0FBSyxZQUFZO1lBQzVEO1lBQ0E7Z0JBQ0lELE9BQU87Z0JBQ1BGLFVBQVVJLENBQUFBLFFBQVMsNEJBQTRCQyxJQUFJLENBQUNELFVBQVU7WUFDbEU7U0FDSDtJQUNMO0lBQ0FFLFlBQVcsRUFBRVQsY0FBYyxFQUFFO1FBQ3pCLE9BQU87WUFBQztZQUFVWCw2REFBZUEsQ0FBQyxJQUFJLENBQUNxQixPQUFPLENBQUNWLGNBQWMsRUFBRUE7WUFBaUI7U0FBRTtJQUN0RjtJQUNBVztRQUNJLE9BQU87WUFDSEMsU0FBUyxJQUFNLENBQUMsRUFBRUMsUUFBUSxFQUFFO29CQUN4QixPQUFPQSxTQUFTQyxPQUFPLENBQUMsSUFBSSxDQUFDaEIsSUFBSTtnQkFDckM7WUFDQWlCLFlBQVksSUFBTSxDQUFDLEVBQUVGLFFBQVEsRUFBRTtvQkFDM0IsT0FBT0EsU0FBU0csVUFBVSxDQUFDLElBQUksQ0FBQ2xCLElBQUk7Z0JBQ3hDO1lBQ0FtQixXQUFXLElBQU0sQ0FBQyxFQUFFSixRQUFRLEVBQUU7b0JBQzFCLE9BQU9BLFNBQVNLLFNBQVMsQ0FBQyxJQUFJLENBQUNwQixJQUFJO2dCQUN2QztRQUNKO0lBQ0o7SUFDQXFCO1FBQ0ksT0FBTztZQUNILFNBQVMsSUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ1AsUUFBUSxDQUFDRSxVQUFVO1lBQzlDLFNBQVMsSUFBTSxJQUFJLENBQUNLLE1BQU0sQ0FBQ1AsUUFBUSxDQUFDRSxVQUFVO1FBQ2xEO0lBQ0o7SUFDQU07UUFDSSxPQUFPO1lBQ0gvQiwyREFBYUEsQ0FBQztnQkFDVmdDLE1BQU05QjtnQkFDTitCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ25CO1lBQ0FqQywyREFBYUEsQ0FBQztnQkFDVmdDLE1BQU01QjtnQkFDTjZCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ25CO1NBQ0g7SUFDTDtJQUNBQztRQUNJLE9BQU87WUFDSGpDLDJEQUFhQSxDQUFDO2dCQUNWK0IsTUFBTTdCO2dCQUNOOEIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7WUFDQWhDLDJEQUFhQSxDQUFDO2dCQUNWK0IsTUFBTTNCO2dCQUNONEIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7U0FDSDtJQUNMO0FBQ0o7QUFFNkcsQ0FDN0csaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Utam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi1ib2xkL2Rpc3QvaW5kZXguanM/ZGY2NSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYXJrLCBtZXJnZUF0dHJpYnV0ZXMsIG1hcmtJbnB1dFJ1bGUsIG1hcmtQYXN0ZVJ1bGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBzdGFySW5wdXRSZWdleCA9IC8oPzpefFxccykoKD86XFwqXFwqKSgoPzpbXipdKykpKD86XFwqXFwqKSkkLztcclxuY29uc3Qgc3RhclBhc3RlUmVnZXggPSAvKD86XnxcXHMpKCg/OlxcKlxcKikoKD86W14qXSspKSg/OlxcKlxcKikpL2c7XHJcbmNvbnN0IHVuZGVyc2NvcmVJbnB1dFJlZ2V4ID0gLyg/Ol58XFxzKSgoPzpfXykoKD86W15fX10rKSkoPzpfXykpJC87XHJcbmNvbnN0IHVuZGVyc2NvcmVQYXN0ZVJlZ2V4ID0gLyg/Ol58XFxzKSgoPzpfXykoKD86W15fX10rKSkoPzpfXykpL2c7XHJcbmNvbnN0IEJvbGQgPSBNYXJrLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnYm9sZCcsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdzdHJvbmcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdiJyxcclxuICAgICAgICAgICAgICAgIGdldEF0dHJzOiBub2RlID0+IG5vZGUuc3R5bGUuZm9udFdlaWdodCAhPT0gJ25vcm1hbCcgJiYgbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdmb250LXdlaWdodCcsXHJcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogdmFsdWUgPT4gL14oYm9sZChlcik/fFs1LTldXFxkezIsfSkkLy50ZXN0KHZhbHVlKSAmJiBudWxsLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWydzdHJvbmcnLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldEJvbGQ6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZUJvbGQ6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVuc2V0Qm9sZDogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnVuc2V0TWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgYWRkS2V5Ym9hcmRTaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgJ01vZC1iJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMudG9nZ2xlQm9sZCgpLFxyXG4gICAgICAgICAgICAnTW9kLUInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVCb2xkKCksXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRJbnB1dFJ1bGVzKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIG1hcmtJbnB1dFJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogc3RhcklucHV0UmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBtYXJrSW5wdXRSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHVuZGVyc2NvcmVJbnB1dFJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIGFkZFBhc3RlUnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBzdGFyUGFzdGVSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG1hcmtQYXN0ZVJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogdW5kZXJzY29yZVBhc3RlUmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgQm9sZCwgQm9sZCBhcyBkZWZhdWx0LCBzdGFySW5wdXRSZWdleCwgc3RhclBhc3RlUmVnZXgsIHVuZGVyc2NvcmVJbnB1dFJlZ2V4LCB1bmRlcnNjb3JlUGFzdGVSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTWFyayIsIm1lcmdlQXR0cmlidXRlcyIsIm1hcmtJbnB1dFJ1bGUiLCJtYXJrUGFzdGVSdWxlIiwic3RhcklucHV0UmVnZXgiLCJzdGFyUGFzdGVSZWdleCIsInVuZGVyc2NvcmVJbnB1dFJlZ2V4IiwidW5kZXJzY29yZVBhc3RlUmVnZXgiLCJCb2xkIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJIVE1MQXR0cmlidXRlcyIsInBhcnNlSFRNTCIsInRhZyIsImdldEF0dHJzIiwibm9kZSIsInN0eWxlIiwiZm9udFdlaWdodCIsInZhbHVlIiwidGVzdCIsInJlbmRlckhUTUwiLCJvcHRpb25zIiwiYWRkQ29tbWFuZHMiLCJzZXRCb2xkIiwiY29tbWFuZHMiLCJzZXRNYXJrIiwidG9nZ2xlQm9sZCIsInRvZ2dsZU1hcmsiLCJ1bnNldEJvbGQiLCJ1bnNldE1hcmsiLCJhZGRLZXlib2FyZFNob3J0Y3V0cyIsImVkaXRvciIsImFkZElucHV0UnVsZXMiLCJmaW5kIiwidHlwZSIsImFkZFBhc3RlUnVsZXMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-bubble-menu/dist/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   BubbleMenuPlugin: () => (/* binding */ BubbleMenuPlugin),\n/* harmony export */   BubbleMenuView: () => (/* binding */ BubbleMenuView),\n/* harmony export */   \"default\": () => (/* binding */ BubbleMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\n\n\n\nclass BubbleMenuView {\n    constructor({ editor, element, view, tippyOptions = {}, updateDelay = 250, shouldShow }){\n        this.preventHide = false;\n        this.shouldShow = ({ view, state, from, to })=>{\n            const { doc, selection } = state;\n            const { empty } = selection;\n            // Sometime check for `empty` is not enough.\n            // Doubleclick an empty paragraph returns a node size of 2.\n            // So we check also for an empty text size.\n            const isEmptyTextBlock = !doc.textBetween(from, to).length && (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isTextSelection)(state.selection);\n            // When clicking on a element inside the bubble menu the editor \"blur\" event\n            // is called and the bubble menu item is focussed. In this case we should\n            // consider the menu as part of the editor and keep showing the menu\n            const isChildOfMenu = this.element.contains(document.activeElement);\n            const hasEditorFocus = view.hasFocus() || isChildOfMenu;\n            if (!hasEditorFocus || empty || isEmptyTextBlock || !this.editor.isEditable) {\n                return false;\n            }\n            return true;\n        };\n        this.mousedownHandler = ()=>{\n            this.preventHide = true;\n        };\n        this.dragstartHandler = ()=>{\n            this.hide();\n        };\n        this.focusHandler = ()=>{\n            // we use `setTimeout` to make sure `selection` is already updated\n            setTimeout(()=>this.update(this.editor.view));\n        };\n        this.blurHandler = ({ event })=>{\n            var _a;\n            if (this.preventHide) {\n                this.preventHide = false;\n                return;\n            }\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n                return;\n            }\n            this.hide();\n        };\n        this.tippyBlurHandler = (event)=>{\n            this.blurHandler({\n                event\n            });\n        };\n        this.handleDebouncedUpdate = (view, oldState)=>{\n            const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\n            const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\n            if (!selectionChanged && !docChanged) {\n                return;\n            }\n            if (this.updateDebounceTimer) {\n                clearTimeout(this.updateDebounceTimer);\n            }\n            this.updateDebounceTimer = window.setTimeout(()=>{\n                this.updateHandler(view, selectionChanged, docChanged, oldState);\n            }, this.updateDelay);\n        };\n        this.updateHandler = (view, selectionChanged, docChanged, oldState)=>{\n            var _a, _b, _c;\n            const { state, composing } = view;\n            const { selection } = state;\n            const isSame = !selectionChanged && !docChanged;\n            if (composing || isSame) {\n                return;\n            }\n            this.createTooltip();\n            // support for CellSelections\n            const { ranges } = selection;\n            const from = Math.min(...ranges.map((range)=>range.$from.pos));\n            const to = Math.max(...ranges.map((range)=>range.$to.pos));\n            const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n                editor: this.editor,\n                view,\n                state,\n                oldState,\n                from,\n                to\n            });\n            if (!shouldShow) {\n                this.hide();\n                return;\n            }\n            (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n                getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (()=>{\n                    if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.isNodeSelection)(state.selection)) {\n                        let node = view.nodeDOM(from);\n                        const nodeViewWrapper = node.dataset.nodeViewWrapper ? node : node.querySelector(\"[data-node-view-wrapper]\");\n                        if (nodeViewWrapper) {\n                            node = nodeViewWrapper.firstChild;\n                        }\n                        if (node) {\n                            return node.getBoundingClientRect();\n                        }\n                    }\n                    return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.posToDOMRect)(view, from, to);\n                })\n            });\n            this.show();\n        };\n        this.editor = editor;\n        this.element = element;\n        this.view = view;\n        this.updateDelay = updateDelay;\n        if (shouldShow) {\n            this.shouldShow = shouldShow;\n        }\n        this.element.addEventListener(\"mousedown\", this.mousedownHandler, {\n            capture: true\n        });\n        this.view.dom.addEventListener(\"dragstart\", this.dragstartHandler);\n        this.editor.on(\"focus\", this.focusHandler);\n        this.editor.on(\"blur\", this.blurHandler);\n        this.tippyOptions = tippyOptions;\n        // Detaches menu content from its current parent\n        this.element.remove();\n        this.element.style.visibility = \"visible\";\n    }\n    createTooltip() {\n        const { element: editorElement } = this.editor.options;\n        const editorIsAttached = !!editorElement.parentElement;\n        if (this.tippy || !editorIsAttached) {\n            return;\n        }\n        this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(editorElement, {\n            duration: 0,\n            getReferenceClientRect: null,\n            content: this.element,\n            interactive: true,\n            trigger: \"manual\",\n            placement: \"top\",\n            hideOnClick: \"toggle\",\n            ...this.tippyOptions\n        });\n        // maybe we have to hide tippy on its own blur event as well\n        if (this.tippy.popper.firstChild) {\n            this.tippy.popper.firstChild.addEventListener(\"blur\", this.tippyBlurHandler);\n        }\n    }\n    update(view, oldState) {\n        const { state } = view;\n        const hasValidSelection = state.selection.$from.pos !== state.selection.$to.pos;\n        if (this.updateDelay > 0 && hasValidSelection) {\n            this.handleDebouncedUpdate(view, oldState);\n            return;\n        }\n        const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));\n        const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));\n        this.updateHandler(view, selectionChanged, docChanged, oldState);\n    }\n    show() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n    }\n    hide() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n    destroy() {\n        var _a, _b;\n        if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\n            this.tippy.popper.firstChild.removeEventListener(\"blur\", this.tippyBlurHandler);\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.element.removeEventListener(\"mousedown\", this.mousedownHandler, {\n            capture: true\n        });\n        this.view.dom.removeEventListener(\"dragstart\", this.dragstartHandler);\n        this.editor.off(\"focus\", this.focusHandler);\n        this.editor.off(\"blur\", this.blurHandler);\n    }\n}\nconst BubbleMenuPlugin = (options)=>{\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        key: typeof options.pluginKey === \"string\" ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\n        view: (view)=>new BubbleMenuView({\n                view,\n                ...options\n            })\n    });\n};\nconst BubbleMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: \"bubbleMenu\",\n    addOptions () {\n        return {\n            element: null,\n            tippyOptions: {},\n            pluginKey: \"bubbleMenu\",\n            updateDelay: undefined,\n            shouldShow: null\n        };\n    },\n    addProseMirrorPlugins () {\n        if (!this.options.element) {\n            return [];\n        }\n        return [\n            BubbleMenuPlugin({\n                pluginKey: this.options.pluginKey,\n                editor: this.editor,\n                element: this.options.element,\n                tippyOptions: this.options.tippyOptions,\n                updateDelay: this.options.updateDelay,\n                shouldShow: this.options.shouldShow\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-code/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-code/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Code: () => (/* binding */ Code),\n/* harmony export */   \"default\": () => (/* binding */ Code),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst inputRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))$/;\nconst pasteRegex = /(?:^|\\s)((?:`)((?:[^`]+))(?:`))/g;\nconst Code = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"code\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    excludes: \"_\",\n    code: true,\n    exitable: true,\n    parseHTML () {\n        return [\n            {\n                tag: \"code\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"code\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setCode: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleCode: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetCode: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-e\": ()=>this.editor.commands.toggleCode()\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: inputRegex,\n                type: this.type\n            })\n        ];\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: pasteRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tY29kZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQW1GO0FBRW5GLE1BQU1JLGFBQWE7QUFDbkIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxPQUFPTiw4Q0FBSUEsQ0FBQ08sTUFBTSxDQUFDO0lBQ3JCQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxnQkFBZ0IsQ0FBQztRQUNyQjtJQUNKO0lBQ0FDLFVBQVU7SUFDVkMsTUFBTTtJQUNOQyxVQUFVO0lBQ1ZDO1FBQ0ksT0FBTztZQUNIO2dCQUFFQyxLQUFLO1lBQU87U0FDakI7SUFDTDtJQUNBQyxZQUFXLEVBQUVOLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBUVQsNkRBQWVBLENBQUMsSUFBSSxDQUFDZ0IsT0FBTyxDQUFDUCxjQUFjLEVBQUVBO1lBQWlCO1NBQUU7SUFDcEY7SUFDQVE7UUFDSSxPQUFPO1lBQ0hDLFNBQVMsSUFBTSxDQUFDLEVBQUVDLFFBQVEsRUFBRTtvQkFDeEIsT0FBT0EsU0FBU0MsT0FBTyxDQUFDLElBQUksQ0FBQ2IsSUFBSTtnQkFDckM7WUFDQWMsWUFBWSxJQUFNLENBQUMsRUFBRUYsUUFBUSxFQUFFO29CQUMzQixPQUFPQSxTQUFTRyxVQUFVLENBQUMsSUFBSSxDQUFDZixJQUFJO2dCQUN4QztZQUNBZ0IsV0FBVyxJQUFNLENBQUMsRUFBRUosUUFBUSxFQUFFO29CQUMxQixPQUFPQSxTQUFTSyxTQUFTLENBQUMsSUFBSSxDQUFDakIsSUFBSTtnQkFDdkM7UUFDSjtJQUNKO0lBQ0FrQjtRQUNJLE9BQU87WUFDSCxTQUFTLElBQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNQLFFBQVEsQ0FBQ0UsVUFBVTtRQUNsRDtJQUNKO0lBQ0FNO1FBQ0ksT0FBTztZQUNIMUIsMkRBQWFBLENBQUM7Z0JBQ1YyQixNQUFNekI7Z0JBQ04wQixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtTQUNIO0lBQ0w7SUFDQUM7UUFDSSxPQUFPO1lBQ0g1QiwyREFBYUEsQ0FBQztnQkFDVjBCLE1BQU14QjtnQkFDTnlCLE1BQU0sSUFBSSxDQUFDQSxJQUFJO1lBQ25CO1NBQ0g7SUFDTDtBQUNKO0FBRXlELENBQ3pELGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tY29kZS9kaXN0L2luZGV4LmpzPzM2NjAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFyaywgbWVyZ2VBdHRyaWJ1dGVzLCBtYXJrSW5wdXRSdWxlLCBtYXJrUGFzdGVSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgaW5wdXRSZWdleCA9IC8oPzpefFxccykoKD86YCkoKD86W15gXSspKSg/OmApKSQvO1xyXG5jb25zdCBwYXN0ZVJlZ2V4ID0gLyg/Ol58XFxzKSgoPzpgKSgoPzpbXmBdKykpKD86YCkpL2c7XHJcbmNvbnN0IENvZGUgPSBNYXJrLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnY29kZScsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIEhUTUxBdHRyaWJ1dGVzOiB7fSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGV4Y2x1ZGVzOiAnXycsXHJcbiAgICBjb2RlOiB0cnVlLFxyXG4gICAgZXhpdGFibGU6IHRydWUsXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgeyB0YWc6ICdjb2RlJyB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWydjb2RlJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRDb2RlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b2dnbGVDb2RlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudG9nZ2xlTWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB1bnNldENvZGU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2QtZSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUNvZGUoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZElucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIGFkZFBhc3RlUnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBwYXN0ZVJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IENvZGUsIENvZGUgYXMgZGVmYXVsdCwgaW5wdXRSZWdleCwgcGFzdGVSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTWFyayIsIm1lcmdlQXR0cmlidXRlcyIsIm1hcmtJbnB1dFJ1bGUiLCJtYXJrUGFzdGVSdWxlIiwiaW5wdXRSZWdleCIsInBhc3RlUmVnZXgiLCJDb2RlIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJIVE1MQXR0cmlidXRlcyIsImV4Y2x1ZGVzIiwiY29kZSIsImV4aXRhYmxlIiwicGFyc2VIVE1MIiwidGFnIiwicmVuZGVySFRNTCIsIm9wdGlvbnMiLCJhZGRDb21tYW5kcyIsInNldENvZGUiLCJjb21tYW5kcyIsInNldE1hcmsiLCJ0b2dnbGVDb2RlIiwidG9nZ2xlTWFyayIsInVuc2V0Q29kZSIsInVuc2V0TWFyayIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiZWRpdG9yIiwiYWRkSW5wdXRSdWxlcyIsImZpbmQiLCJ0eXBlIiwiYWRkUGFzdGVSdWxlcyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CollaborationCursor: () => (/* binding */ CollaborationCursor),\n/* harmony export */   \"default\": () => (/* binding */ CollaborationCursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! y-prosemirror */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/cursor-plugin.js\");\n\n\nconst awarenessStatesToArray = (states)=>{\n    return Array.from(states.entries()).map(([key, value])=>{\n        return {\n            clientId: key,\n            ...value.user\n        };\n    });\n};\nconst defaultOnUpdate = ()=>null;\nconst CollaborationCursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Extension.create({\n    name: \"collaborationCursor\",\n    addOptions () {\n        return {\n            provider: null,\n            user: {\n                name: null,\n                color: null\n            },\n            render: (user)=>{\n                const cursor = document.createElement(\"span\");\n                cursor.classList.add(\"collaboration-cursor__caret\");\n                cursor.setAttribute(\"style\", `border-color: ${user.color}`);\n                const label = document.createElement(\"div\");\n                label.classList.add(\"collaboration-cursor__label\");\n                label.setAttribute(\"style\", `background-color: ${user.color}`);\n                label.insertBefore(document.createTextNode(user.name), null);\n                cursor.insertBefore(label, null);\n                return cursor;\n            },\n            selectionRender: y_prosemirror__WEBPACK_IMPORTED_MODULE_1__.defaultSelectionBuilder,\n            onUpdate: defaultOnUpdate\n        };\n    },\n    onCreate () {\n        if (this.options.onUpdate !== defaultOnUpdate) {\n            console.warn('[tiptap warn]: DEPRECATED: The \"onUpdate\" option is deprecated. Please use `editor.storage.collaborationCursor.users` instead. Read more: https://tiptap.dev/api/extensions/collaboration-cursor');\n        }\n    },\n    addStorage () {\n        return {\n            users: []\n        };\n    },\n    addCommands () {\n        return {\n            updateUser: (attributes)=>()=>{\n                    this.options.user = attributes;\n                    this.options.provider.awareness.setLocalStateField(\"user\", this.options.user);\n                    return true;\n                },\n            user: (attributes)=>({ editor })=>{\n                    console.warn('[tiptap warn]: DEPRECATED: The \"user\" command is deprecated. Please use \"updateUser\" instead. Read more: https://tiptap.dev/api/extensions/collaboration-cursor');\n                    return editor.commands.updateUser(attributes);\n                }\n        };\n    },\n    addProseMirrorPlugins () {\n        return [\n            (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_1__.yCursorPlugin)((()=>{\n                this.options.provider.awareness.setLocalStateField(\"user\", this.options.user);\n                this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states);\n                this.options.provider.awareness.on(\"update\", ()=>{\n                    this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states);\n                });\n                return this.options.provider.awareness;\n            })(), // @ts-ignore\n            {\n                cursorBuilder: this.options.render,\n                selectionBuilder: this.options.selectionRender\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tY29sbGFib3JhdGlvbi1jdXJzb3IvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXlDO0FBQzhCO0FBRXZFLE1BQU1HLHlCQUF5QixDQUFDQztJQUM1QixPQUFPQyxNQUFNQyxJQUFJLENBQUNGLE9BQU9HLE9BQU8sSUFBSUMsR0FBRyxDQUFDLENBQUMsQ0FBQ0MsS0FBS0MsTUFBTTtRQUNqRCxPQUFPO1lBQ0hDLFVBQVVGO1lBQ1YsR0FBR0MsTUFBTUUsSUFBSTtRQUNqQjtJQUNKO0FBQ0o7QUFDQSxNQUFNQyxrQkFBa0IsSUFBTTtBQUM5QixNQUFNQyxzQkFBc0JkLG1EQUFTQSxDQUFDZSxNQUFNLENBQUM7SUFDekNDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLFVBQVU7WUFDVk4sTUFBTTtnQkFDRkksTUFBTTtnQkFDTkcsT0FBTztZQUNYO1lBQ0FDLFFBQVFSLENBQUFBO2dCQUNKLE1BQU1TLFNBQVNDLFNBQVNDLGFBQWEsQ0FBQztnQkFDdENGLE9BQU9HLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDO2dCQUNyQkosT0FBT0ssWUFBWSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUVkLEtBQUtPLEtBQUssQ0FBQyxDQUFDO2dCQUMxRCxNQUFNUSxRQUFRTCxTQUFTQyxhQUFhLENBQUM7Z0JBQ3JDSSxNQUFNSCxTQUFTLENBQUNDLEdBQUcsQ0FBQztnQkFDcEJFLE1BQU1ELFlBQVksQ0FBQyxTQUFTLENBQUMsa0JBQWtCLEVBQUVkLEtBQUtPLEtBQUssQ0FBQyxDQUFDO2dCQUM3RFEsTUFBTUMsWUFBWSxDQUFDTixTQUFTTyxjQUFjLENBQUNqQixLQUFLSSxJQUFJLEdBQUc7Z0JBQ3ZESyxPQUFPTyxZQUFZLENBQUNELE9BQU87Z0JBQzNCLE9BQU9OO1lBQ1g7WUFDQVMsaUJBQWlCN0Isa0VBQXVCQTtZQUN4QzhCLFVBQVVsQjtRQUNkO0lBQ0o7SUFDQW1CO1FBQ0ksSUFBSSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0YsUUFBUSxLQUFLbEIsaUJBQWlCO1lBQzNDcUIsUUFBUUMsSUFBSSxDQUFDO1FBQ2pCO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0hDLE9BQU8sRUFBRTtRQUNiO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0hDLFlBQVlDLENBQUFBLGFBQWM7b0JBQ3RCLElBQUksQ0FBQ1AsT0FBTyxDQUFDckIsSUFBSSxHQUFHNEI7b0JBQ3BCLElBQUksQ0FBQ1AsT0FBTyxDQUFDZixRQUFRLENBQUN1QixTQUFTLENBQUNDLGtCQUFrQixDQUFDLFFBQVEsSUFBSSxDQUFDVCxPQUFPLENBQUNyQixJQUFJO29CQUM1RSxPQUFPO2dCQUNYO1lBQ0FBLE1BQU00QixDQUFBQSxhQUFjLENBQUMsRUFBRUcsTUFBTSxFQUFFO29CQUMzQlQsUUFBUUMsSUFBSSxDQUFDO29CQUNiLE9BQU9RLE9BQU9DLFFBQVEsQ0FBQ0wsVUFBVSxDQUFDQztnQkFDdEM7UUFDSjtJQUNKO0lBQ0FLO1FBQ0ksT0FBTztZQUNIM0MsNERBQWFBLENBQUMsQ0FBQztnQkFDWCxJQUFJLENBQUMrQixPQUFPLENBQUNmLFFBQVEsQ0FBQ3VCLFNBQVMsQ0FBQ0Msa0JBQWtCLENBQUMsUUFBUSxJQUFJLENBQUNULE9BQU8sQ0FBQ3JCLElBQUk7Z0JBQzVFLElBQUksQ0FBQ2tDLE9BQU8sQ0FBQ1QsS0FBSyxHQUFHbEMsdUJBQXVCLElBQUksQ0FBQzhCLE9BQU8sQ0FBQ2YsUUFBUSxDQUFDdUIsU0FBUyxDQUFDckMsTUFBTTtnQkFDbEYsSUFBSSxDQUFDNkIsT0FBTyxDQUFDZixRQUFRLENBQUN1QixTQUFTLENBQUNNLEVBQUUsQ0FBQyxVQUFVO29CQUN6QyxJQUFJLENBQUNELE9BQU8sQ0FBQ1QsS0FBSyxHQUFHbEMsdUJBQXVCLElBQUksQ0FBQzhCLE9BQU8sQ0FBQ2YsUUFBUSxDQUFDdUIsU0FBUyxDQUFDckMsTUFBTTtnQkFDdEY7Z0JBQ0EsT0FBTyxJQUFJLENBQUM2QixPQUFPLENBQUNmLFFBQVEsQ0FBQ3VCLFNBQVM7WUFDMUMsTUFDQSxhQUFhO1lBQ2I7Z0JBQ0lPLGVBQWUsSUFBSSxDQUFDZixPQUFPLENBQUNiLE1BQU07Z0JBQ2xDNkIsa0JBQWtCLElBQUksQ0FBQ2hCLE9BQU8sQ0FBQ0gsZUFBZTtZQUNsRDtTQUNIO0lBQ0w7QUFDSjtBQUUrRCxDQUMvRCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLWNvbGxhYm9yYXRpb24tY3Vyc29yL2Rpc3QvaW5kZXguanM/MmVjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24gfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgZGVmYXVsdFNlbGVjdGlvbkJ1aWxkZXIsIHlDdXJzb3JQbHVnaW4gfSBmcm9tICd5LXByb3NlbWlycm9yJztcblxuY29uc3QgYXdhcmVuZXNzU3RhdGVzVG9BcnJheSA9IChzdGF0ZXMpID0+IHtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKHN0YXRlcy5lbnRyaWVzKCkpLm1hcCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY2xpZW50SWQ6IGtleSxcclxuICAgICAgICAgICAgLi4udmFsdWUudXNlcixcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IGRlZmF1bHRPblVwZGF0ZSA9ICgpID0+IG51bGw7XHJcbmNvbnN0IENvbGxhYm9yYXRpb25DdXJzb3IgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdjb2xsYWJvcmF0aW9uQ3Vyc29yJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJvdmlkZXI6IG51bGwsXHJcbiAgICAgICAgICAgIHVzZXI6IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBjb2xvcjogbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVuZGVyOiB1c2VyID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnNvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgICAgIGN1cnNvci5jbGFzc0xpc3QuYWRkKCdjb2xsYWJvcmF0aW9uLWN1cnNvcl9fY2FyZXQnKTtcclxuICAgICAgICAgICAgICAgIGN1cnNvci5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgYGJvcmRlci1jb2xvcjogJHt1c2VyLmNvbG9yfWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgIGxhYmVsLmNsYXNzTGlzdC5hZGQoJ2NvbGxhYm9yYXRpb24tY3Vyc29yX19sYWJlbCcpO1xyXG4gICAgICAgICAgICAgICAgbGFiZWwuc2V0QXR0cmlidXRlKCdzdHlsZScsIGBiYWNrZ3JvdW5kLWNvbG9yOiAke3VzZXIuY29sb3J9YCk7XHJcbiAgICAgICAgICAgICAgICBsYWJlbC5pbnNlcnRCZWZvcmUoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodXNlci5uYW1lKSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBjdXJzb3IuaW5zZXJ0QmVmb3JlKGxhYmVsLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJzb3I7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlbGVjdGlvblJlbmRlcjogZGVmYXVsdFNlbGVjdGlvbkJ1aWxkZXIsXHJcbiAgICAgICAgICAgIG9uVXBkYXRlOiBkZWZhdWx0T25VcGRhdGUsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBvbkNyZWF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm9uVXBkYXRlICE9PSBkZWZhdWx0T25VcGRhdGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBERVBSRUNBVEVEOiBUaGUgXCJvblVwZGF0ZVwiIG9wdGlvbiBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGBlZGl0b3Iuc3RvcmFnZS5jb2xsYWJvcmF0aW9uQ3Vyc29yLnVzZXJzYCBpbnN0ZWFkLiBSZWFkIG1vcmU6IGh0dHBzOi8vdGlwdGFwLmRldi9hcGkvZXh0ZW5zaW9ucy9jb2xsYWJvcmF0aW9uLWN1cnNvcicpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBhZGRTdG9yYWdlKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVzZXJzOiBbXSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVVzZXI6IGF0dHJpYnV0ZXMgPT4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnVzZXIgPSBhdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnByb3ZpZGVyLmF3YXJlbmVzcy5zZXRMb2NhbFN0YXRlRmllbGQoJ3VzZXInLCB0aGlzLm9wdGlvbnMudXNlcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXNlcjogYXR0cmlidXRlcyA9PiAoeyBlZGl0b3IgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbdGlwdGFwIHdhcm5dOiBERVBSRUNBVEVEOiBUaGUgXCJ1c2VyXCIgY29tbWFuZCBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIFwidXBkYXRlVXNlclwiIGluc3RlYWQuIFJlYWQgbW9yZTogaHR0cHM6Ly90aXB0YXAuZGV2L2FwaS9leHRlbnNpb25zL2NvbGxhYm9yYXRpb24tY3Vyc29yJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWRpdG9yLmNvbW1hbmRzLnVwZGF0ZVVzZXIoYXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgeUN1cnNvclBsdWdpbigoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zLnByb3ZpZGVyLmF3YXJlbmVzcy5zZXRMb2NhbFN0YXRlRmllbGQoJ3VzZXInLCB0aGlzLm9wdGlvbnMudXNlcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2UudXNlcnMgPSBhd2FyZW5lc3NTdGF0ZXNUb0FycmF5KHRoaXMub3B0aW9ucy5wcm92aWRlci5hd2FyZW5lc3Muc3RhdGVzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wcm92aWRlci5hd2FyZW5lc3Mub24oJ3VwZGF0ZScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2UudXNlcnMgPSBhd2FyZW5lc3NTdGF0ZXNUb0FycmF5KHRoaXMub3B0aW9ucy5wcm92aWRlci5hd2FyZW5lc3Muc3RhdGVzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5wcm92aWRlci5hd2FyZW5lc3M7XHJcbiAgICAgICAgICAgIH0pKCksIFxyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGN1cnNvckJ1aWxkZXI6IHRoaXMub3B0aW9ucy5yZW5kZXIsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25CdWlsZGVyOiB0aGlzLm9wdGlvbnMuc2VsZWN0aW9uUmVuZGVyLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IENvbGxhYm9yYXRpb25DdXJzb3IsIENvbGxhYm9yYXRpb25DdXJzb3IgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiRXh0ZW5zaW9uIiwiZGVmYXVsdFNlbGVjdGlvbkJ1aWxkZXIiLCJ5Q3Vyc29yUGx1Z2luIiwiYXdhcmVuZXNzU3RhdGVzVG9BcnJheSIsInN0YXRlcyIsIkFycmF5IiwiZnJvbSIsImVudHJpZXMiLCJtYXAiLCJrZXkiLCJ2YWx1ZSIsImNsaWVudElkIiwidXNlciIsImRlZmF1bHRPblVwZGF0ZSIsIkNvbGxhYm9yYXRpb25DdXJzb3IiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsInByb3ZpZGVyIiwiY29sb3IiLCJyZW5kZXIiLCJjdXJzb3IiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzZXRBdHRyaWJ1dGUiLCJsYWJlbCIsImluc2VydEJlZm9yZSIsImNyZWF0ZVRleHROb2RlIiwic2VsZWN0aW9uUmVuZGVyIiwib25VcGRhdGUiLCJvbkNyZWF0ZSIsIm9wdGlvbnMiLCJjb25zb2xlIiwid2FybiIsImFkZFN0b3JhZ2UiLCJ1c2VycyIsImFkZENvbW1hbmRzIiwidXBkYXRlVXNlciIsImF0dHJpYnV0ZXMiLCJhd2FyZW5lc3MiLCJzZXRMb2NhbFN0YXRlRmllbGQiLCJlZGl0b3IiLCJjb21tYW5kcyIsImFkZFByb3NlTWlycm9yUGx1Z2lucyIsInN0b3JhZ2UiLCJvbiIsImN1cnNvckJ1aWxkZXIiLCJzZWxlY3Rpb25CdWlsZGVyIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-collaboration/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-collaboration/dist/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Collaboration: () => (/* binding */ Collaboration),\n/* harmony export */   \"default\": () => (/* binding */ Collaboration),\n/* harmony export */   isChangeOrigin: () => (/* binding */ isChangeOrigin)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! y-prosemirror */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/keys.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! y-prosemirror */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/undo-plugin.js\");\n/* harmony import */ var y_prosemirror__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! y-prosemirror */ \"(ssr)/./node_modules/y-prosemirror/src/plugins/sync-plugin.js\");\n\n\nconst Collaboration = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Extension.create({\n    name: \"collaboration\",\n    priority: 1000,\n    addOptions () {\n        return {\n            document: null,\n            field: \"default\",\n            fragment: null\n        };\n    },\n    onCreate () {\n        if (this.editor.extensionManager.extensions.find((extension)=>extension.name === \"history\")) {\n            console.warn('[tiptap warn]: \"@tiptap/extension-collaboration\" comes with its own history support and is not compatible with \"@tiptap/extension-history\".');\n        }\n    },\n    addCommands () {\n        return {\n            undo: ()=>({ tr, state, dispatch })=>{\n                    tr.setMeta(\"preventDispatch\", true);\n                    const undoManager = y_prosemirror__WEBPACK_IMPORTED_MODULE_1__.yUndoPluginKey.getState(state).undoManager;\n                    if (undoManager.undoStack.length === 0) {\n                        return false;\n                    }\n                    if (!dispatch) {\n                        return true;\n                    }\n                    return (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_2__.undo)(state);\n                },\n            redo: ()=>({ tr, state, dispatch })=>{\n                    tr.setMeta(\"preventDispatch\", true);\n                    const undoManager = y_prosemirror__WEBPACK_IMPORTED_MODULE_1__.yUndoPluginKey.getState(state).undoManager;\n                    if (undoManager.redoStack.length === 0) {\n                        return false;\n                    }\n                    if (!dispatch) {\n                        return true;\n                    }\n                    return (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_2__.redo)(state);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-z\": ()=>this.editor.commands.undo(),\n            \"Mod-y\": ()=>this.editor.commands.redo(),\n            \"Shift-Mod-z\": ()=>this.editor.commands.redo()\n        };\n    },\n    addProseMirrorPlugins () {\n        const fragment = this.options.fragment ? this.options.fragment : this.options.document.getXmlFragment(this.options.field);\n        // Quick fix until there is an official implementation (thanks to @hamflx).\n        // See https://github.com/yjs/y-prosemirror/issues/114 and https://github.com/yjs/y-prosemirror/issues/102\n        const yUndoPluginInstance = (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_2__.yUndoPlugin)();\n        const originalUndoPluginView = yUndoPluginInstance.spec.view;\n        yUndoPluginInstance.spec.view = (view)=>{\n            const { undoManager } = y_prosemirror__WEBPACK_IMPORTED_MODULE_1__.yUndoPluginKey.getState(view.state);\n            if (undoManager.restore) {\n                undoManager.restore();\n                // eslint-disable-next-line\n                undoManager.restore = ()=>{};\n            }\n            const viewRet = originalUndoPluginView ? originalUndoPluginView(view) : undefined;\n            return {\n                destroy: ()=>{\n                    const hasUndoManSelf = undoManager.trackedOrigins.has(undoManager);\n                    // eslint-disable-next-line\n                    const observers = undoManager._observers;\n                    undoManager.restore = ()=>{\n                        if (hasUndoManSelf) {\n                            undoManager.trackedOrigins.add(undoManager);\n                        }\n                        undoManager.doc.on(\"afterTransaction\", undoManager.afterTransactionHandler);\n                        // eslint-disable-next-line\n                        undoManager._observers = observers;\n                    };\n                    if (viewRet === null || viewRet === void 0 ? void 0 : viewRet.destroy) {\n                        viewRet.destroy();\n                    }\n                }\n            };\n        };\n        const onFirstRender = this.options.onFirstRender;\n        const ySyncPluginOptions = onFirstRender ? {\n            onFirstRender\n        } : {};\n        const ySyncPluginInstance = (0,y_prosemirror__WEBPACK_IMPORTED_MODULE_3__.ySyncPlugin)(fragment, ySyncPluginOptions);\n        return [\n            ySyncPluginInstance,\n            yUndoPluginInstance\n        ];\n    }\n});\nfunction isChangeOrigin(transaction) {\n    return !!transaction.getMeta(y_prosemirror__WEBPACK_IMPORTED_MODULE_1__.ySyncPluginKey);\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-collaboration/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-dropcursor/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Dropcursor: () => (/* binding */ Dropcursor),\n/* harmony export */   \"default\": () => (/* binding */ Dropcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_dropcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/dropcursor */ \"(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js\");\n\n\nconst Dropcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: \"dropCursor\",\n    addOptions () {\n        return {\n            color: \"currentColor\",\n            width: 1,\n            class: undefined\n        };\n    },\n    addProseMirrorPlugins () {\n        return [\n            (0,_tiptap_pm_dropcursor__WEBPACK_IMPORTED_MODULE_0__.dropCursor)(this.options)\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZHJvcGN1cnNvci9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDVTtBQUVuRCxNQUFNRSxhQUFhRixtREFBU0EsQ0FBQ0csTUFBTSxDQUFDO0lBQ2hDQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxPQUFPO1lBQ1BDLE9BQU87WUFDUEMsT0FBT0M7UUFDWDtJQUNKO0lBQ0FDO1FBQ0ksT0FBTztZQUNIVCxpRUFBVUEsQ0FBQyxJQUFJLENBQUNVLE9BQU87U0FDMUI7SUFDTDtBQUNKO0FBRTZDLENBQzdDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZHJvcGN1cnNvci9kaXN0L2luZGV4LmpzP2Y5YzIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcbmltcG9ydCB7IGRyb3BDdXJzb3IgfSBmcm9tICdAdGlwdGFwL3BtL2Ryb3BjdXJzb3InO1xuXG5jb25zdCBEcm9wY3Vyc29yID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnZHJvcEN1cnNvcicsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAnY3VycmVudENvbG9yJyxcclxuICAgICAgICAgICAgd2lkdGg6IDEsXHJcbiAgICAgICAgICAgIGNsYXNzOiB1bmRlZmluZWQsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRQcm9zZU1pcnJvclBsdWdpbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgZHJvcEN1cnNvcih0aGlzLm9wdGlvbnMpLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgRHJvcGN1cnNvciwgRHJvcGN1cnNvciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFeHRlbnNpb24iLCJkcm9wQ3Vyc29yIiwiRHJvcGN1cnNvciIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiY29sb3IiLCJ3aWR0aCIsImNsYXNzIiwidW5kZWZpbmVkIiwiYWRkUHJvc2VNaXJyb3JQbHVnaW5zIiwib3B0aW9ucyIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@tiptap/extension-floating-menu/dist/index.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   FloatingMenuPlugin: () => (/* binding */ FloatingMenuPlugin),\n/* harmony export */   FloatingMenuView: () => (/* binding */ FloatingMenuView),\n/* harmony export */   \"default\": () => (/* binding */ FloatingMenu)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n/* harmony import */ var tippy_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tippy.js */ \"(ssr)/./node_modules/tippy.js/dist/tippy.esm.js\");\n\n\n\nclass FloatingMenuView {\n    constructor({ editor, element, view, tippyOptions = {}, shouldShow }){\n        this.preventHide = false;\n        this.shouldShow = ({ view, state })=>{\n            const { selection } = state;\n            const { $anchor, empty } = selection;\n            const isRootDepth = $anchor.depth === 1;\n            const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent;\n            if (!view.hasFocus() || !empty || !isRootDepth || !isEmptyTextBlock || !this.editor.isEditable) {\n                return false;\n            }\n            return true;\n        };\n        this.mousedownHandler = ()=>{\n            this.preventHide = true;\n        };\n        this.focusHandler = ()=>{\n            // we use `setTimeout` to make sure `selection` is already updated\n            setTimeout(()=>this.update(this.editor.view));\n        };\n        this.blurHandler = ({ event })=>{\n            var _a;\n            if (this.preventHide) {\n                this.preventHide = false;\n                return;\n            }\n            if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {\n                return;\n            }\n            this.hide();\n        };\n        this.tippyBlurHandler = (event)=>{\n            this.blurHandler({\n                event\n            });\n        };\n        this.editor = editor;\n        this.element = element;\n        this.view = view;\n        if (shouldShow) {\n            this.shouldShow = shouldShow;\n        }\n        this.element.addEventListener(\"mousedown\", this.mousedownHandler, {\n            capture: true\n        });\n        this.editor.on(\"focus\", this.focusHandler);\n        this.editor.on(\"blur\", this.blurHandler);\n        this.tippyOptions = tippyOptions;\n        // Detaches menu content from its current parent\n        this.element.remove();\n        this.element.style.visibility = \"visible\";\n    }\n    createTooltip() {\n        const { element: editorElement } = this.editor.options;\n        const editorIsAttached = !!editorElement.parentElement;\n        if (this.tippy || !editorIsAttached) {\n            return;\n        }\n        this.tippy = (0,tippy_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(editorElement, {\n            duration: 0,\n            getReferenceClientRect: null,\n            content: this.element,\n            interactive: true,\n            trigger: \"manual\",\n            placement: \"right\",\n            hideOnClick: \"toggle\",\n            ...this.tippyOptions\n        });\n        // maybe we have to hide tippy on its own blur event as well\n        if (this.tippy.popper.firstChild) {\n            this.tippy.popper.firstChild.addEventListener(\"blur\", this.tippyBlurHandler);\n        }\n    }\n    update(view, oldState) {\n        var _a, _b, _c;\n        const { state } = view;\n        const { doc, selection } = state;\n        const { from, to } = selection;\n        const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n        if (isSame) {\n            return;\n        }\n        this.createTooltip();\n        const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {\n            editor: this.editor,\n            view,\n            state,\n            oldState\n        });\n        if (!shouldShow) {\n            this.hide();\n            return;\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({\n            getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (()=>(0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.posToDOMRect)(view, from, to))\n        });\n        this.show();\n    }\n    show() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();\n    }\n    hide() {\n        var _a;\n        (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();\n    }\n    destroy() {\n        var _a, _b;\n        if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {\n            this.tippy.popper.firstChild.removeEventListener(\"blur\", this.tippyBlurHandler);\n        }\n        (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.element.removeEventListener(\"mousedown\", this.mousedownHandler, {\n            capture: true\n        });\n        this.editor.off(\"focus\", this.focusHandler);\n        this.editor.off(\"blur\", this.blurHandler);\n    }\n}\nconst FloatingMenuPlugin = (options)=>{\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.Plugin({\n        key: typeof options.pluginKey === \"string\" ? new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey(options.pluginKey) : options.pluginKey,\n        view: (view)=>new FloatingMenuView({\n                view,\n                ...options\n            })\n    });\n};\nconst FloatingMenu = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension.create({\n    name: \"floatingMenu\",\n    addOptions () {\n        return {\n            element: null,\n            tippyOptions: {},\n            pluginKey: \"floatingMenu\",\n            shouldShow: null\n        };\n    },\n    addProseMirrorPlugins () {\n        if (!this.options.element) {\n            return [];\n        }\n        return [\n            FloatingMenuPlugin({\n                pluginKey: this.options.pluginKey,\n                editor: this.editor,\n                element: this.options.element,\n                tippyOptions: this.options.tippyOptions,\n                shouldShow: this.options.shouldShow\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-gapcursor/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Gapcursor: () => (/* binding */ Gapcursor),\n/* harmony export */   \"default\": () => (/* binding */ Gapcursor)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/gapcursor */ \"(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\");\n\n\nconst Gapcursor = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: \"gapCursor\",\n    addProseMirrorPlugins () {\n        return [\n            (0,_tiptap_pm_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)()\n        ];\n    },\n    extendNodeSchema (extension) {\n        var _a;\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage\n        };\n        return {\n            allowGapCursor: (_a = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_1__.getExtensionField)(extension, \"allowGapCursor\", context))) !== null && _a !== void 0 ? _a : null\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZ2FwY3Vyc29yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEwRTtBQUN6QjtBQUVqRCxNQUFNSSxZQUFZSixtREFBU0EsQ0FBQ0ssTUFBTSxDQUFDO0lBQy9CQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNISiwrREFBU0E7U0FDWjtJQUNMO0lBQ0FLLGtCQUFpQkMsU0FBUztRQUN0QixJQUFJQztRQUNKLE1BQU1DLFVBQVU7WUFDWkwsTUFBTUcsVUFBVUgsSUFBSTtZQUNwQk0sU0FBU0gsVUFBVUcsT0FBTztZQUMxQkMsU0FBU0osVUFBVUksT0FBTztRQUM5QjtRQUNBLE9BQU87WUFDSEMsZ0JBQWdCLENBQUNKLEtBQUtULDBEQUFZQSxDQUFDQywrREFBaUJBLENBQUNPLFdBQVcsa0JBQWtCRSxTQUFRLE1BQU8sUUFBUUQsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDbEk7SUFDSjtBQUNKO0FBRTJDLENBQzNDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tZ2FwY3Vyc29yL2Rpc3QvaW5kZXguanM/MGRmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24sIGNhbGxPclJldHVybiwgZ2V0RXh0ZW5zaW9uRmllbGQgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuaW1wb3J0IHsgZ2FwQ3Vyc29yIH0gZnJvbSAnQHRpcHRhcC9wbS9nYXBjdXJzb3InO1xuXG5jb25zdCBHYXBjdXJzb3IgPSBFeHRlbnNpb24uY3JlYXRlKHtcclxuICAgIG5hbWU6ICdnYXBDdXJzb3InLFxyXG4gICAgYWRkUHJvc2VNaXJyb3JQbHVnaW5zKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGdhcEN1cnNvcigpLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgZXh0ZW5kTm9kZVNjaGVtYShleHRlbnNpb24pIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcclxuICAgICAgICAgICAgbmFtZTogZXh0ZW5zaW9uLm5hbWUsXHJcbiAgICAgICAgICAgIG9wdGlvbnM6IGV4dGVuc2lvbi5vcHRpb25zLFxyXG4gICAgICAgICAgICBzdG9yYWdlOiBleHRlbnNpb24uc3RvcmFnZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGFsbG93R2FwQ3Vyc29yOiAoX2EgPSBjYWxsT3JSZXR1cm4oZ2V0RXh0ZW5zaW9uRmllbGQoZXh0ZW5zaW9uLCAnYWxsb3dHYXBDdXJzb3InLCBjb250ZXh0KSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGwsXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBHYXBjdXJzb3IsIEdhcGN1cnNvciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJFeHRlbnNpb24iLCJjYWxsT3JSZXR1cm4iLCJnZXRFeHRlbnNpb25GaWVsZCIsImdhcEN1cnNvciIsIkdhcGN1cnNvciIsImNyZWF0ZSIsIm5hbWUiLCJhZGRQcm9zZU1pcnJvclBsdWdpbnMiLCJleHRlbmROb2RlU2NoZW1hIiwiZXh0ZW5zaW9uIiwiX2EiLCJjb250ZXh0Iiwib3B0aW9ucyIsInN0b3JhZ2UiLCJhbGxvd0dhcEN1cnNvciIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-hard-break/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HardBreak: () => (/* binding */ HardBreak),\n/* harmony export */   \"default\": () => (/* binding */ HardBreak)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst HardBreak = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"hardBreak\",\n    addOptions () {\n        return {\n            keepMarks: true,\n            HTMLAttributes: {}\n        };\n    },\n    inline: true,\n    group: \"inline\",\n    selectable: false,\n    parseHTML () {\n        return [\n            {\n                tag: \"br\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"br\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes)\n        ];\n    },\n    renderText () {\n        return \"\\n\";\n    },\n    addCommands () {\n        return {\n            setHardBreak: ()=>({ commands, chain, state, editor })=>{\n                    return commands.first([\n                        ()=>commands.exitCode(),\n                        ()=>commands.command(()=>{\n                                const { selection, storedMarks } = state;\n                                if (selection.$from.parent.type.spec.isolating) {\n                                    return false;\n                                }\n                                const { keepMarks } = this.options;\n                                const { splittableMarks } = editor.extensionManager;\n                                const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n                                return chain().insertContent({\n                                    type: this.name\n                                }).command(({ tr, dispatch })=>{\n                                    if (dispatch && marks && keepMarks) {\n                                        const filteredMarks = marks.filter((mark)=>splittableMarks.includes(mark.type.name));\n                                        tr.ensureMarks(filteredMarks);\n                                    }\n                                    return true;\n                                }).run();\n                            })\n                    ]);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-Enter\": ()=>this.editor.commands.setHardBreak(),\n            \"Shift-Enter\": ()=>this.editor.commands.setHardBreak()\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGFyZC1icmVhay9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUVyRCxNQUFNRSxZQUFZRiw4Q0FBSUEsQ0FBQ0csTUFBTSxDQUFDO0lBQzFCQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxXQUFXO1lBQ1hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUMsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLFlBQVk7SUFDWkM7UUFDSSxPQUFPO1lBQ0g7Z0JBQUVDLEtBQUs7WUFBSztTQUNmO0lBQ0w7SUFDQUMsWUFBVyxFQUFFTixjQUFjLEVBQUU7UUFDekIsT0FBTztZQUFDO1lBQU1OLDZEQUFlQSxDQUFDLElBQUksQ0FBQ2EsT0FBTyxDQUFDUCxjQUFjLEVBQUVBO1NBQWdCO0lBQy9FO0lBQ0FRO1FBQ0ksT0FBTztJQUNYO0lBQ0FDO1FBQ0ksT0FBTztZQUNIQyxjQUFjLElBQU0sQ0FBQyxFQUFFQyxRQUFRLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUc7b0JBQ3BELE9BQU9ILFNBQVNJLEtBQUssQ0FBQzt3QkFDbEIsSUFBTUosU0FBU0ssUUFBUTt3QkFDdkIsSUFBTUwsU0FBU00sT0FBTyxDQUFDO2dDQUNuQixNQUFNLEVBQUVDLFNBQVMsRUFBRUMsV0FBVyxFQUFFLEdBQUdOO2dDQUNuQyxJQUFJSyxVQUFVRSxLQUFLLENBQUNDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDQyxJQUFJLENBQUNDLFNBQVMsRUFBRTtvQ0FDNUMsT0FBTztnQ0FDWDtnQ0FDQSxNQUFNLEVBQUV6QixTQUFTLEVBQUUsR0FBRyxJQUFJLENBQUNRLE9BQU87Z0NBQ2xDLE1BQU0sRUFBRWtCLGVBQWUsRUFBRSxHQUFHWCxPQUFPWSxnQkFBZ0I7Z0NBQ25ELE1BQU1DLFFBQVFSLGVBQ05ELFVBQVVVLEdBQUcsQ0FBQ0MsWUFBWSxJQUFJWCxVQUFVRSxLQUFLLENBQUNPLEtBQUs7Z0NBQzNELE9BQU9mLFFBQ0ZrQixhQUFhLENBQUM7b0NBQUVSLE1BQU0sSUFBSSxDQUFDekIsSUFBSTtnQ0FBQyxHQUNoQ29CLE9BQU8sQ0FBQyxDQUFDLEVBQUVjLEVBQUUsRUFBRUMsUUFBUSxFQUFFO29DQUMxQixJQUFJQSxZQUFZTCxTQUFTNUIsV0FBVzt3Q0FDaEMsTUFBTWtDLGdCQUFnQk4sTUFDakJPLE1BQU0sQ0FBQ0MsQ0FBQUEsT0FBUVYsZ0JBQWdCVyxRQUFRLENBQUNELEtBQUtiLElBQUksQ0FBQ3pCLElBQUk7d0NBQzNEa0MsR0FBR00sV0FBVyxDQUFDSjtvQ0FDbkI7b0NBQ0EsT0FBTztnQ0FDWCxHQUNLSyxHQUFHOzRCQUNaO3FCQUNIO2dCQUNMO1FBQ0o7SUFDSjtJQUNBQztRQUNJLE9BQU87WUFDSCxhQUFhLElBQU0sSUFBSSxDQUFDekIsTUFBTSxDQUFDSCxRQUFRLENBQUNELFlBQVk7WUFDcEQsZUFBZSxJQUFNLElBQUksQ0FBQ0ksTUFBTSxDQUFDSCxRQUFRLENBQUNELFlBQVk7UUFDMUQ7SUFDSjtBQUNKO0FBRTJDLENBQzNDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGFyZC1icmVhay9kaXN0L2luZGV4LmpzPzAxNTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgSGFyZEJyZWFrID0gTm9kZS5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ2hhcmRCcmVhaycsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGtlZXBNYXJrczogdHJ1ZSxcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgaW5saW5lOiB0cnVlLFxyXG4gICAgZ3JvdXA6ICdpbmxpbmUnLFxyXG4gICAgc2VsZWN0YWJsZTogZmFsc2UsXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgeyB0YWc6ICdicicgfSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XHJcbiAgICAgICAgcmV0dXJuIFsnYnInLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyldO1xyXG4gICAgfSxcclxuICAgIHJlbmRlclRleHQoKSB7XHJcbiAgICAgICAgcmV0dXJuICdcXG4nO1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHNldEhhcmRCcmVhazogKCkgPT4gKHsgY29tbWFuZHMsIGNoYWluLCBzdGF0ZSwgZWRpdG9yLCB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuZmlyc3QoW1xyXG4gICAgICAgICAgICAgICAgICAgICgpID0+IGNvbW1hbmRzLmV4aXRDb2RlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gY29tbWFuZHMuY29tbWFuZCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uLCBzdG9yZWRNYXJrcyB9ID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24uJGZyb20ucGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGtlZXBNYXJrcyB9ID0gdGhpcy5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHNwbGl0dGFibGVNYXJrcyB9ID0gZWRpdG9yLmV4dGVuc2lvbk1hbmFnZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtzID0gc3RvcmVkTWFya3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IChzZWxlY3Rpb24uJHRvLnBhcmVudE9mZnNldCAmJiBzZWxlY3Rpb24uJGZyb20ubWFya3MoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGFpbigpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaW5zZXJ0Q29udGVudCh7IHR5cGU6IHRoaXMubmFtZSB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbW1hbmQoKHsgdHIsIGRpc3BhdGNoIH0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXNwYXRjaCAmJiBtYXJrcyAmJiBrZWVwTWFya3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWx0ZXJlZE1hcmtzID0gbWFya3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihtYXJrID0+IHNwbGl0dGFibGVNYXJrcy5pbmNsdWRlcyhtYXJrLnR5cGUubmFtZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyLmVuc3VyZU1hcmtzKGZpbHRlcmVkTWFya3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucnVuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICBdKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2QtRW50ZXInOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy5zZXRIYXJkQnJlYWsoKSxcclxuICAgICAgICAgICAgJ1NoaWZ0LUVudGVyJzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMuc2V0SGFyZEJyZWFrKCksXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBIYXJkQnJlYWssIEhhcmRCcmVhayBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwibWVyZ2VBdHRyaWJ1dGVzIiwiSGFyZEJyZWFrIiwiY3JlYXRlIiwibmFtZSIsImFkZE9wdGlvbnMiLCJrZWVwTWFya3MiLCJIVE1MQXR0cmlidXRlcyIsImlubGluZSIsImdyb3VwIiwic2VsZWN0YWJsZSIsInBhcnNlSFRNTCIsInRhZyIsInJlbmRlckhUTUwiLCJvcHRpb25zIiwicmVuZGVyVGV4dCIsImFkZENvbW1hbmRzIiwic2V0SGFyZEJyZWFrIiwiY29tbWFuZHMiLCJjaGFpbiIsInN0YXRlIiwiZWRpdG9yIiwiZmlyc3QiLCJleGl0Q29kZSIsImNvbW1hbmQiLCJzZWxlY3Rpb24iLCJzdG9yZWRNYXJrcyIsIiRmcm9tIiwicGFyZW50IiwidHlwZSIsInNwZWMiLCJpc29sYXRpbmciLCJzcGxpdHRhYmxlTWFya3MiLCJleHRlbnNpb25NYW5hZ2VyIiwibWFya3MiLCIkdG8iLCJwYXJlbnRPZmZzZXQiLCJpbnNlcnRDb250ZW50IiwidHIiLCJkaXNwYXRjaCIsImZpbHRlcmVkTWFya3MiLCJmaWx0ZXIiLCJtYXJrIiwiaW5jbHVkZXMiLCJlbnN1cmVNYXJrcyIsInJ1biIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-history/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@tiptap/extension-history/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   History: () => (/* binding */ History),\n/* harmony export */   \"default\": () => (/* binding */ History)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/pm/history */ \"(ssr)/./node_modules/@tiptap/pm/history/dist/index.js\");\n\n\nconst History = _tiptap_core__WEBPACK_IMPORTED_MODULE_1__.Extension.create({\n    name: \"history\",\n    addOptions () {\n        return {\n            depth: 100,\n            newGroupDelay: 500\n        };\n    },\n    addCommands () {\n        return {\n            undo: ()=>({ state, dispatch })=>{\n                    return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.undo)(state, dispatch);\n                },\n            redo: ()=>({ state, dispatch })=>{\n                    return (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.redo)(state, dispatch);\n                }\n        };\n    },\n    addProseMirrorPlugins () {\n        return [\n            (0,_tiptap_pm_history__WEBPACK_IMPORTED_MODULE_0__.history)(this.options)\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-z\": ()=>this.editor.commands.undo(),\n            \"Shift-Mod-z\": ()=>this.editor.commands.redo(),\n            \"Mod-y\": ()=>this.editor.commands.redo(),\n            // Russian keyboard layouts\n            \"Mod-я\": ()=>this.editor.commands.undo(),\n            \"Shift-Mod-я\": ()=>this.editor.commands.redo()\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGlzdG9yeS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDZ0I7QUFFekQsTUFBTUksVUFBVUosbURBQVNBLENBQUNLLE1BQU0sQ0FBQztJQUM3QkMsTUFBTTtJQUNOQztRQUNJLE9BQU87WUFDSEMsT0FBTztZQUNQQyxlQUFlO1FBQ25CO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0hULE1BQU0sSUFBTSxDQUFDLEVBQUVVLEtBQUssRUFBRUMsUUFBUSxFQUFFO29CQUM1QixPQUFPWCx3REFBSUEsQ0FBQ1UsT0FBT0M7Z0JBQ3ZCO1lBQ0FWLE1BQU0sSUFBTSxDQUFDLEVBQUVTLEtBQUssRUFBRUMsUUFBUSxFQUFFO29CQUM1QixPQUFPVix3REFBSUEsQ0FBQ1MsT0FBT0M7Z0JBQ3ZCO1FBQ0o7SUFDSjtJQUNBQztRQUNJLE9BQU87WUFDSFYsMkRBQU9BLENBQUMsSUFBSSxDQUFDVyxPQUFPO1NBQ3ZCO0lBQ0w7SUFDQUM7UUFDSSxPQUFPO1lBQ0gsU0FBUyxJQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDQyxRQUFRLENBQUNoQixJQUFJO1lBQ3hDLGVBQWUsSUFBTSxJQUFJLENBQUNlLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDZixJQUFJO1lBQzlDLFNBQVMsSUFBTSxJQUFJLENBQUNjLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDZixJQUFJO1lBQ3hDLDJCQUEyQjtZQUMzQixTQUFTLElBQU0sSUFBSSxDQUFDYyxNQUFNLENBQUNDLFFBQVEsQ0FBQ2hCLElBQUk7WUFDeEMsZUFBZSxJQUFNLElBQUksQ0FBQ2UsTUFBTSxDQUFDQyxRQUFRLENBQUNmLElBQUk7UUFDbEQ7SUFDSjtBQUNKO0FBRXVDLENBQ3ZDLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taGlzdG9yeS9kaXN0L2luZGV4LmpzPzI2ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcbmltcG9ydCB7IHVuZG8sIHJlZG8sIGhpc3RvcnkgfSBmcm9tICdAdGlwdGFwL3BtL2hpc3RvcnknO1xuXG5jb25zdCBIaXN0b3J5ID0gRXh0ZW5zaW9uLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnaGlzdG9yeScsXHJcbiAgICBhZGRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRlcHRoOiAxMDAsXHJcbiAgICAgICAgICAgIG5ld0dyb3VwRGVsYXk6IDUwMCxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZENvbW1hbmRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHVuZG86ICgpID0+ICh7IHN0YXRlLCBkaXNwYXRjaCB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kbyhzdGF0ZSwgZGlzcGF0Y2gpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWRvOiAoKSA9PiAoeyBzdGF0ZSwgZGlzcGF0Y2ggfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZG8oc3RhdGUsIGRpc3BhdGNoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZFByb3NlTWlycm9yUGx1Z2lucygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBoaXN0b3J5KHRoaXMub3B0aW9ucyksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAnTW9kLXonOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy51bmRvKCksXHJcbiAgICAgICAgICAgICdTaGlmdC1Nb2Qteic6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnJlZG8oKSxcclxuICAgICAgICAgICAgJ01vZC15JzogKCkgPT4gdGhpcy5lZGl0b3IuY29tbWFuZHMucmVkbygpLFxyXG4gICAgICAgICAgICAvLyBSdXNzaWFuIGtleWJvYXJkIGxheW91dHNcclxuICAgICAgICAgICAgJ01vZC3Rjyc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnVuZG8oKSxcclxuICAgICAgICAgICAgJ1NoaWZ0LU1vZC3Rjyc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnJlZG8oKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IEhpc3RvcnksIEhpc3RvcnkgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiRXh0ZW5zaW9uIiwidW5kbyIsInJlZG8iLCJoaXN0b3J5IiwiSGlzdG9yeSIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiZGVwdGgiLCJuZXdHcm91cERlbGF5IiwiYWRkQ29tbWFuZHMiLCJzdGF0ZSIsImRpc3BhdGNoIiwiYWRkUHJvc2VNaXJyb3JQbHVnaW5zIiwib3B0aW9ucyIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiZWRpdG9yIiwiY29tbWFuZHMiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-italic/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Italic: () => (/* binding */ Italic),\n/* harmony export */   \"default\": () => (/* binding */ Italic),\n/* harmony export */   starInputRegex: () => (/* binding */ starInputRegex),\n/* harmony export */   starPasteRegex: () => (/* binding */ starPasteRegex),\n/* harmony export */   underscoreInputRegex: () => (/* binding */ underscoreInputRegex),\n/* harmony export */   underscorePasteRegex: () => (/* binding */ underscorePasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst starInputRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))$/;\nconst starPasteRegex = /(?:^|\\s)((?:\\*)((?:[^*]+))(?:\\*))/g;\nconst underscoreInputRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))$/;\nconst underscorePasteRegex = /(?:^|\\s)((?:_)((?:[^_]+))(?:_))/g;\nconst Italic = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"italic\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"em\"\n            },\n            {\n                tag: \"i\",\n                getAttrs: (node)=>node.style.fontStyle !== \"normal\" && null\n            },\n            {\n                style: \"font-style=italic\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"em\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setItalic: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleItalic: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetItalic: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-i\": ()=>this.editor.commands.toggleItalic(),\n            \"Mod-I\": ()=>this.editor.commands.toggleItalic()\n        };\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: starInputRegex,\n                type: this.type\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: underscoreInputRegex,\n                type: this.type\n            })\n        ];\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: starPasteRegex,\n                type: this.type\n            }),\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: underscorePasteRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24taXRhbGljL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFtRjtBQUVuRixNQUFNSSxpQkFBaUI7QUFDdkIsTUFBTUMsaUJBQWlCO0FBQ3ZCLE1BQU1DLHVCQUF1QjtBQUM3QixNQUFNQyx1QkFBdUI7QUFDN0IsTUFBTUMsU0FBU1IsOENBQUlBLENBQUNTLE1BQU0sQ0FBQztJQUN2QkMsTUFBTTtJQUNOQztRQUNJLE9BQU87WUFDSEMsZ0JBQWdCLENBQUM7UUFDckI7SUFDSjtJQUNBQztRQUNJLE9BQU87WUFDSDtnQkFDSUMsS0FBSztZQUNUO1lBQ0E7Z0JBQ0lBLEtBQUs7Z0JBQ0xDLFVBQVVDLENBQUFBLE9BQVFBLEtBQUtDLEtBQUssQ0FBQ0MsU0FBUyxLQUFLLFlBQVk7WUFDM0Q7WUFDQTtnQkFDSUQsT0FBTztZQUNYO1NBQ0g7SUFDTDtJQUNBRSxZQUFXLEVBQUVQLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBTVgsNkRBQWVBLENBQUMsSUFBSSxDQUFDbUIsT0FBTyxDQUFDUixjQUFjLEVBQUVBO1lBQWlCO1NBQUU7SUFDbEY7SUFDQVM7UUFDSSxPQUFPO1lBQ0hDLFdBQVcsSUFBTSxDQUFDLEVBQUVDLFFBQVEsRUFBRTtvQkFDMUIsT0FBT0EsU0FBU0MsT0FBTyxDQUFDLElBQUksQ0FBQ2QsSUFBSTtnQkFDckM7WUFDQWUsY0FBYyxJQUFNLENBQUMsRUFBRUYsUUFBUSxFQUFFO29CQUM3QixPQUFPQSxTQUFTRyxVQUFVLENBQUMsSUFBSSxDQUFDaEIsSUFBSTtnQkFDeEM7WUFDQWlCLGFBQWEsSUFBTSxDQUFDLEVBQUVKLFFBQVEsRUFBRTtvQkFDNUIsT0FBT0EsU0FBU0ssU0FBUyxDQUFDLElBQUksQ0FBQ2xCLElBQUk7Z0JBQ3ZDO1FBQ0o7SUFDSjtJQUNBbUI7UUFDSSxPQUFPO1lBQ0gsU0FBUyxJQUFNLElBQUksQ0FBQ0MsTUFBTSxDQUFDUCxRQUFRLENBQUNFLFlBQVk7WUFDaEQsU0FBUyxJQUFNLElBQUksQ0FBQ0ssTUFBTSxDQUFDUCxRQUFRLENBQUNFLFlBQVk7UUFDcEQ7SUFDSjtJQUNBTTtRQUNJLE9BQU87WUFDSDdCLDJEQUFhQSxDQUFDO2dCQUNWOEIsTUFBTTVCO2dCQUNONkIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7WUFDQS9CLDJEQUFhQSxDQUFDO2dCQUNWOEIsTUFBTTFCO2dCQUNOMkIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7U0FDSDtJQUNMO0lBQ0FDO1FBQ0ksT0FBTztZQUNIL0IsMkRBQWFBLENBQUM7Z0JBQ1Y2QixNQUFNM0I7Z0JBQ040QixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtZQUNBOUIsMkRBQWFBLENBQUM7Z0JBQ1Y2QixNQUFNekI7Z0JBQ04wQixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtTQUNIO0lBQ0w7QUFDSjtBQUVpSCxDQUNqSCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLWl0YWxpYy9kaXN0L2luZGV4LmpzPzEzNzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFyaywgbWVyZ2VBdHRyaWJ1dGVzLCBtYXJrSW5wdXRSdWxlLCBtYXJrUGFzdGVSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3Qgc3RhcklucHV0UmVnZXggPSAvKD86XnxcXHMpKCg/OlxcKikoKD86W14qXSspKSg/OlxcKikpJC87XHJcbmNvbnN0IHN0YXJQYXN0ZVJlZ2V4ID0gLyg/Ol58XFxzKSgoPzpcXCopKCg/OlteKl0rKSkoPzpcXCopKS9nO1xyXG5jb25zdCB1bmRlcnNjb3JlSW5wdXRSZWdleCA9IC8oPzpefFxccykoKD86XykoKD86W15fXSspKSg/Ol8pKSQvO1xyXG5jb25zdCB1bmRlcnNjb3JlUGFzdGVSZWdleCA9IC8oPzpefFxccykoKD86XykoKD86W15fXSspKSg/Ol8pKS9nO1xyXG5jb25zdCBJdGFsaWMgPSBNYXJrLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnaXRhbGljJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ2VtJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFnOiAnaScsXHJcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogbm9kZSA9PiBub2RlLnN0eWxlLmZvbnRTdHlsZSAhPT0gJ25vcm1hbCcgJiYgbnVsbCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdmb250LXN0eWxlPWl0YWxpYycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbiAgICByZW5kZXJIVE1MKHsgSFRNTEF0dHJpYnV0ZXMgfSkge1xyXG4gICAgICAgIHJldHVybiBbJ2VtJywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRJdGFsaWM6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZUl0YWxpYzogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRJdGFsaWM6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2QtaSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZUl0YWxpYygpLFxyXG4gICAgICAgICAgICAnTW9kLUknOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVJdGFsaWMoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZElucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBzdGFySW5wdXRSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG1hcmtJbnB1dFJ1bGUoe1xyXG4gICAgICAgICAgICAgICAgZmluZDogdW5kZXJzY29yZUlucHV0UmVnZXgsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgYWRkUGFzdGVSdWxlcygpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBtYXJrUGFzdGVSdWxlKHtcclxuICAgICAgICAgICAgICAgIGZpbmQ6IHN0YXJQYXN0ZVJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiB1bmRlcnNjb3JlUGFzdGVSZWdleCxcclxuICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgXTtcclxuICAgIH0sXHJcbn0pO1xuXG5leHBvcnQgeyBJdGFsaWMsIEl0YWxpYyBhcyBkZWZhdWx0LCBzdGFySW5wdXRSZWdleCwgc3RhclBhc3RlUmVnZXgsIHVuZGVyc2NvcmVJbnB1dFJlZ2V4LCB1bmRlcnNjb3JlUGFzdGVSZWdleCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTWFyayIsIm1lcmdlQXR0cmlidXRlcyIsIm1hcmtJbnB1dFJ1bGUiLCJtYXJrUGFzdGVSdWxlIiwic3RhcklucHV0UmVnZXgiLCJzdGFyUGFzdGVSZWdleCIsInVuZGVyc2NvcmVJbnB1dFJlZ2V4IiwidW5kZXJzY29yZVBhc3RlUmVnZXgiLCJJdGFsaWMiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwicGFyc2VIVE1MIiwidGFnIiwiZ2V0QXR0cnMiLCJub2RlIiwic3R5bGUiLCJmb250U3R5bGUiLCJyZW5kZXJIVE1MIiwib3B0aW9ucyIsImFkZENvbW1hbmRzIiwic2V0SXRhbGljIiwiY29tbWFuZHMiLCJzZXRNYXJrIiwidG9nZ2xlSXRhbGljIiwidG9nZ2xlTWFyayIsInVuc2V0SXRhbGljIiwidW5zZXRNYXJrIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJlZGl0b3IiLCJhZGRJbnB1dFJ1bGVzIiwiZmluZCIsInR5cGUiLCJhZGRQYXN0ZVJ1bGVzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-link/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-link/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Link: () => (/* binding */ Link),\n/* harmony export */   \"default\": () => (/* binding */ Link),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var linkifyjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! linkifyjs */ \"(ssr)/./node_modules/linkifyjs/dist/linkify.es.js\");\n/* harmony import */ var _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/pm/state */ \"(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\");\n\n\n\nfunction autolink(options) {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey(\"autolink\"),\n        appendTransaction: (transactions, oldState, newState)=>{\n            const docChanges = transactions.some((transaction)=>transaction.docChanged) && !oldState.doc.eq(newState.doc);\n            const preventAutolink = transactions.some((transaction)=>transaction.getMeta(\"preventAutolink\"));\n            if (!docChanges || preventAutolink) {\n                return;\n            }\n            const { tr } = newState;\n            const transform = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps)(oldState.doc, [\n                ...transactions\n            ]);\n            const changes = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges)(transform);\n            changes.forEach(({ newRange })=>{\n                // Now let’s see if we can add new links.\n                const nodesInChangedRanges = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange)(newState.doc, newRange, (node)=>node.isTextblock);\n                let textBlock;\n                let textBeforeWhitespace;\n                if (nodesInChangedRanges.length > 1) {\n                    // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter).\n                    textBlock = nodesInChangedRanges[0];\n                    textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, undefined, \" \");\n                } else if (nodesInChangedRanges.length && newState.doc.textBetween(newRange.from, newRange.to, \" \", \" \").endsWith(\" \")) {\n                    textBlock = nodesInChangedRanges[0];\n                    textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, undefined, \" \");\n                }\n                if (textBlock && textBeforeWhitespace) {\n                    const wordsBeforeWhitespace = textBeforeWhitespace.split(\" \").filter((s)=>s !== \"\");\n                    if (wordsBeforeWhitespace.length <= 0) {\n                        return false;\n                    }\n                    const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];\n                    const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);\n                    if (!lastWordBeforeSpace) {\n                        return false;\n                    }\n                    (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(lastWordBeforeSpace).filter((link)=>link.isLink)// Calculate link position.\n                    .map((link)=>({\n                            ...link,\n                            from: lastWordAndBlockOffset + link.start + 1,\n                            to: lastWordAndBlockOffset + link.end + 1\n                        }))// ignore link inside code mark\n                    .filter((link)=>{\n                        if (!newState.schema.marks.code) {\n                            return true;\n                        }\n                        return !newState.doc.rangeHasMark(link.from, link.to, newState.schema.marks.code);\n                    })// validate link\n                    .filter((link)=>{\n                        if (options.validate) {\n                            return options.validate(link.value);\n                        }\n                        return true;\n                    })// Add link mark.\n                    .forEach((link)=>{\n                        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween)(link.from, link.to, newState.doc).some((item)=>item.mark.type === options.type)) {\n                            return;\n                        }\n                        tr.addMark(link.from, link.to, options.type.create({\n                            href: link.href\n                        }));\n                    });\n                }\n            });\n            if (!tr.steps.length) {\n                return;\n            }\n            return tr;\n        }\n    });\n}\nfunction clickHandler(options) {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey(\"handleClickLink\"),\n        props: {\n            handleClick: (view, pos, event)=>{\n                var _a, _b;\n                if (event.button !== 0) {\n                    return false;\n                }\n                let a = event.target;\n                const els = [];\n                while(a.nodeName !== \"DIV\"){\n                    els.push(a);\n                    a = a.parentNode;\n                }\n                if (!els.find((value)=>value.nodeName === \"A\")) {\n                    return false;\n                }\n                const attrs = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes)(view.state, options.type.name);\n                const link = event.target;\n                const href = (_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : attrs.href;\n                const target = (_b = link === null || link === void 0 ? void 0 : link.target) !== null && _b !== void 0 ? _b : attrs.target;\n                if (link && href) {\n                    window.open(href, target);\n                    return true;\n                }\n                return false;\n            }\n        }\n    });\n}\nfunction pasteHandler(options) {\n    return new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.Plugin({\n        key: new _tiptap_pm_state__WEBPACK_IMPORTED_MODULE_1__.PluginKey(\"handlePasteLink\"),\n        props: {\n            handlePaste: (view, event, slice)=>{\n                const { state } = view;\n                const { selection } = state;\n                const { empty } = selection;\n                if (empty) {\n                    return false;\n                }\n                let textContent = \"\";\n                slice.content.forEach((node)=>{\n                    textContent += node.textContent;\n                });\n                const link = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(textContent).find((item)=>item.isLink && item.value === textContent);\n                if (!textContent || !link) {\n                    return false;\n                }\n                options.editor.commands.setMark(options.type, {\n                    href: link.href\n                });\n                return true;\n            }\n        }\n    });\n}\nconst pasteRegex = /https?:\\/\\/(?:www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z]{2,}\\b(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)(?:[-a-zA-Z0-9@:%._+~#=?!&/]*)/gi;\nconst Link = _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark.create({\n    name: \"link\",\n    priority: 1000,\n    keepOnSplit: false,\n    onCreate () {\n        this.options.protocols.forEach((protocol)=>{\n            if (typeof protocol === \"string\") {\n                (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerCustomProtocol)(protocol);\n                return;\n            }\n            (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.registerCustomProtocol)(protocol.scheme, protocol.optionalSlashes);\n        });\n    },\n    onDestroy () {\n        (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.reset)();\n    },\n    inclusive () {\n        return this.options.autolink;\n    },\n    addOptions () {\n        return {\n            openOnClick: true,\n            linkOnPaste: true,\n            autolink: true,\n            protocols: [],\n            HTMLAttributes: {\n                target: \"_blank\",\n                rel: \"noopener noreferrer nofollow\",\n                class: null\n            },\n            validate: undefined\n        };\n    },\n    addAttributes () {\n        return {\n            href: {\n                default: null\n            },\n            target: {\n                default: this.options.HTMLAttributes.target\n            },\n            rel: {\n                default: this.options.HTMLAttributes.rel\n            },\n            class: {\n                default: this.options.HTMLAttributes.class\n            }\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: 'a[href]:not([href *= \"javascript:\" i])'\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        var _a;\n        // False positive; we're explicitly checking for javascript: links to ignore them\n        // eslint-disable-next-line no-script-url\n        if ((_a = HTMLAttributes.href) === null || _a === void 0 ? void 0 : _a.startsWith(\"javascript:\")) {\n            // strip out the href\n            return [\n                \"a\",\n                (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, {\n                    ...HTMLAttributes,\n                    href: \"\"\n                }),\n                0\n            ];\n        }\n        return [\n            \"a\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setLink: (attributes)=>({ chain })=>{\n                    return chain().setMark(this.name, attributes).setMeta(\"preventAutolink\", true).run();\n                },\n            toggleLink: (attributes)=>({ chain })=>{\n                    return chain().toggleMark(this.name, attributes, {\n                        extendEmptyMarkRange: true\n                    }).setMeta(\"preventAutolink\", true).run();\n                },\n            unsetLink: ()=>({ chain })=>{\n                    return chain().unsetMark(this.name, {\n                        extendEmptyMarkRange: true\n                    }).setMeta(\"preventAutolink\", true).run();\n                }\n        };\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule)({\n                find: (text)=>{\n                    const foundLinks = [];\n                    if (text) {\n                        const links = (0,linkifyjs__WEBPACK_IMPORTED_MODULE_0__.find)(text).filter((item)=>item.isLink);\n                        if (links.length) {\n                            links.forEach((link)=>foundLinks.push({\n                                    text: link.value,\n                                    data: {\n                                        href: link.href\n                                    },\n                                    index: link.start\n                                }));\n                        }\n                    }\n                    return foundLinks;\n                },\n                type: this.type,\n                getAttributes: (match)=>{\n                    var _a;\n                    return {\n                        href: (_a = match.data) === null || _a === void 0 ? void 0 : _a.href\n                    };\n                }\n            })\n        ];\n    },\n    addProseMirrorPlugins () {\n        const plugins = [];\n        if (this.options.autolink) {\n            plugins.push(autolink({\n                type: this.type,\n                validate: this.options.validate\n            }));\n        }\n        if (this.options.openOnClick) {\n            plugins.push(clickHandler({\n                type: this.type\n            }));\n        }\n        if (this.options.linkOnPaste) {\n            plugins.push(pasteHandler({\n                editor: this.editor,\n                type: this.type\n            }));\n        }\n        return plugins;\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-link/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@tiptap/extension-strike/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Strike: () => (/* binding */ Strike),\n/* harmony export */   \"default\": () => (/* binding */ Strike),\n/* harmony export */   inputRegex: () => (/* binding */ inputRegex),\n/* harmony export */   pasteRegex: () => (/* binding */ pasteRegex)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst inputRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))$/;\nconst pasteRegex = /(?:^|\\s)((?:~~)((?:[^~]+))(?:~~))/g;\nconst Strike = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"strike\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"s\"\n            },\n            {\n                tag: \"del\"\n            },\n            {\n                tag: \"strike\"\n            },\n            {\n                style: \"text-decoration\",\n                consuming: false,\n                getAttrs: (style)=>style.includes(\"line-through\") ? {} : false\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"s\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setStrike: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleStrike: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetStrike: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        const shortcuts = {};\n        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.isMacOS)()) {\n            shortcuts[\"Mod-Shift-s\"] = ()=>this.editor.commands.toggleStrike();\n        } else {\n            shortcuts[\"Ctrl-Shift-s\"] = ()=>this.editor.commands.toggleStrike();\n        }\n        return shortcuts;\n    },\n    addInputRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markInputRule)({\n                find: inputRegex,\n                type: this.type\n            })\n        ];\n    },\n    addPasteRules () {\n        return [\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.markPasteRule)({\n                find: pasteRegex,\n                type: this.type\n            })\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tc3RyaWtlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBNEY7QUFFNUYsTUFBTUssYUFBYTtBQUNuQixNQUFNQyxhQUFhO0FBQ25CLE1BQU1DLFNBQVNQLDhDQUFJQSxDQUFDUSxNQUFNLENBQUM7SUFDdkJDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0g7Z0JBQ0lDLEtBQUs7WUFDVDtZQUNBO2dCQUNJQSxLQUFLO1lBQ1Q7WUFDQTtnQkFDSUEsS0FBSztZQUNUO1lBQ0E7Z0JBQ0lDLE9BQU87Z0JBQ1BDLFdBQVc7Z0JBQ1hDLFVBQVVGLENBQUFBLFFBQVVBLE1BQU1HLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJO1lBQzlEO1NBQ0g7SUFDTDtJQUNBQyxZQUFXLEVBQUVQLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBS1YsNkRBQWVBLENBQUMsSUFBSSxDQUFDa0IsT0FBTyxDQUFDUixjQUFjLEVBQUVBO1lBQWlCO1NBQUU7SUFDakY7SUFDQVM7UUFDSSxPQUFPO1lBQ0hDLFdBQVcsSUFBTSxDQUFDLEVBQUVDLFFBQVEsRUFBRTtvQkFDMUIsT0FBT0EsU0FBU0MsT0FBTyxDQUFDLElBQUksQ0FBQ2QsSUFBSTtnQkFDckM7WUFDQWUsY0FBYyxJQUFNLENBQUMsRUFBRUYsUUFBUSxFQUFFO29CQUM3QixPQUFPQSxTQUFTRyxVQUFVLENBQUMsSUFBSSxDQUFDaEIsSUFBSTtnQkFDeEM7WUFDQWlCLGFBQWEsSUFBTSxDQUFDLEVBQUVKLFFBQVEsRUFBRTtvQkFDNUIsT0FBT0EsU0FBU0ssU0FBUyxDQUFDLElBQUksQ0FBQ2xCLElBQUk7Z0JBQ3ZDO1FBQ0o7SUFDSjtJQUNBbUI7UUFDSSxNQUFNQyxZQUFZLENBQUM7UUFDbkIsSUFBSTNCLHFEQUFPQSxJQUFJO1lBQ1gyQixTQUFTLENBQUMsY0FBYyxHQUFHLElBQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNSLFFBQVEsQ0FBQ0UsWUFBWTtRQUN0RSxPQUNLO1lBQ0RLLFNBQVMsQ0FBQyxlQUFlLEdBQUcsSUFBTSxJQUFJLENBQUNDLE1BQU0sQ0FBQ1IsUUFBUSxDQUFDRSxZQUFZO1FBQ3ZFO1FBQ0EsT0FBT0s7SUFDWDtJQUNBRTtRQUNJLE9BQU87WUFDSDVCLDJEQUFhQSxDQUFDO2dCQUNWNkIsTUFBTTNCO2dCQUNONEIsTUFBTSxJQUFJLENBQUNBLElBQUk7WUFDbkI7U0FDSDtJQUNMO0lBQ0FDO1FBQ0ksT0FBTztZQUNIOUIsMkRBQWFBLENBQUM7Z0JBQ1Y0QixNQUFNMUI7Z0JBQ04yQixNQUFNLElBQUksQ0FBQ0EsSUFBSTtZQUNuQjtTQUNIO0lBQ0w7QUFDSjtBQUU2RCxDQUM3RCxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLXN0cmlrZS9kaXN0L2luZGV4LmpzPzhlNDAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFyaywgbWVyZ2VBdHRyaWJ1dGVzLCBpc01hY09TLCBtYXJrSW5wdXRSdWxlLCBtYXJrUGFzdGVSdWxlIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgaW5wdXRSZWdleCA9IC8oPzpefFxccykoKD86fn4pKCg/Oltefl0rKSkoPzp+fikpJC87XHJcbmNvbnN0IHBhc3RlUmVnZXggPSAvKD86XnxcXHMpKCg/On5+KSgoPzpbXn5dKykpKD86fn4pKS9nO1xyXG5jb25zdCBTdHJpa2UgPSBNYXJrLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAnc3RyaWtlJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgcGFyc2VIVE1MKCkge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRhZzogJ3MnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdkZWwnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0YWc6ICdzdHJpa2UnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBzdHlsZTogJ3RleHQtZGVjb3JhdGlvbicsXHJcbiAgICAgICAgICAgICAgICBjb25zdW1pbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgZ2V0QXR0cnM6IHN0eWxlID0+IChzdHlsZS5pbmNsdWRlcygnbGluZS10aHJvdWdoJykgPyB7fSA6IGZhbHNlKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XHJcbiAgICAgICAgcmV0dXJuIFsncycsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XHJcbiAgICB9LFxyXG4gICAgYWRkQ29tbWFuZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc2V0U3RyaWtlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMuc2V0TWFyayh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b2dnbGVTdHJpa2U6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy50b2dnbGVNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHVuc2V0U3RyaWtlOiAoKSA9PiAoeyBjb21tYW5kcyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tbWFuZHMudW5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBhZGRLZXlib2FyZFNob3J0Y3V0cygpIHtcclxuICAgICAgICBjb25zdCBzaG9ydGN1dHMgPSB7fTtcclxuICAgICAgICBpZiAoaXNNYWNPUygpKSB7XHJcbiAgICAgICAgICAgIHNob3J0Y3V0c1snTW9kLVNoaWZ0LXMnXSA9ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZVN0cmlrZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2hvcnRjdXRzWydDdHJsLVNoaWZ0LXMnXSA9ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZVN0cmlrZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2hvcnRjdXRzO1xyXG4gICAgfSxcclxuICAgIGFkZElucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya0lucHV0UnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBpbnB1dFJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIGFkZFBhc3RlUnVsZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgbWFya1Bhc3RlUnVsZSh7XHJcbiAgICAgICAgICAgICAgICBmaW5kOiBwYXN0ZVJlZ2V4LFxyXG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IFN0cmlrZSwgU3RyaWtlIGFzIGRlZmF1bHQsIGlucHV0UmVnZXgsIHBhc3RlUmVnZXggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk1hcmsiLCJtZXJnZUF0dHJpYnV0ZXMiLCJpc01hY09TIiwibWFya0lucHV0UnVsZSIsIm1hcmtQYXN0ZVJ1bGUiLCJpbnB1dFJlZ2V4IiwicGFzdGVSZWdleCIsIlN0cmlrZSIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiSFRNTEF0dHJpYnV0ZXMiLCJwYXJzZUhUTUwiLCJ0YWciLCJzdHlsZSIsImNvbnN1bWluZyIsImdldEF0dHJzIiwiaW5jbHVkZXMiLCJyZW5kZXJIVE1MIiwib3B0aW9ucyIsImFkZENvbW1hbmRzIiwic2V0U3RyaWtlIiwiY29tbWFuZHMiLCJzZXRNYXJrIiwidG9nZ2xlU3RyaWtlIiwidG9nZ2xlTWFyayIsInVuc2V0U3RyaWtlIiwidW5zZXRNYXJrIiwiYWRkS2V5Ym9hcmRTaG9ydGN1dHMiLCJzaG9ydGN1dHMiLCJlZGl0b3IiLCJhZGRJbnB1dFJ1bGVzIiwiZmluZCIsInR5cGUiLCJhZGRQYXN0ZVJ1bGVzIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-table-cell/dist/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-cell/dist/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableCell: () => (/* binding */ TableCell),\n/* harmony export */   \"default\": () => (/* binding */ TableCell)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst TableCell = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"tableCell\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    content: \"block+\",\n    addAttributes () {\n        return {\n            colspan: {\n                default: 1\n            },\n            rowspan: {\n                default: 1\n            },\n            colwidth: {\n                default: null,\n                parseHTML: (element)=>{\n                    const colwidth = element.getAttribute(\"colwidth\");\n                    const value = colwidth ? [\n                        parseInt(colwidth, 10)\n                    ] : null;\n                    return value;\n                }\n            }\n        };\n    },\n    tableRole: \"cell\",\n    isolating: true,\n    parseHTML () {\n        return [\n            {\n                tag: \"td\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"td\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGFibGUtY2VsbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRDtBQUVyRCxNQUFNRSxZQUFZRiw4Q0FBSUEsQ0FBQ0csTUFBTSxDQUFDO0lBQzFCQyxNQUFNO0lBQ05DO1FBQ0ksT0FBTztZQUNIQyxnQkFBZ0IsQ0FBQztRQUNyQjtJQUNKO0lBQ0FDLFNBQVM7SUFDVEM7UUFDSSxPQUFPO1lBQ0hDLFNBQVM7Z0JBQ0xDLFNBQVM7WUFDYjtZQUNBQyxTQUFTO2dCQUNMRCxTQUFTO1lBQ2I7WUFDQUUsVUFBVTtnQkFDTkYsU0FBUztnQkFDVEcsV0FBV0MsQ0FBQUE7b0JBQ1AsTUFBTUYsV0FBV0UsUUFBUUMsWUFBWSxDQUFDO29CQUN0QyxNQUFNQyxRQUFRSixXQUNSO3dCQUFDSyxTQUFTTCxVQUFVO3FCQUFJLEdBQ3hCO29CQUNOLE9BQU9JO2dCQUNYO1lBQ0o7UUFDSjtJQUNKO0lBQ0FFLFdBQVc7SUFDWEMsV0FBVztJQUNYTjtRQUNJLE9BQU87WUFDSDtnQkFBRU8sS0FBSztZQUFLO1NBQ2Y7SUFDTDtJQUNBQyxZQUFXLEVBQUVmLGNBQWMsRUFBRTtRQUN6QixPQUFPO1lBQUM7WUFBTUwsNkRBQWVBLENBQUMsSUFBSSxDQUFDcUIsT0FBTyxDQUFDaEIsY0FBYyxFQUFFQTtZQUFpQjtTQUFFO0lBQ2xGO0FBQ0o7QUFFMkMsQ0FDM0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Utam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi10YWJsZS1jZWxsL2Rpc3QvaW5kZXguanM/NjRlYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlLCBtZXJnZUF0dHJpYnV0ZXMgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBUYWJsZUNlbGwgPSBOb2RlLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAndGFibGVDZWxsJyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgY29udGVudDogJ2Jsb2NrKycsXHJcbiAgICBhZGRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbHNwYW46IHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJvd3NwYW46IHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNvbHdpZHRoOiB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcGFyc2VIVE1MOiBlbGVtZW50ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2x3aWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjb2x3aWR0aCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gY29sd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyBbcGFyc2VJbnQoY29sd2lkdGgsIDEwKV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICB0YWJsZVJvbGU6ICdjZWxsJyxcclxuICAgIGlzb2xhdGluZzogdHJ1ZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ3RkJyB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWyd0ZCcsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgVGFibGVDZWxsLCBUYWJsZUNlbGwgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOlsiTm9kZSIsIm1lcmdlQXR0cmlidXRlcyIsIlRhYmxlQ2VsbCIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiSFRNTEF0dHJpYnV0ZXMiLCJjb250ZW50IiwiYWRkQXR0cmlidXRlcyIsImNvbHNwYW4iLCJkZWZhdWx0Iiwicm93c3BhbiIsImNvbHdpZHRoIiwicGFyc2VIVE1MIiwiZWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInZhbHVlIiwicGFyc2VJbnQiLCJ0YWJsZVJvbGUiLCJpc29sYXRpbmciLCJ0YWciLCJyZW5kZXJIVE1MIiwib3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-table-cell/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-table-header/dist/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-header/dist/index.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableHeader: () => (/* binding */ TableHeader),\n/* harmony export */   \"default\": () => (/* binding */ TableHeader)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst TableHeader = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"tableHeader\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    content: \"block+\",\n    addAttributes () {\n        return {\n            colspan: {\n                default: 1\n            },\n            rowspan: {\n                default: 1\n            },\n            colwidth: {\n                default: null,\n                parseHTML: (element)=>{\n                    const colwidth = element.getAttribute(\"colwidth\");\n                    const value = colwidth ? [\n                        parseInt(colwidth, 10)\n                    ] : null;\n                    return value;\n                }\n            }\n        };\n    },\n    tableRole: \"header_cell\",\n    isolating: true,\n    parseHTML () {\n        return [\n            {\n                tag: \"th\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"th\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGFibGUtaGVhZGVyL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELE1BQU1FLGNBQWNGLDhDQUFJQSxDQUFDRyxNQUFNLENBQUM7SUFDNUJDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUMsU0FBUztJQUNUQztRQUNJLE9BQU87WUFDSEMsU0FBUztnQkFDTEMsU0FBUztZQUNiO1lBQ0FDLFNBQVM7Z0JBQ0xELFNBQVM7WUFDYjtZQUNBRSxVQUFVO2dCQUNORixTQUFTO2dCQUNURyxXQUFXQyxDQUFBQTtvQkFDUCxNQUFNRixXQUFXRSxRQUFRQyxZQUFZLENBQUM7b0JBQ3RDLE1BQU1DLFFBQVFKLFdBQ1I7d0JBQUNLLFNBQVNMLFVBQVU7cUJBQUksR0FDeEI7b0JBQ04sT0FBT0k7Z0JBQ1g7WUFDSjtRQUNKO0lBQ0o7SUFDQUUsV0FBVztJQUNYQyxXQUFXO0lBQ1hOO1FBQ0ksT0FBTztZQUNIO2dCQUFFTyxLQUFLO1lBQUs7U0FDZjtJQUNMO0lBQ0FDLFlBQVcsRUFBRWYsY0FBYyxFQUFFO1FBQ3pCLE9BQU87WUFBQztZQUFNTCw2REFBZUEsQ0FBQyxJQUFJLENBQUNxQixPQUFPLENBQUNoQixjQUFjLEVBQUVBO1lBQWlCO1NBQUU7SUFDbEY7QUFDSjtBQUUrQyxDQUMvQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLXRhYmxlLWhlYWRlci9kaXN0L2luZGV4LmpzP2M4OWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm9kZSwgbWVyZ2VBdHRyaWJ1dGVzIH0gZnJvbSAnQHRpcHRhcC9jb3JlJztcblxuY29uc3QgVGFibGVIZWFkZXIgPSBOb2RlLmNyZWF0ZSh7XHJcbiAgICBuYW1lOiAndGFibGVIZWFkZXInLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBjb250ZW50OiAnYmxvY2srJyxcclxuICAgIGFkZEF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY29sc3Bhbjoge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogMSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcm93c3Bhbjoge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogMSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29sd2lkdGg6IHtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBwYXJzZUhUTUw6IGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbHdpZHRoID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NvbHdpZHRoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBjb2x3aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IFtwYXJzZUludChjb2x3aWR0aCwgMTApXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIHRhYmxlUm9sZTogJ2hlYWRlcl9jZWxsJyxcclxuICAgIGlzb2xhdGluZzogdHJ1ZSxcclxuICAgIHBhcnNlSFRNTCgpIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICB7IHRhZzogJ3RoJyB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWyd0aCcsIG1lcmdlQXR0cmlidXRlcyh0aGlzLm9wdGlvbnMuSFRNTEF0dHJpYnV0ZXMsIEhUTUxBdHRyaWJ1dGVzKSwgMF07XHJcbiAgICB9LFxyXG59KTtcblxuZXhwb3J0IHsgVGFibGVIZWFkZXIsIFRhYmxlSGVhZGVyIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk5vZGUiLCJtZXJnZUF0dHJpYnV0ZXMiLCJUYWJsZUhlYWRlciIsImNyZWF0ZSIsIm5hbWUiLCJhZGRPcHRpb25zIiwiSFRNTEF0dHJpYnV0ZXMiLCJjb250ZW50IiwiYWRkQXR0cmlidXRlcyIsImNvbHNwYW4iLCJkZWZhdWx0Iiwicm93c3BhbiIsImNvbHdpZHRoIiwicGFyc2VIVE1MIiwiZWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInZhbHVlIiwicGFyc2VJbnQiLCJ0YWJsZVJvbGUiLCJpc29sYXRpbmciLCJ0YWciLCJyZW5kZXJIVE1MIiwib3B0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-table-header/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-table-row/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-table-row/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TableRow: () => (/* binding */ TableRow),\n/* harmony export */   \"default\": () => (/* binding */ TableRow)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst TableRow = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"tableRow\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    content: \"(tableCell | tableHeader)*\",\n    tableRole: \"row\",\n    parseHTML () {\n        return [\n            {\n                tag: \"tr\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"tr\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGFibGUtcm93L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELE1BQU1FLFdBQVdGLDhDQUFJQSxDQUFDRyxNQUFNLENBQUM7SUFDekJDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUMsU0FBUztJQUNUQyxXQUFXO0lBQ1hDO1FBQ0ksT0FBTztZQUNIO2dCQUFFQyxLQUFLO1lBQUs7U0FDZjtJQUNMO0lBQ0FDLFlBQVcsRUFBRUwsY0FBYyxFQUFFO1FBQ3pCLE9BQU87WUFBQztZQUFNTCw2REFBZUEsQ0FBQyxJQUFJLENBQUNXLE9BQU8sQ0FBQ04sY0FBYyxFQUFFQTtZQUFpQjtTQUFFO0lBQ2xGO0FBQ0o7QUFFeUMsQ0FDekMsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Utam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi10YWJsZS1yb3cvZGlzdC9pbmRleC5qcz8wMTBiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUsIG1lcmdlQXR0cmlidXRlcyB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IFRhYmxlUm93ID0gTm9kZS5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ3RhYmxlUm93JyxcclxuICAgIGFkZE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgSFRNTEF0dHJpYnV0ZXM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG4gICAgY29udGVudDogJyh0YWJsZUNlbGwgfCB0YWJsZUhlYWRlcikqJyxcclxuICAgIHRhYmxlUm9sZTogJ3JvdycsXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgeyB0YWc6ICd0cicgfSxcclxuICAgICAgICBdO1xyXG4gICAgfSxcclxuICAgIHJlbmRlckhUTUwoeyBIVE1MQXR0cmlidXRlcyB9KSB7XHJcbiAgICAgICAgcmV0dXJuIFsndHInLCBtZXJnZUF0dHJpYnV0ZXModGhpcy5vcHRpb25zLkhUTUxBdHRyaWJ1dGVzLCBIVE1MQXR0cmlidXRlcyksIDBdO1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IFRhYmxlUm93LCBUYWJsZVJvdyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwibWVyZ2VBdHRyaWJ1dGVzIiwiVGFibGVSb3ciLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwiY29udGVudCIsInRhYmxlUm9sZSIsInBhcnNlSFRNTCIsInRhZyIsInJlbmRlckhUTUwiLCJvcHRpb25zIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-table-row/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-text/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/extension-text/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Text: () => (/* binding */ Text),\n/* harmony export */   \"default\": () => (/* binding */ Text)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst Text = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Node.create({\n    name: \"text\",\n    group: \"inline\"\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdGV4dC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFvQztBQUVwQyxNQUFNQyxPQUFPRCw4Q0FBSUEsQ0FBQ0UsTUFBTSxDQUFDO0lBQ3JCQyxNQUFNO0lBQ05DLE9BQU87QUFDWDtBQUVpQyxDQUNqQyxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvZXh0ZW5zaW9uLXRleHQvZGlzdC9pbmRleC5qcz85ZTQ0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5vZGUgfSBmcm9tICdAdGlwdGFwL2NvcmUnO1xuXG5jb25zdCBUZXh0ID0gTm9kZS5jcmVhdGUoe1xyXG4gICAgbmFtZTogJ3RleHQnLFxyXG4gICAgZ3JvdXA6ICdpbmxpbmUnLFxyXG59KTtcblxuZXhwb3J0IHsgVGV4dCwgVGV4dCBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6WyJOb2RlIiwiVGV4dCIsImNyZWF0ZSIsIm5hbWUiLCJncm91cCIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/extension-underline/dist/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tiptap/extension-underline/dist/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Underline: () => (/* binding */ Underline),\n/* harmony export */   \"default\": () => (/* binding */ Underline)\n/* harmony export */ });\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n\nconst Underline = _tiptap_core__WEBPACK_IMPORTED_MODULE_0__.Mark.create({\n    name: \"underline\",\n    addOptions () {\n        return {\n            HTMLAttributes: {}\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"u\"\n            },\n            {\n                style: \"text-decoration\",\n                consuming: false,\n                getAttrs: (style)=>style.includes(\"underline\") ? {} : false\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes }) {\n        return [\n            \"u\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_0__.mergeAttributes)(this.options.HTMLAttributes, HTMLAttributes),\n            0\n        ];\n    },\n    addCommands () {\n        return {\n            setUnderline: ()=>({ commands })=>{\n                    return commands.setMark(this.name);\n                },\n            toggleUnderline: ()=>({ commands })=>{\n                    return commands.toggleMark(this.name);\n                },\n            unsetUnderline: ()=>({ commands })=>{\n                    return commands.unsetMark(this.name);\n                }\n        };\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-u\": ()=>this.editor.commands.toggleUnderline(),\n            \"Mod-U\": ()=>this.editor.commands.toggleUnderline()\n        };\n    }\n});\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9leHRlbnNpb24tdW5kZXJsaW5lL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXFEO0FBRXJELE1BQU1FLFlBQVlGLDhDQUFJQSxDQUFDRyxNQUFNLENBQUM7SUFDMUJDLE1BQU07SUFDTkM7UUFDSSxPQUFPO1lBQ0hDLGdCQUFnQixDQUFDO1FBQ3JCO0lBQ0o7SUFDQUM7UUFDSSxPQUFPO1lBQ0g7Z0JBQ0lDLEtBQUs7WUFDVDtZQUNBO2dCQUNJQyxPQUFPO2dCQUNQQyxXQUFXO2dCQUNYQyxVQUFVRixDQUFBQSxRQUFVQSxNQUFNRyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUk7WUFDM0Q7U0FDSDtJQUNMO0lBQ0FDLFlBQVcsRUFBRVAsY0FBYyxFQUFFO1FBQ3pCLE9BQU87WUFBQztZQUFLTCw2REFBZUEsQ0FBQyxJQUFJLENBQUNhLE9BQU8sQ0FBQ1IsY0FBYyxFQUFFQTtZQUFpQjtTQUFFO0lBQ2pGO0lBQ0FTO1FBQ0ksT0FBTztZQUNIQyxjQUFjLElBQU0sQ0FBQyxFQUFFQyxRQUFRLEVBQUU7b0JBQzdCLE9BQU9BLFNBQVNDLE9BQU8sQ0FBQyxJQUFJLENBQUNkLElBQUk7Z0JBQ3JDO1lBQ0FlLGlCQUFpQixJQUFNLENBQUMsRUFBRUYsUUFBUSxFQUFFO29CQUNoQyxPQUFPQSxTQUFTRyxVQUFVLENBQUMsSUFBSSxDQUFDaEIsSUFBSTtnQkFDeEM7WUFDQWlCLGdCQUFnQixJQUFNLENBQUMsRUFBRUosUUFBUSxFQUFFO29CQUMvQixPQUFPQSxTQUFTSyxTQUFTLENBQUMsSUFBSSxDQUFDbEIsSUFBSTtnQkFDdkM7UUFDSjtJQUNKO0lBQ0FtQjtRQUNJLE9BQU87WUFDSCxTQUFTLElBQU0sSUFBSSxDQUFDQyxNQUFNLENBQUNQLFFBQVEsQ0FBQ0UsZUFBZTtZQUNuRCxTQUFTLElBQU0sSUFBSSxDQUFDSyxNQUFNLENBQUNQLFFBQVEsQ0FBQ0UsZUFBZTtRQUN2RDtJQUNKO0FBQ0o7QUFFMkMsQ0FDM0MsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Utam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL2V4dGVuc2lvbi11bmRlcmxpbmUvZGlzdC9pbmRleC5qcz8zNjUyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcmssIG1lcmdlQXR0cmlidXRlcyB9IGZyb20gJ0B0aXB0YXAvY29yZSc7XG5cbmNvbnN0IFVuZGVybGluZSA9IE1hcmsuY3JlYXRlKHtcclxuICAgIG5hbWU6ICd1bmRlcmxpbmUnLFxyXG4gICAgYWRkT3B0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBIVE1MQXR0cmlidXRlczoge30sXHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICBwYXJzZUhUTUwoKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGFnOiAndScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHN0eWxlOiAndGV4dC1kZWNvcmF0aW9uJyxcclxuICAgICAgICAgICAgICAgIGNvbnN1bWluZzogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBnZXRBdHRyczogc3R5bGUgPT4gKHN0eWxlLmluY2x1ZGVzKCd1bmRlcmxpbmUnKSA/IHt9IDogZmFsc2UpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9LFxyXG4gICAgcmVuZGVySFRNTCh7IEhUTUxBdHRyaWJ1dGVzIH0pIHtcclxuICAgICAgICByZXR1cm4gWyd1JywgbWVyZ2VBdHRyaWJ1dGVzKHRoaXMub3B0aW9ucy5IVE1MQXR0cmlidXRlcywgSFRNTEF0dHJpYnV0ZXMpLCAwXTtcclxuICAgIH0sXHJcbiAgICBhZGRDb21tYW5kcygpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzZXRVbmRlcmxpbmU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy5zZXRNYXJrKHRoaXMubmFtZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvZ2dsZVVuZGVybGluZTogKCkgPT4gKHsgY29tbWFuZHMgfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLnRvZ2dsZU1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdW5zZXRVbmRlcmxpbmU6ICgpID0+ICh7IGNvbW1hbmRzIH0pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kcy51bnNldE1hcmsodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxuICAgIGFkZEtleWJvYXJkU2hvcnRjdXRzKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICdNb2QtdSc6ICgpID0+IHRoaXMuZWRpdG9yLmNvbW1hbmRzLnRvZ2dsZVVuZGVybGluZSgpLFxyXG4gICAgICAgICAgICAnTW9kLVUnOiAoKSA9PiB0aGlzLmVkaXRvci5jb21tYW5kcy50b2dnbGVVbmRlcmxpbmUoKSxcclxuICAgICAgICB9O1xyXG4gICAgfSxcclxufSk7XG5cbmV4cG9ydCB7IFVuZGVybGluZSwgVW5kZXJsaW5lIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIk1hcmsiLCJtZXJnZUF0dHJpYnV0ZXMiLCJVbmRlcmxpbmUiLCJjcmVhdGUiLCJuYW1lIiwiYWRkT3B0aW9ucyIsIkhUTUxBdHRyaWJ1dGVzIiwicGFyc2VIVE1MIiwidGFnIiwic3R5bGUiLCJjb25zdW1pbmciLCJnZXRBdHRycyIsImluY2x1ZGVzIiwicmVuZGVySFRNTCIsIm9wdGlvbnMiLCJhZGRDb21tYW5kcyIsInNldFVuZGVybGluZSIsImNvbW1hbmRzIiwic2V0TWFyayIsInRvZ2dsZVVuZGVybGluZSIsInRvZ2dsZU1hcmsiLCJ1bnNldFVuZGVybGluZSIsInVuc2V0TWFyayIsImFkZEtleWJvYXJkU2hvcnRjdXRzIiwiZWRpdG9yIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/extension-underline/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@tiptap/pm/commands/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoJoin: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.autoJoin),\n/* harmony export */   baseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.baseKeymap),\n/* harmony export */   chainCommands: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.chainCommands),\n/* harmony export */   createParagraphNear: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.createParagraphNear),\n/* harmony export */   deleteSelection: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.deleteSelection),\n/* harmony export */   exitCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.exitCode),\n/* harmony export */   joinBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinBackward),\n/* harmony export */   joinDown: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinDown),\n/* harmony export */   joinForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinForward),\n/* harmony export */   joinTextblockBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockBackward),\n/* harmony export */   joinTextblockForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinTextblockForward),\n/* harmony export */   joinUp: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.joinUp),\n/* harmony export */   lift: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.lift),\n/* harmony export */   liftEmptyBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.liftEmptyBlock),\n/* harmony export */   macBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.macBaseKeymap),\n/* harmony export */   newlineInCode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.newlineInCode),\n/* harmony export */   pcBaseKeymap: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.pcBaseKeymap),\n/* harmony export */   selectAll: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectAll),\n/* harmony export */   selectNodeBackward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeBackward),\n/* harmony export */   selectNodeForward: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectNodeForward),\n/* harmony export */   selectParentNode: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectParentNode),\n/* harmony export */   selectTextblockEnd: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockEnd),\n/* harmony export */   selectTextblockStart: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.selectTextblockStart),\n/* harmony export */   setBlockType: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.setBlockType),\n/* harmony export */   splitBlock: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlock),\n/* harmony export */   splitBlockAs: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockAs),\n/* harmony export */   splitBlockKeepMarks: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.splitBlockKeepMarks),\n/* harmony export */   toggleMark: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.toggleMark),\n/* harmony export */   wrapIn: () => (/* reexport safe */ prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__.wrapIn)\n/* harmony export */ });\n/* harmony import */ var prosemirror_commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-commands */ \"(ssr)/./node_modules/prosemirror-commands/dist/index.js\");\n// commands/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9jb21tYW5kcy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG9CQUFvQjtBQUNpQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9jb21tYW5kcy9kaXN0L2luZGV4LmpzPzkxMmIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY29tbWFuZHMvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1jb21tYW5kc1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/commands/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@tiptap/pm/dropcursor/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dropCursor: () => (/* reexport safe */ prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_0__.dropCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_dropcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-dropcursor */ \"(ssr)/./node_modules/prosemirror-dropcursor/dist/index.js\");\n// dropcursor/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9kcm9wY3Vyc29yL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxzQkFBc0I7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvcG0vZHJvcGN1cnNvci9kaXN0L2luZGV4LmpzP2JkMzgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZHJvcGN1cnNvci9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLWRyb3BjdXJzb3JcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/dropcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/gapcursor/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.GapCursor),\n/* harmony export */   gapCursor: () => (/* reexport safe */ prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__.gapCursor)\n/* harmony export */ });\n/* harmony import */ var prosemirror_gapcursor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-gapcursor */ \"(ssr)/./node_modules/prosemirror-gapcursor/dist/index.js\");\n// gapcursor/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9nYXBjdXJzb3IvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxxQkFBcUI7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvcG0vZ2FwY3Vyc29yL2Rpc3QvaW5kZXguanM/YzBiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBnYXBjdXJzb3IvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1nYXBjdXJzb3JcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/gapcursor/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/history/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@tiptap/pm/history/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeHistory: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.closeHistory),\n/* harmony export */   history: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.history),\n/* harmony export */   redo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redo),\n/* harmony export */   redoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.redoDepth),\n/* harmony export */   undo: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undo),\n/* harmony export */   undoDepth: () => (/* reexport safe */ prosemirror_history__WEBPACK_IMPORTED_MODULE_0__.undoDepth)\n/* harmony export */ });\n/* harmony import */ var prosemirror_history__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-history */ \"(ssr)/./node_modules/prosemirror-history/dist/index.js\");\n// history/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9oaXN0b3J5L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLG1CQUFtQjtBQUNpQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9oaXN0b3J5L2Rpc3QvaW5kZXguanM/MTY2NiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBoaXN0b3J5L2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3ItaGlzdG9yeVwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/history/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@tiptap/pm/keymap/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   keydownHandler: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keydownHandler),\n/* harmony export */   keymap: () => (/* reexport safe */ prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__.keymap)\n/* harmony export */ });\n/* harmony import */ var prosemirror_keymap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-keymap */ \"(ssr)/./node_modules/prosemirror-keymap/dist/index.js\");\n// keymap/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9rZXltYXAvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxrQkFBa0I7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvcG0va2V5bWFwL2Rpc3QvaW5kZXguanM/NGJlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBrZXltYXAvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1rZXltYXBcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/keymap/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/model/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/model/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContentMatch: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ContentMatch),\n/* harmony export */   DOMParser: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMParser),\n/* harmony export */   DOMSerializer: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.DOMSerializer),\n/* harmony export */   Fragment: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Fragment),\n/* harmony export */   Mark: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Mark),\n/* harmony export */   MarkType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.MarkType),\n/* harmony export */   Node: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Node),\n/* harmony export */   NodeRange: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeRange),\n/* harmony export */   NodeType: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.NodeType),\n/* harmony export */   ReplaceError: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ReplaceError),\n/* harmony export */   ResolvedPos: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.ResolvedPos),\n/* harmony export */   Schema: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Schema),\n/* harmony export */   Slice: () => (/* reexport safe */ prosemirror_model__WEBPACK_IMPORTED_MODULE_0__.Slice)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n// model/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9tb2RlbC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsaUJBQWlCO0FBQ2lCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2Utam91cm5hbC8uL25vZGVfbW9kdWxlcy9AdGlwdGFwL3BtL21vZGVsL2Rpc3QvaW5kZXguanM/YTVhMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtb2RlbC9pbmRleC50c1xuZXhwb3J0ICogZnJvbSBcInByb3NlbWlycm9yLW1vZGVsXCI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/model/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@tiptap/pm/schema-list/dist/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addListNodes: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.addListNodes),\n/* harmony export */   bulletList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.bulletList),\n/* harmony export */   liftListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.liftListItem),\n/* harmony export */   listItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.listItem),\n/* harmony export */   orderedList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.orderedList),\n/* harmony export */   sinkListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.sinkListItem),\n/* harmony export */   splitListItem: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.splitListItem),\n/* harmony export */   wrapInList: () => (/* reexport safe */ prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__.wrapInList)\n/* harmony export */ });\n/* harmony import */ var prosemirror_schema_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-schema-list */ \"(ssr)/./node_modules/prosemirror-schema-list/dist/index.js\");\n// schema-list/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zY2hlbWEtbGlzdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLHVCQUF1QjtBQUNpQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zY2hlbWEtbGlzdC9kaXN0L2luZGV4LmpzPzU0ZTAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc2NoZW1hLWxpc3QvaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci1zY2hlbWEtbGlzdFwiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/schema-list/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/state/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@tiptap/pm/state/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AllSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.AllSelection),\n/* harmony export */   EditorState: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorState),\n/* harmony export */   NodeSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.NodeSelection),\n/* harmony export */   Plugin: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Plugin),\n/* harmony export */   PluginKey: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.PluginKey),\n/* harmony export */   Selection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Selection),\n/* harmony export */   SelectionRange: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.SelectionRange),\n/* harmony export */   TextSelection: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.TextSelection),\n/* harmony export */   Transaction: () => (/* reexport safe */ prosemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction)\n/* harmony export */ });\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n// state/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS9zdGF0ZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxpQkFBaUI7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvcG0vc3RhdGUvZGlzdC9pbmRleC5qcz83MmVmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0YXRlL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/state/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@tiptap/pm/transform/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddMarkStep),\n/* harmony export */   AddNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AddNodeMarkStep),\n/* harmony export */   AttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.AttrStep),\n/* harmony export */   DocAttrStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.DocAttrStep),\n/* harmony export */   MapResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.MapResult),\n/* harmony export */   Mapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Mapping),\n/* harmony export */   RemoveMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveMarkStep),\n/* harmony export */   RemoveNodeMarkStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.RemoveNodeMarkStep),\n/* harmony export */   ReplaceAroundStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceAroundStep),\n/* harmony export */   ReplaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.ReplaceStep),\n/* harmony export */   Step: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Step),\n/* harmony export */   StepMap: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepMap),\n/* harmony export */   StepResult: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.StepResult),\n/* harmony export */   Transform: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.Transform),\n/* harmony export */   TransformError: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.TransformError),\n/* harmony export */   canJoin: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canJoin),\n/* harmony export */   canSplit: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.canSplit),\n/* harmony export */   dropPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.dropPoint),\n/* harmony export */   findWrapping: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.findWrapping),\n/* harmony export */   insertPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.insertPoint),\n/* harmony export */   joinPoint: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.joinPoint),\n/* harmony export */   liftTarget: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.liftTarget),\n/* harmony export */   replaceStep: () => (/* reexport safe */ prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__.replaceStep)\n/* harmony export */ });\n/* harmony import */ var prosemirror_transform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-transform */ \"(ssr)/./node_modules/prosemirror-transform/dist/index.js\");\n// transform/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS90cmFuc2Zvcm0vZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxxQkFBcUI7QUFDaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZS1qb3VybmFsLy4vbm9kZV9tb2R1bGVzL0B0aXB0YXAvcG0vdHJhbnNmb3JtL2Rpc3QvaW5kZXguanM/OGE0ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc2Zvcm0vaW5kZXgudHNcbmV4cG9ydCAqIGZyb20gXCJwcm9zZW1pcnJvci10cmFuc2Zvcm1cIjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/transform/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/pm/view/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@tiptap/pm/view/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Decoration: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.Decoration),\n/* harmony export */   DecorationSet: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.DecorationSet),\n/* harmony export */   EditorView: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView),\n/* harmony export */   __endComposition: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__endComposition),\n/* harmony export */   __parseFromClipboard: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__parseFromClipboard),\n/* harmony export */   __serializeForClipboard: () => (/* reexport safe */ prosemirror_view__WEBPACK_IMPORTED_MODULE_0__.__serializeForClipboard)\n/* harmony export */ });\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n// view/index.ts\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS92aWV3L2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLGdCQUFnQjtBQUNpQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQHRpcHRhcC9wbS92aWV3L2Rpc3QvaW5kZXguanM/NzU5MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB2aWV3L2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwicHJvc2VtaXJyb3Itdmlld1wiO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/pm/view/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tiptap/react/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@tiptap/react/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BubbleMenu: () => (/* binding */ BubbleMenu),\n/* harmony export */   CommandManager: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.CommandManager),\n/* harmony export */   Editor: () => (/* binding */ Editor),\n/* harmony export */   EditorConsumer: () => (/* binding */ EditorConsumer),\n/* harmony export */   EditorContent: () => (/* binding */ EditorContent),\n/* harmony export */   EditorContext: () => (/* binding */ EditorContext),\n/* harmony export */   EditorProvider: () => (/* binding */ EditorProvider),\n/* harmony export */   Extension: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Extension),\n/* harmony export */   FloatingMenu: () => (/* binding */ FloatingMenu),\n/* harmony export */   InputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.InputRule),\n/* harmony export */   Mark: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Mark),\n/* harmony export */   Node: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Node),\n/* harmony export */   NodePos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodePos),\n/* harmony export */   NodeView: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView),\n/* harmony export */   NodeViewContent: () => (/* binding */ NodeViewContent),\n/* harmony export */   NodeViewWrapper: () => (/* binding */ NodeViewWrapper),\n/* harmony export */   PasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.PasteRule),\n/* harmony export */   PureEditorContent: () => (/* binding */ PureEditorContent),\n/* harmony export */   ReactNodeViewRenderer: () => (/* binding */ ReactNodeViewRenderer),\n/* harmony export */   ReactRenderer: () => (/* binding */ ReactRenderer),\n/* harmony export */   Tracker: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Tracker),\n/* harmony export */   callOrReturn: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.callOrReturn),\n/* harmony export */   combineTransactionSteps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.combineTransactionSteps),\n/* harmony export */   createChainableState: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createChainableState),\n/* harmony export */   createDocument: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createDocument),\n/* harmony export */   createNodeFromContent: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createNodeFromContent),\n/* harmony export */   createStyleTag: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.createStyleTag),\n/* harmony export */   defaultBlockAt: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.defaultBlockAt),\n/* harmony export */   deleteProps: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.deleteProps),\n/* harmony export */   elementFromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.elementFromString),\n/* harmony export */   escapeForRegEx: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.escapeForRegEx),\n/* harmony export */   extensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.extensions),\n/* harmony export */   findChildren: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildren),\n/* harmony export */   findChildrenInRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findChildrenInRange),\n/* harmony export */   findDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findDuplicates),\n/* harmony export */   findParentNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNode),\n/* harmony export */   findParentNodeClosestToPos: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.findParentNodeClosestToPos),\n/* harmony export */   fromString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.fromString),\n/* harmony export */   generateHTML: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateHTML),\n/* harmony export */   generateJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateJSON),\n/* harmony export */   generateText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.generateText),\n/* harmony export */   getAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributes),\n/* harmony export */   getAttributesFromExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getAttributesFromExtensions),\n/* harmony export */   getChangedRanges: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getChangedRanges),\n/* harmony export */   getDebugJSON: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getDebugJSON),\n/* harmony export */   getExtensionField: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getExtensionField),\n/* harmony export */   getHTMLFromFragment: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getHTMLFromFragment),\n/* harmony export */   getMarkAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkAttributes),\n/* harmony export */   getMarkRange: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkRange),\n/* harmony export */   getMarkType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarkType),\n/* harmony export */   getMarksBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getMarksBetween),\n/* harmony export */   getNodeAtPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAtPosition),\n/* harmony export */   getNodeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeAttributes),\n/* harmony export */   getNodeType: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getNodeType),\n/* harmony export */   getRenderedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getRenderedAttributes),\n/* harmony export */   getSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchema),\n/* harmony export */   getSchemaByResolvedExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaByResolvedExtensions),\n/* harmony export */   getSchemaTypeByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeByName),\n/* harmony export */   getSchemaTypeNameByName: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSchemaTypeNameByName),\n/* harmony export */   getSplittedAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getSplittedAttributes),\n/* harmony export */   getText: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getText),\n/* harmony export */   getTextBetween: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextBetween),\n/* harmony export */   getTextContentFromNodes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextContentFromNodes),\n/* harmony export */   getTextSerializersFromSchema: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.getTextSerializersFromSchema),\n/* harmony export */   injectExtensionAttributesToParseRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.injectExtensionAttributesToParseRule),\n/* harmony export */   inputRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.inputRulesPlugin),\n/* harmony export */   isActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isActive),\n/* harmony export */   isAtEndOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtEndOfNode),\n/* harmony export */   isAtStartOfNode: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isAtStartOfNode),\n/* harmony export */   isEmptyObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isEmptyObject),\n/* harmony export */   isExtensionRulesEnabled: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isExtensionRulesEnabled),\n/* harmony export */   isFunction: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isFunction),\n/* harmony export */   isList: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isList),\n/* harmony export */   isMacOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMacOS),\n/* harmony export */   isMarkActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isMarkActive),\n/* harmony export */   isNodeActive: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeActive),\n/* harmony export */   isNodeEmpty: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeEmpty),\n/* harmony export */   isNodeSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNodeSelection),\n/* harmony export */   isNumber: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isNumber),\n/* harmony export */   isPlainObject: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isPlainObject),\n/* harmony export */   isRegExp: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isRegExp),\n/* harmony export */   isString: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isString),\n/* harmony export */   isTextSelection: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isTextSelection),\n/* harmony export */   isiOS: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.isiOS),\n/* harmony export */   markInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markInputRule),\n/* harmony export */   markPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.markPasteRule),\n/* harmony export */   mergeAttributes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeAttributes),\n/* harmony export */   mergeDeep: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.mergeDeep),\n/* harmony export */   minMax: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.minMax),\n/* harmony export */   nodeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodeInputRule),\n/* harmony export */   nodePasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.nodePasteRule),\n/* harmony export */   objectIncludes: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.objectIncludes),\n/* harmony export */   pasteRulesPlugin: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.pasteRulesPlugin),\n/* harmony export */   posToDOMRect: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.posToDOMRect),\n/* harmony export */   removeDuplicates: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.removeDuplicates),\n/* harmony export */   resolveFocusPosition: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.resolveFocusPosition),\n/* harmony export */   selectionToInsertionEnd: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.selectionToInsertionEnd),\n/* harmony export */   splitExtensions: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.splitExtensions),\n/* harmony export */   textInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textInputRule),\n/* harmony export */   textPasteRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textPasteRule),\n/* harmony export */   textblockTypeInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.textblockTypeInputRule),\n/* harmony export */   useCurrentEditor: () => (/* binding */ useCurrentEditor),\n/* harmony export */   useEditor: () => (/* binding */ useEditor),\n/* harmony export */   wrappingInputRule: () => (/* reexport safe */ _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.wrappingInputRule)\n/* harmony export */ });\n/* harmony import */ var _tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-bubble-menu */ \"(ssr)/./node_modules/@tiptap/extension-bubble-menu/dist/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var _tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-floating-menu */ \"(ssr)/./node_modules/@tiptap/extension-floating-menu/dist/index.js\");\n\n\n\n\n\n\nconst mergeRefs = (...refs)=>{\n    return (node)=>{\n        refs.forEach((ref)=>{\n            if (typeof ref === \"function\") {\n                ref(node);\n            } else if (ref) {\n                ref.current = node;\n            }\n        });\n    };\n};\nconst Portals = ({ renderers })=>{\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, Object.entries(renderers).map(([key, renderer])=>{\n        return /*#__PURE__*/ react_dom__WEBPACK_IMPORTED_MODULE_1__.createPortal(renderer.reactElement, renderer.element, key);\n    }));\n};\nclass PureEditorContent extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(props){\n        super(props);\n        this.editorContentRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n        this.initialized = false;\n        this.state = {\n            renderers: {}\n        };\n    }\n    componentDidMount() {\n        this.init();\n    }\n    componentDidUpdate() {\n        this.init();\n    }\n    init() {\n        const { editor } = this.props;\n        if (editor && editor.options.element) {\n            if (editor.contentComponent) {\n                return;\n            }\n            const element = this.editorContentRef.current;\n            element.append(...editor.options.element.childNodes);\n            editor.setOptions({\n                element\n            });\n            editor.contentComponent = this;\n            editor.createNodeViews();\n            this.initialized = true;\n        }\n    }\n    maybeFlushSync(fn) {\n        // Avoid calling flushSync until the editor is initialized.\n        // Initialization happens during the componentDidMount or componentDidUpdate\n        // lifecycle methods, and React doesn't allow calling flushSync from inside\n        // a lifecycle method.\n        if (this.initialized) {\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(fn);\n        } else {\n            fn();\n        }\n    }\n    setRenderer(id, renderer) {\n        this.maybeFlushSync(()=>{\n            this.setState(({ renderers })=>({\n                    renderers: {\n                        ...renderers,\n                        [id]: renderer\n                    }\n                }));\n        });\n    }\n    removeRenderer(id) {\n        this.maybeFlushSync(()=>{\n            this.setState(({ renderers })=>{\n                const nextRenderers = {\n                    ...renderers\n                };\n                delete nextRenderers[id];\n                return {\n                    renderers: nextRenderers\n                };\n            });\n        });\n    }\n    componentWillUnmount() {\n        const { editor } = this.props;\n        if (!editor) {\n            return;\n        }\n        this.initialized = false;\n        if (!editor.isDestroyed) {\n            editor.view.setProps({\n                nodeViews: {}\n            });\n        }\n        editor.contentComponent = null;\n        if (!editor.options.element.firstChild) {\n            return;\n        }\n        const newElement = document.createElement(\"div\");\n        newElement.append(...editor.options.element.childNodes);\n        editor.setOptions({\n            element: newElement\n        });\n    }\n    render() {\n        const { editor, innerRef, ...rest } = this.props;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ref: mergeRefs(innerRef, this.editorContentRef),\n            ...rest\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portals, {\n            renderers: this.state.renderers\n        }));\n    }\n}\n// EditorContent should be re-created whenever the Editor instance changes\nconst EditorContentWithKey = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref)=>{\n    const key = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return Math.floor(Math.random() * 0xFFFFFFFF).toString();\n    }, [\n        props.editor\n    ]);\n    // Can't use JSX here because it conflicts with the type definition of Vue's JSX, so use createElement\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PureEditorContent, {\n        key,\n        innerRef: ref,\n        ...props\n    });\n});\nconst EditorContent = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.memo(EditorContentWithKey);\nclass Editor extends _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.Editor {\n    constructor(){\n        super(...arguments);\n        this.contentComponent = null;\n    }\n}\nconst useEditor = (options = {}, deps = [])=>{\n    const editorRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [, forceUpdate] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({});\n    const { onBeforeCreate, onBlur, onCreate, onDestroy, onFocus, onSelectionUpdate, onTransaction, onUpdate } = options;\n    const onBeforeCreateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onBeforeCreate);\n    const onBlurRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onBlur);\n    const onCreateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onCreate);\n    const onDestroyRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onDestroy);\n    const onFocusRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onFocus);\n    const onSelectionUpdateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onSelectionUpdate);\n    const onTransactionRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onTransaction);\n    const onUpdateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(onUpdate);\n    // This effect will handle updating the editor instance\n    // when the event handlers change.\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!editorRef.current) {\n            return;\n        }\n        if (onBeforeCreate) {\n            editorRef.current.off(\"beforeCreate\", onBeforeCreateRef.current);\n            editorRef.current.on(\"beforeCreate\", onBeforeCreate);\n            onBeforeCreateRef.current = onBeforeCreate;\n        }\n        if (onBlur) {\n            editorRef.current.off(\"blur\", onBlurRef.current);\n            editorRef.current.on(\"blur\", onBlur);\n            onBlurRef.current = onBlur;\n        }\n        if (onCreate) {\n            editorRef.current.off(\"create\", onCreateRef.current);\n            editorRef.current.on(\"create\", onCreate);\n            onCreateRef.current = onCreate;\n        }\n        if (onDestroy) {\n            editorRef.current.off(\"destroy\", onDestroyRef.current);\n            editorRef.current.on(\"destroy\", onDestroy);\n            onDestroyRef.current = onDestroy;\n        }\n        if (onFocus) {\n            editorRef.current.off(\"focus\", onFocusRef.current);\n            editorRef.current.on(\"focus\", onFocus);\n            onFocusRef.current = onFocus;\n        }\n        if (onSelectionUpdate) {\n            editorRef.current.off(\"selectionUpdate\", onSelectionUpdateRef.current);\n            editorRef.current.on(\"selectionUpdate\", onSelectionUpdate);\n            onSelectionUpdateRef.current = onSelectionUpdate;\n        }\n        if (onTransaction) {\n            editorRef.current.off(\"transaction\", onTransactionRef.current);\n            editorRef.current.on(\"transaction\", onTransaction);\n            onTransactionRef.current = onTransaction;\n        }\n        if (onUpdate) {\n            editorRef.current.off(\"update\", onUpdateRef.current);\n            editorRef.current.on(\"update\", onUpdate);\n            onUpdateRef.current = onUpdate;\n        }\n    }, [\n        onBeforeCreate,\n        onBlur,\n        onCreate,\n        onDestroy,\n        onFocus,\n        onSelectionUpdate,\n        onTransaction,\n        onUpdate,\n        editorRef.current\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let isMounted = true;\n        editorRef.current = new Editor(options);\n        editorRef.current.on(\"transaction\", ()=>{\n            requestAnimationFrame(()=>{\n                requestAnimationFrame(()=>{\n                    if (isMounted) {\n                        forceUpdate({});\n                    }\n                });\n            });\n        });\n        return ()=>{\n            isMounted = false;\n        };\n    }, deps);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        return ()=>{\n            var _a;\n            return (_a = editorRef.current) === null || _a === void 0 ? void 0 : _a.destroy();\n        };\n    }, []);\n    return editorRef.current;\n};\nconst EditorContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    editor: null\n});\nconst EditorConsumer = EditorContext.Consumer;\nconst useCurrentEditor = ()=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(EditorContext);\nconst EditorProvider = ({ children, slotAfter, slotBefore, ...editorOptions })=>{\n    const editor = useEditor(editorOptions);\n    if (!editor) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContext.Provider, {\n        value: {\n            editor\n        }\n    }, slotBefore, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorConsumer, null, ({ editor: currentEditor })=>/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(EditorContent, {\n            editor: currentEditor\n        })), children, slotAfter);\n};\nconst BubbleMenu = (props)=>{\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { editor: currentEditor } = useCurrentEditor();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a;\n        if (!element) {\n            return;\n        }\n        if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\n            return;\n        }\n        const { pluginKey = \"bubbleMenu\", editor, tippyOptions = {}, updateDelay, shouldShow = null } = props;\n        const menuEditor = editor || currentEditor;\n        if (!menuEditor) {\n            console.warn(\"BubbleMenu component is not rendered inside of an editor component or does not have editor prop.\");\n            return;\n        }\n        const plugin = (0,_tiptap_extension_bubble_menu__WEBPACK_IMPORTED_MODULE_3__.BubbleMenuPlugin)({\n            updateDelay,\n            editor: menuEditor,\n            element,\n            pluginKey,\n            shouldShow,\n            tippyOptions\n        });\n        menuEditor.registerPlugin(plugin);\n        return ()=>menuEditor.unregisterPlugin(pluginKey);\n    }, [\n        props.editor,\n        currentEditor,\n        element\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: setElement,\n        className: props.className,\n        style: {\n            visibility: \"hidden\"\n        }\n    }, props.children);\n};\nconst FloatingMenu = (props)=>{\n    const [element, setElement] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { editor: currentEditor } = useCurrentEditor();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        var _a;\n        if (!element) {\n            return;\n        }\n        if (((_a = props.editor) === null || _a === void 0 ? void 0 : _a.isDestroyed) || (currentEditor === null || currentEditor === void 0 ? void 0 : currentEditor.isDestroyed)) {\n            return;\n        }\n        const { pluginKey = \"floatingMenu\", editor, tippyOptions = {}, shouldShow = null } = props;\n        const menuEditor = editor || currentEditor;\n        if (!menuEditor) {\n            console.warn(\"FloatingMenu component is not rendered inside of an editor component or does not have editor prop.\");\n            return;\n        }\n        const plugin = (0,_tiptap_extension_floating_menu__WEBPACK_IMPORTED_MODULE_4__.FloatingMenuPlugin)({\n            pluginKey,\n            editor: menuEditor,\n            element,\n            tippyOptions,\n            shouldShow\n        });\n        menuEditor.registerPlugin(plugin);\n        return ()=>menuEditor.unregisterPlugin(pluginKey);\n    }, [\n        props.editor,\n        currentEditor,\n        element\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        ref: setElement,\n        className: props.className,\n        style: {\n            visibility: \"hidden\"\n        }\n    }, props.children);\n};\nconst ReactNodeViewContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n    onDragStart: undefined\n});\nconst useReactNodeView = ()=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(ReactNodeViewContext);\nconst NodeViewContent = (props)=>{\n    const Tag = props.as || \"div\";\n    const { nodeViewContentRef } = useReactNodeView();\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, {\n        ...props,\n        ref: nodeViewContentRef,\n        \"data-node-view-content\": \"\",\n        style: {\n            whiteSpace: \"pre-wrap\",\n            ...props.style\n        }\n    });\n};\nconst NodeViewWrapper = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((props, ref)=>{\n    const { onDragStart } = useReactNodeView();\n    const Tag = props.as || \"div\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Tag, {\n        ...props,\n        ref: ref,\n        \"data-node-view-wrapper\": \"\",\n        onDragStart: onDragStart,\n        style: {\n            whiteSpace: \"normal\",\n            ...props.style\n        }\n    });\n});\nfunction isClassComponent(Component) {\n    return !!(typeof Component === \"function\" && Component.prototype && Component.prototype.isReactComponent);\n}\nfunction isForwardRefComponent(Component) {\n    var _a;\n    return !!(typeof Component === \"object\" && ((_a = Component.$$typeof) === null || _a === void 0 ? void 0 : _a.toString()) === \"Symbol(react.forward_ref)\");\n}\nclass ReactRenderer {\n    constructor(component, { editor, props = {}, as = \"div\", className = \"\", attrs }){\n        this.ref = null;\n        this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();\n        this.component = component;\n        this.editor = editor;\n        this.props = props;\n        this.element = document.createElement(as);\n        this.element.classList.add(\"react-renderer\");\n        if (className) {\n            this.element.classList.add(...className.split(\" \"));\n        }\n        if (attrs) {\n            Object.keys(attrs).forEach((key)=>{\n                this.element.setAttribute(key, attrs[key]);\n            });\n        }\n        this.render();\n    }\n    render() {\n        var _a, _b;\n        const Component = this.component;\n        const props = this.props;\n        if (isClassComponent(Component) || isForwardRefComponent(Component)) {\n            props.ref = (ref)=>{\n                this.ref = ref;\n            };\n        }\n        this.reactElement = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n            ...props\n        });\n        (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) === null || _b === void 0 ? void 0 : _b.setRenderer(this.id, this);\n    }\n    updateProps(props = {}) {\n        this.props = {\n            ...this.props,\n            ...props\n        };\n        this.render();\n    }\n    destroy() {\n        var _a, _b;\n        (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) === null || _b === void 0 ? void 0 : _b.removeRenderer(this.id);\n    }\n}\nclass ReactNodeView extends _tiptap_core__WEBPACK_IMPORTED_MODULE_2__.NodeView {\n    mount() {\n        const props = {\n            editor: this.editor,\n            node: this.node,\n            decorations: this.decorations,\n            selected: false,\n            extension: this.extension,\n            getPos: ()=>this.getPos(),\n            updateAttributes: (attributes = {})=>this.updateAttributes(attributes),\n            deleteNode: ()=>this.deleteNode()\n        };\n        if (!this.component.displayName) {\n            const capitalizeFirstChar = (string)=>{\n                return string.charAt(0).toUpperCase() + string.substring(1);\n            };\n            this.component.displayName = capitalizeFirstChar(this.extension.name);\n        }\n        const ReactNodeViewProvider = (componentProps)=>{\n            const Component = this.component;\n            const onDragStart = this.onDragStart.bind(this);\n            const nodeViewContentRef = (element)=>{\n                if (element && this.contentDOMElement && element.firstChild !== this.contentDOMElement) {\n                    element.appendChild(this.contentDOMElement);\n                }\n            };\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ReactNodeViewContext.Provider, {\n                value: {\n                    onDragStart,\n                    nodeViewContentRef\n                }\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component, {\n                ...componentProps\n            })));\n        };\n        ReactNodeViewProvider.displayName = \"ReactNodeView\";\n        if (this.node.isLeaf) {\n            this.contentDOMElement = null;\n        } else if (this.options.contentDOMElementTag) {\n            this.contentDOMElement = document.createElement(this.options.contentDOMElementTag);\n        } else {\n            this.contentDOMElement = document.createElement(this.node.isInline ? \"span\" : \"div\");\n        }\n        if (this.contentDOMElement) {\n            // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari\n            // With this fix it seems to work fine\n            // See: https://github.com/ueberdosis/tiptap/issues/1197\n            this.contentDOMElement.style.whiteSpace = \"inherit\";\n        }\n        let as = this.node.isInline ? \"span\" : \"div\";\n        if (this.options.as) {\n            as = this.options.as;\n        }\n        const { className = \"\" } = this.options;\n        this.handleSelectionUpdate = this.handleSelectionUpdate.bind(this);\n        this.editor.on(\"selectionUpdate\", this.handleSelectionUpdate);\n        this.renderer = new ReactRenderer(ReactNodeViewProvider, {\n            editor: this.editor,\n            props,\n            as,\n            className: `node-${this.node.type.name} ${className}`.trim(),\n            attrs: this.options.attrs\n        });\n    }\n    get dom() {\n        var _a;\n        if (this.renderer.element.firstElementChild && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute(\"data-node-view-wrapper\"))) {\n            throw Error(\"Please use the NodeViewWrapper component for your node view.\");\n        }\n        return this.renderer.element;\n    }\n    get contentDOM() {\n        if (this.node.isLeaf) {\n            return null;\n        }\n        return this.contentDOMElement;\n    }\n    handleSelectionUpdate() {\n        const { from, to } = this.editor.state.selection;\n        if (from <= this.getPos() && to >= this.getPos() + this.node.nodeSize) {\n            if (this.renderer.props.selected) {\n                return;\n            }\n            this.selectNode();\n        } else {\n            if (!this.renderer.props.selected) {\n                return;\n            }\n            this.deselectNode();\n        }\n    }\n    update(node, decorations) {\n        const updateProps = (props)=>{\n            this.renderer.updateProps(props);\n        };\n        if (node.type !== this.node.type) {\n            return false;\n        }\n        if (typeof this.options.update === \"function\") {\n            const oldNode = this.node;\n            const oldDecorations = this.decorations;\n            this.node = node;\n            this.decorations = decorations;\n            return this.options.update({\n                oldNode,\n                oldDecorations,\n                newNode: node,\n                newDecorations: decorations,\n                updateProps: ()=>updateProps({\n                        node,\n                        decorations\n                    })\n            });\n        }\n        if (node === this.node && this.decorations === decorations) {\n            return true;\n        }\n        this.node = node;\n        this.decorations = decorations;\n        updateProps({\n            node,\n            decorations\n        });\n        return true;\n    }\n    selectNode() {\n        this.renderer.updateProps({\n            selected: true\n        });\n        this.renderer.element.classList.add(\"ProseMirror-selectednode\");\n    }\n    deselectNode() {\n        this.renderer.updateProps({\n            selected: false\n        });\n        this.renderer.element.classList.remove(\"ProseMirror-selectednode\");\n    }\n    destroy() {\n        this.renderer.destroy();\n        this.editor.off(\"selectionUpdate\", this.handleSelectionUpdate);\n        this.contentDOMElement = null;\n    }\n}\nfunction ReactNodeViewRenderer(component, options) {\n    return (props)=>{\n        // try to get the parent component\n        // this is important for vue devtools to show the component hierarchy correctly\n        // maybe it’s `undefined` because <editor-content> isn’t rendered yet\n        if (!props.editor.contentComponent) {\n            return {};\n        }\n        return new ReactNodeView(component, props, options);\n    };\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tiptap/react/dist/index.js\n");

/***/ })

};
;