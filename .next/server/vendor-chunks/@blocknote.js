"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@blocknote";
exports.ids = ["vendor-chunks/@blocknote"];
exports.modules = {

/***/ "(ssr)/./node_modules/@blocknote/react/dist/style.css":
/*!******************************************************!*\
  !*** ./node_modules/@blocknote/react/dist/style.css ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"4a6cbeecacc1\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGJsb2Nrbm90ZS9yZWFjdC9kaXN0L3N0eWxlLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlLWpvdXJuYWwvLi9ub2RlX21vZHVsZXMvQGJsb2Nrbm90ZS9yZWFjdC9kaXN0L3N0eWxlLmNzcz8yYmMzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNGE2Y2JlZWNhY2MxXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/react/dist/style.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@blocknote/core/dist/blocknote.js":
/*!********************************************************!*\
  !*** ./node_modules/@blocknote/core/dist/blocknote.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlockNoteEditor: () => (/* binding */ ce),\n/* harmony export */   FormattingToolbarProsemirrorPlugin: () => (/* binding */ no),\n/* harmony export */   FormattingToolbarView: () => (/* binding */ to),\n/* harmony export */   HyperlinkToolbarProsemirrorPlugin: () => (/* binding */ io),\n/* harmony export */   ImageToolbarProsemirrorPlugin: () => (/* binding */ Sn),\n/* harmony export */   ImageToolbarView: () => (/* binding */ vn),\n/* harmony export */   SideMenuProsemirrorPlugin: () => (/* binding */ go),\n/* harmony export */   SideMenuView: () => (/* binding */ mo),\n/* harmony export */   SlashMenuProsemirrorPlugin: () => (/* binding */ co),\n/* harmony export */   TableHandlesProsemirrorPlugin: () => (/* binding */ Eo),\n/* harmony export */   TableHandlesView: () => (/* binding */ So),\n/* harmony export */   UniqueID: () => (/* binding */ Q),\n/* harmony export */   UnreachableCaseError: () => (/* binding */ A),\n/* harmony export */   addIdsToBlock: () => (/* binding */ jo),\n/* harmony export */   addIdsToBlocks: () => (/* binding */ Wo),\n/* harmony export */   addInlineContentAttributes: () => (/* binding */ sn),\n/* harmony export */   addInlineContentKeyboardShortcuts: () => (/* binding */ an),\n/* harmony export */   addStyleAttributes: () => (/* binding */ pn),\n/* harmony export */   blockToNode: () => (/* binding */ O),\n/* harmony export */   camelToDataKebab: () => (/* binding */ it),\n/* harmony export */   contentNodeToInlineContent: () => (/* binding */ kt),\n/* harmony export */   createBlockSpec: () => (/* binding */ rn),\n/* harmony export */   createBlockSpecFromStronglyTypedTiptapNode: () => (/* binding */ et),\n/* harmony export */   createExternalHTMLExporter: () => (/* binding */ st),\n/* harmony export */   createInlineContentSpec: () => (/* binding */ xr),\n/* harmony export */   createInlineContentSpecFromTipTapNode: () => (/* binding */ cn),\n/* harmony export */   createInternalBlockSpec: () => (/* binding */ Jt),\n/* harmony export */   createInternalHTMLSerializer: () => (/* binding */ qt),\n/* harmony export */   createInternalInlineContentSpec: () => (/* binding */ ln),\n/* harmony export */   createInternalStyleSpec: () => (/* binding */ Qt),\n/* harmony export */   createStronglyTypedTiptapNode: () => (/* binding */ W),\n/* harmony export */   createStyleSpec: () => (/* binding */ Br),\n/* harmony export */   createStyleSpecFromTipTapMark: () => (/* binding */ _),\n/* harmony export */   defaultBlockSchema: () => (/* binding */ ne),\n/* harmony export */   defaultBlockSpecs: () => (/* binding */ ee),\n/* harmony export */   defaultInlineContentSchema: () => (/* binding */ Lr),\n/* harmony export */   defaultInlineContentSpecs: () => (/* binding */ re),\n/* harmony export */   defaultProps: () => (/* binding */ B),\n/* harmony export */   defaultStyleSchema: () => (/* binding */ Ir),\n/* harmony export */   defaultStyleSpecs: () => (/* binding */ oe),\n/* harmony export */   formatKeyboardShortcut: () => (/* binding */ Mr),\n/* harmony export */   formattingToolbarPluginKey: () => (/* binding */ eo),\n/* harmony export */   getBlockFromPos: () => (/* binding */ nn),\n/* harmony export */   getBlockNoteExtensions: () => (/* binding */ Fo),\n/* harmony export */   getBlockSchemaFromSpecs: () => (/* binding */ Yt),\n/* harmony export */   getDefaultSlashMenuItems: () => (/* binding */ ko),\n/* harmony export */   getDraggableBlockFromCoords: () => (/* binding */ Et),\n/* harmony export */   getInlineContentParseRules: () => (/* binding */ dn),\n/* harmony export */   getInlineContentSchemaFromSpecs: () => (/* binding */ Zt),\n/* harmony export */   getParseRules: () => (/* binding */ on),\n/* harmony export */   getStyleParseRules: () => (/* binding */ hn),\n/* harmony export */   getStyleSchemaFromSpecs: () => (/* binding */ te),\n/* harmony export */   hyperlinkToolbarPluginKey: () => (/* binding */ ro),\n/* harmony export */   imageToolbarPluginKey: () => (/* binding */ Y),\n/* harmony export */   inheritedProps: () => (/* binding */ Kt),\n/* harmony export */   inlineContentToNodes: () => (/* binding */ bt),\n/* harmony export */   isAppleOS: () => (/* binding */ en),\n/* harmony export */   isLinkInlineContent: () => (/* binding */ Bt),\n/* harmony export */   isPartialLinkInlineContent: () => (/* binding */ Ft),\n/* harmony export */   isStyledTextInlineContent: () => (/* binding */ Z),\n/* harmony export */   mergeCSSClasses: () => (/* binding */ z),\n/* harmony export */   nodeToBlock: () => (/* binding */ M),\n/* harmony export */   nodeToCustomInlineContent: () => (/* binding */ Gt),\n/* harmony export */   partialBlockToBlockForTesting: () => (/* binding */ ue),\n/* harmony export */   partialBlocksToBlocksForTesting: () => (/* binding */ Hr),\n/* harmony export */   propsToAttributes: () => (/* binding */ Xt),\n/* harmony export */   setupSuggestionsMenu: () => (/* binding */ lo),\n/* harmony export */   sideMenuPluginKey: () => (/* binding */ fo),\n/* harmony export */   slashMenuPluginKey: () => (/* binding */ St),\n/* harmony export */   stylePropsToAttributes: () => (/* binding */ un),\n/* harmony export */   tableContentToNodes: () => (/* binding */ Ut),\n/* harmony export */   tableHandlesPluginKey: () => (/* binding */ J),\n/* harmony export */   uploadToTmpFilesDotOrg_DEV_ONLY: () => (/* binding */ Tr),\n/* harmony export */   wrapInBlockStructure: () => (/* binding */ lt)\n/* harmony export */ });\n/* harmony import */ var prosemirror_model__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! prosemirror-model */ \"(ssr)/./node_modules/prosemirror-model/dist/index.js\");\n/* harmony import */ var rehype_parse__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! rehype-parse */ \"(ssr)/./node_modules/rehype-parse/lib/index.js\");\n/* harmony import */ var rehype_stringify__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! rehype-stringify */ \"(ssr)/./node_modules/rehype-stringify/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! unified */ \"(ssr)/./node_modules/unified/lib/index.js\");\n/* harmony import */ var _tiptap_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @tiptap/core */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var prosemirror_state__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! prosemirror-state */ \"(ssr)/./node_modules/prosemirror-state/dist/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! uuid */ \"(ssr)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var hast_util_from_dom__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! hast-util-from-dom */ \"(ssr)/./node_modules/hast-util-from-dom/lib/index.js\");\n/* harmony import */ var _tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @tiptap/extension-bold */ \"(ssr)/./node_modules/@tiptap/extension-bold/dist/index.js\");\n/* harmony import */ var _tiptap_extension_code__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tiptap/extension-code */ \"(ssr)/./node_modules/@tiptap/extension-code/dist/index.js\");\n/* harmony import */ var _tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tiptap/extension-italic */ \"(ssr)/./node_modules/@tiptap/extension-italic/dist/index.js\");\n/* harmony import */ var _tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @tiptap/extension-strike */ \"(ssr)/./node_modules/@tiptap/extension-strike/dist/index.js\");\n/* harmony import */ var _tiptap_extension_underline__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @tiptap/extension-underline */ \"(ssr)/./node_modules/@tiptap/extension-underline/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_cell__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tiptap/extension-table-cell */ \"(ssr)/./node_modules/@tiptap/extension-table-cell/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_header__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tiptap/extension-table-header */ \"(ssr)/./node_modules/@tiptap/extension-table-header/dist/index.js\");\n/* harmony import */ var _tiptap_extension_table_row__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @tiptap/extension-table-row */ \"(ssr)/./node_modules/@tiptap/extension-table-row/dist/index.js\");\n/* harmony import */ var prosemirror_tables__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! prosemirror-tables */ \"(ssr)/./node_modules/prosemirror-tables/dist/index.js\");\n/* harmony import */ var rehype_remark__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! rehype-remark */ \"(ssr)/./node_modules/rehype-remark/lib/index.js\");\n/* harmony import */ var remark_gfm__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\");\n/* harmony import */ var remark_stringify__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! remark-stringify */ \"(ssr)/./node_modules/remark-stringify/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! remark-parse */ \"(ssr)/./node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! remark-rehype */ \"(ssr)/./node_modules/mdast-util-to-hast/lib/handlers/index.js\");\n/* harmony import */ var prosemirror_view__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! prosemirror-view */ \"(ssr)/./node_modules/prosemirror-view/dist/index.js\");\n/* harmony import */ var _tiptap_extension_collaboration__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tiptap/extension-collaboration */ \"(ssr)/./node_modules/@tiptap/extension-collaboration/dist/index.js\");\n/* harmony import */ var _tiptap_extension_collaboration_cursor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tiptap/extension-collaboration-cursor */ \"(ssr)/./node_modules/@tiptap/extension-collaboration-cursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tiptap/extension-dropcursor */ \"(ssr)/./node_modules/@tiptap/extension-dropcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tiptap/extension-gapcursor */ \"(ssr)/./node_modules/@tiptap/extension-gapcursor/dist/index.js\");\n/* harmony import */ var _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tiptap/extension-hard-break */ \"(ssr)/./node_modules/@tiptap/extension-hard-break/dist/index.js\");\n/* harmony import */ var _tiptap_extension_history__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tiptap/extension-history */ \"(ssr)/./node_modules/@tiptap/extension-history/dist/index.js\");\n/* harmony import */ var _tiptap_extension_link__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tiptap/extension-link */ \"(ssr)/./node_modules/@tiptap/extension-link/dist/index.js\");\n/* harmony import */ var _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tiptap/extension-text */ \"(ssr)/./node_modules/@tiptap/extension-text/dist/index.js\");\nvar pe = Object.defineProperty;\nvar he = (n, t, e)=>t in n ? pe(n, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : n[t] = e;\nvar u = (n, t, e)=>(he(n, typeof t != \"symbol\" ? t + \"\" : t, e), e);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Xe(n, t = JSON.stringify) {\n    const e = {};\n    return n.filter((o)=>{\n        const r = t(o);\n        return Object.prototype.hasOwnProperty.call(e, r) ? !1 : e[r] = !0;\n    });\n}\nfunction Je(n) {\n    const t = n.filter((o, r)=>n.indexOf(o) !== r);\n    return Xe(t);\n}\nconst Q = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n    name: \"uniqueID\",\n    // we’ll set a very high priority to make sure this runs first\n    // and is compatible with `appendTransaction` hooks of other extensions\n    priority: 1e4,\n    addOptions () {\n        return {\n            attributeName: \"id\",\n            types: [],\n            generateID: ()=>{\n                if (false) {}\n                return (0,uuid__WEBPACK_IMPORTED_MODULE_18__[\"default\"])();\n            },\n            filterTransaction: null\n        };\n    },\n    addGlobalAttributes () {\n        return [\n            {\n                types: this.options.types,\n                attributes: {\n                    [this.options.attributeName]: {\n                        default: null,\n                        parseHTML: (n)=>n.getAttribute(`data-${this.options.attributeName}`),\n                        renderHTML: (n)=>({\n                                [`data-${this.options.attributeName}`]: n[this.options.attributeName]\n                            })\n                    }\n                }\n            }\n        ];\n    },\n    // check initial content for missing ids\n    // onCreate() {\n    //   // Don’t do this when the collaboration extension is active\n    //   // because this may update the content, so Y.js tries to merge these changes.\n    //   // This leads to empty block nodes.\n    //   // See: https://github.com/ueberdosis/tiptap/issues/2400\n    //   if (\n    //     this.editor.extensionManager.extensions.find(\n    //       (extension) => extension.name === \"collaboration\"\n    //     )\n    //   ) {\n    //     return;\n    //   }\n    //   const { view, state } = this.editor;\n    //   const { tr, doc } = state;\n    //   const { types, attributeName, generateID } = this.options;\n    //   const nodesWithoutId = findChildren(doc, (node) => {\n    //     return (\n    //       types.includes(node.type.name) && node.attrs[attributeName] === null\n    //     );\n    //   });\n    //   nodesWithoutId.forEach(({ node, pos }) => {\n    //     tr.setNodeMarkup(pos, undefined, {\n    //       ...node.attrs,\n    //       [attributeName]: generateID(),\n    //     });\n    //   });\n    //   tr.setMeta(\"addToHistory\", false);\n    //   view.dispatch(tr);\n    // },\n    addProseMirrorPlugins () {\n        let n = null, t = !1;\n        return [\n            new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n                key: new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"uniqueID\"),\n                appendTransaction: (e, o, r)=>{\n                    const i = e.some((f)=>f.docChanged) && !o.doc.eq(r.doc), s = this.options.filterTransaction && e.some((f)=>{\n                        let y, S;\n                        return !(!((S = (y = this.options).filterTransaction) === null || S === void 0) && S.call(y, f));\n                    });\n                    if (!i || s) return;\n                    const { tr: a } = r, { types: l, attributeName: c, generateID: d } = this.options, p = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.combineTransactionSteps)(o.doc, e), { mapping: m } = p;\n                    if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.getChangedRanges)(p).forEach(({ newRange: f })=>{\n                        const y = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.findChildrenInRange)(r.doc, f, (k)=>l.includes(k.type.name)), S = y.map(({ node: k })=>k.attrs[c]).filter((k)=>k !== null), E = Je(S);\n                        y.forEach(({ node: k, pos: g })=>{\n                            let v;\n                            const C = (v = a.doc.nodeAt(g)) === null || v === void 0 ? void 0 : v.attrs[c];\n                            if (C === null) {\n                                const V = o.doc.type.createAndFill().content;\n                                if (o.doc.content.findDiffStart(V) === null) {\n                                    const F = JSON.parse(JSON.stringify(r.doc.toJSON()));\n                                    if (F.content[0].content[0].attrs.id = \"initialBlockId\", JSON.stringify(F.content) === JSON.stringify(V.toJSON())) {\n                                        a.setNodeMarkup(g, void 0, {\n                                            ...k.attrs,\n                                            [c]: \"initialBlockId\"\n                                        });\n                                        return;\n                                    }\n                                }\n                                a.setNodeMarkup(g, void 0, {\n                                    ...k.attrs,\n                                    [c]: d()\n                                });\n                                return;\n                            }\n                            const { deleted: b } = m.invert().mapResult(g);\n                            b && E.includes(C) && a.setNodeMarkup(g, void 0, {\n                                ...k.attrs,\n                                [c]: d()\n                            });\n                        });\n                    }), !!a.steps.length) return a;\n                },\n                // we register a global drag handler to track the current drag source element\n                view (e) {\n                    const o = (r)=>{\n                        let i;\n                        n = !((i = e.dom.parentElement) === null || i === void 0) && i.contains(r.target) ? e.dom.parentElement : null;\n                    };\n                    return window.addEventListener(\"dragstart\", o), {\n                        destroy () {\n                            window.removeEventListener(\"dragstart\", o);\n                        }\n                    };\n                },\n                props: {\n                    // `handleDOMEvents` is called before `transformPasted`\n                    // so we can do some checks before\n                    handleDOMEvents: {\n                        // only create new ids for dropped content while holding `alt`\n                        // or content is dragged from another editor\n                        drop: (e, o)=>{\n                            let r;\n                            return (n !== e.dom.parentElement || ((r = o.dataTransfer) === null || r === void 0 ? void 0 : r.effectAllowed) === \"copy\") && (n = null, t = !0), !1;\n                        },\n                        // always create new ids on pasted content\n                        paste: ()=>(t = !0, !1)\n                    },\n                    // we’ll remove ids for every pasted node\n                    // so we can create a new one within `appendTransaction`\n                    transformPasted: (e)=>{\n                        if (!t) return e;\n                        const { types: o, attributeName: r } = this.options, i = (s)=>{\n                            const a = [];\n                            return s.forEach((l)=>{\n                                if (l.isText) {\n                                    a.push(l);\n                                    return;\n                                }\n                                if (!o.includes(l.type.name)) {\n                                    a.push(l.copy(i(l.content)));\n                                    return;\n                                }\n                                const c = l.type.create({\n                                    ...l.attrs,\n                                    [r]: null\n                                }, i(l.content), l.marks);\n                                a.push(c);\n                            }), prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(a);\n                        };\n                        return t = !1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(i(e.content), e.openStart, e.openEnd);\n                    }\n                }\n            })\n        ];\n    }\n});\nfunction Vt(n) {\n    const t = n.attrs.id, e = n.firstChild, o = e.type, r = n.childCount === 2 ? n.lastChild.childCount : 0;\n    return {\n        id: t,\n        node: n,\n        contentNode: e,\n        contentType: o,\n        numChildBlocks: r\n    };\n}\nfunction w(n, t) {\n    const o = n.nodeSize - 2;\n    if (t <= 1) for(t = 1 + 1; n.resolve(t).parent.type.name !== \"blockContainer\" && t < o;)t++;\n    else if (t >= o) for(t = o - 1; n.resolve(t).parent.type.name !== \"blockContainer\" && t > 1;)t--;\n    n.resolve(t).parent.type.name === \"blockGroup\" && t++;\n    const r = n.resolve(t), i = r.depth;\n    let s = r.node(i), a = i;\n    for(;;){\n        if (a < 0) throw new Error(\"Could not find blockContainer node. This can only happen if the underlying BlockNote schema has been edited.\");\n        if (s.type.name === \"blockContainer\") break;\n        a -= 1, s = r.node(a);\n    }\n    const { id: l, contentNode: c, contentType: d, numChildBlocks: p } = Vt(s), m = r.start(a), h = r.end(a);\n    return {\n        id: l,\n        node: s,\n        contentNode: c,\n        contentType: d,\n        numChildBlocks: p,\n        startPos: m,\n        endPos: h,\n        depth: a\n    };\n}\nfunction Bt(n) {\n    return n.type === \"link\";\n}\nfunction Ft(n) {\n    return typeof n != \"string\" && n.type === \"link\";\n}\nfunction Z(n) {\n    return typeof n != \"string\" && n.type === \"text\";\n}\nclass A extends Error {\n    constructor(t){\n        super(`Unreachable case: ${t}`);\n    }\n}\nfunction It(n, t, e) {\n    const o = [];\n    for (const [r, i] of Object.entries(n.styles)){\n        const s = e[r];\n        if (!s) throw new Error(`style ${r} not found in styleSchema`);\n        if (s.propSchema === \"boolean\") o.push(t.mark(r));\n        else if (s.propSchema === \"string\") o.push(t.mark(r, {\n            stringValue: i\n        }));\n        else throw new A(s.propSchema);\n    }\n    return n.text.split(/(\\n)/g).filter((r)=>r.length > 0).map((r)=>r === `\n` ? t.nodes.hardBreak.create() : t.text(r, o));\n}\nfunction Ye(n, t, e) {\n    const o = t.marks.link.create({\n        href: n.href\n    });\n    return ut(n.content, t, e).map((r)=>{\n        if (r.type.name === \"text\") return r.mark([\n            ...r.marks,\n            o\n        ]);\n        if (r.type.name === \"hardBreak\") return r;\n        throw new Error(\"unexpected node type\");\n    });\n}\nfunction ut(n, t, e) {\n    const o = [];\n    if (typeof n == \"string\") return o.push(...It({\n        type: \"text\",\n        text: n,\n        styles: {}\n    }, t, e)), o;\n    for (const r of n)o.push(...It(r, t, e));\n    return o;\n}\nfunction bt(n, t, e) {\n    const o = [];\n    for (const r of n)typeof r == \"string\" ? o.push(...ut(r, t, e)) : Ft(r) ? o.push(...Ye(r, t, e)) : Z(r) ? o.push(...ut([\n        r\n    ], t, e)) : o.push($t(r, t, e));\n    return o;\n}\nfunction Ut(n, t, e) {\n    const o = [];\n    for (const r of n.rows){\n        const i = [];\n        for (const a of r.cells){\n            let l;\n            if (!a) l = t.nodes.tableParagraph.create({});\n            else if (typeof a == \"string\") l = t.nodes.tableParagraph.create({}, t.text(a));\n            else {\n                const d = bt(a, t, e);\n                l = t.nodes.tableParagraph.create({}, d);\n            }\n            const c = t.nodes.tableCell.create({}, l);\n            i.push(c);\n        }\n        const s = t.nodes.tableRow.create({}, i);\n        o.push(s);\n    }\n    return o;\n}\nfunction $t(n, t, e) {\n    let o, r = n.type;\n    if (r === void 0 && (r = \"paragraph\"), !t.nodes[r]) throw new Error(`node type ${r} not found in schema`);\n    if (!n.content) o = t.nodes[r].create(n.props);\n    else if (typeof n.content == \"string\") o = t.nodes[r].create(n.props, t.text(n.content));\n    else if (Array.isArray(n.content)) {\n        const i = bt(n.content, t, e);\n        o = t.nodes[r].create(n.props, i);\n    } else if (n.content.type === \"tableContent\") {\n        const i = Ut(n.content, t, e);\n        o = t.nodes[r].create(n.props, i);\n    } else throw new A(n.content.type);\n    return o;\n}\nfunction O(n, t, e) {\n    let o = n.id;\n    o === void 0 && (o = Q.options.generateID());\n    const r = $t(n, t, e), i = [];\n    if (n.children) for (const a of n.children)i.push(O(a, t, e));\n    const s = t.nodes.blockGroup.create({}, i);\n    return t.nodes.blockContainer.create({\n        id: o,\n        ...n.props\n    }, i.length > 0 ? [\n        r,\n        s\n    ] : r);\n}\nfunction Ze(n, t, e) {\n    const o = {\n        type: \"tableContent\",\n        rows: []\n    };\n    return n.content.forEach((r)=>{\n        const i = {\n            cells: []\n        };\n        r.content.forEach((s)=>{\n            i.cells.push(kt(s.firstChild, t, e));\n        }), o.rows.push(i);\n    }), o;\n}\nfunction kt(n, t, e) {\n    const o = [];\n    let r;\n    return n.content.forEach((i)=>{\n        if (i.type.name === \"hardBreak\") {\n            if (r) if (Z(r)) r.text += `\n`;\n            else if (Bt(r)) r.content[r.content.length - 1].text += `\n`;\n            else throw new Error(\"unexpected\");\n            else r = {\n                type: \"text\",\n                text: `\n`,\n                styles: {}\n            };\n            return;\n        }\n        if (i.type.name !== \"link\" && i.type.name !== \"text\" && t[i.type.name]) {\n            r && (o.push(r), r = void 0), o.push(Gt(i, t, e));\n            return;\n        }\n        const s = {};\n        let a;\n        for (const l of i.marks)if (l.type.name === \"link\") a = l;\n        else {\n            const c = e[l.type.name];\n            if (!c) throw new Error(`style ${l.type.name} not found in styleSchema`);\n            if (c.propSchema === \"boolean\") s[c.type] = !0;\n            else if (c.propSchema === \"string\") s[c.type] = l.attrs.stringValue;\n            else throw new A(c.propSchema);\n        }\n        r ? Z(r) ? a ? (o.push(r), r = {\n            type: \"link\",\n            href: a.attrs.href,\n            content: [\n                {\n                    type: \"text\",\n                    text: i.textContent,\n                    styles: s\n                }\n            ]\n        }) : JSON.stringify(r.styles) === JSON.stringify(s) ? r.text += i.textContent : (o.push(r), r = {\n            type: \"text\",\n            text: i.textContent,\n            styles: s\n        }) : Bt(r) && (a ? r.href === a.attrs.href ? JSON.stringify(r.content[r.content.length - 1].styles) === JSON.stringify(s) ? r.content[r.content.length - 1].text += i.textContent : r.content.push({\n            type: \"text\",\n            text: i.textContent,\n            styles: s\n        }) : (o.push(r), r = {\n            type: \"link\",\n            href: a.attrs.href,\n            content: [\n                {\n                    type: \"text\",\n                    text: i.textContent,\n                    styles: s\n                }\n            ]\n        }) : (o.push(r), r = {\n            type: \"text\",\n            text: i.textContent,\n            styles: s\n        })) : a ? r = {\n            type: \"link\",\n            href: a.attrs.href,\n            content: [\n                {\n                    type: \"text\",\n                    text: i.textContent,\n                    styles: s\n                }\n            ]\n        } : r = {\n            type: \"text\",\n            text: i.textContent,\n            styles: s\n        };\n    }), r && o.push(r), o;\n}\nfunction Gt(n, t, e) {\n    if (n.type.name === \"text\" || n.type.name === \"link\") throw new Error(\"unexpected\");\n    const o = {}, r = t[n.type.name];\n    for (const [a, l] of Object.entries(n.attrs)){\n        if (!r) throw Error(\"ic node is of an unrecognized type: \" + n.type.name);\n        const c = r.propSchema;\n        a in c && (o[a] = l);\n    }\n    let i;\n    return r.content === \"styled\" ? i = kt(n, t, e) : i = void 0, {\n        type: n.type.name,\n        props: o,\n        content: i\n    };\n}\nfunction M(n, t, e, o, r) {\n    if (n.type.name !== \"blockContainer\") throw Error(\"Node must be of type blockContainer, but is of type\" + n.type.name + \".\");\n    const i = r == null ? void 0 : r.get(n);\n    if (i) return i;\n    const s = Vt(n);\n    let a = s.id;\n    a === null && (a = Q.options.generateID());\n    const l = {};\n    for (const [h, f] of Object.entries({\n        ...n.attrs,\n        ...s.contentNode.attrs\n    })){\n        const y = t[s.contentType.name];\n        if (!y) throw Error(\"Block is of an unrecognized type: \" + s.contentType.name);\n        const S = y.propSchema;\n        h in S && (l[h] = f);\n    }\n    const c = t[s.contentType.name], d = [];\n    for(let h = 0; h < s.numChildBlocks; h++)d.push(M(n.lastChild.child(h), t, e, o, r));\n    let p;\n    if (c.content === \"inline\") p = kt(s.contentNode, e, o);\n    else if (c.content === \"table\") p = Ze(s.contentNode, e, o);\n    else if (c.content === \"none\") p = void 0;\n    else throw new A(c.content);\n    const m = {\n        id: a,\n        type: c.type,\n        props: l,\n        content: p,\n        children: d\n    };\n    return r == null || r.set(n, m), m;\n}\nfunction Qe(n) {\n    return n.document || window.document;\n}\nconst jt = (n, t, e, o, r)=>{\n    if (!e.nodes[n.type.name]) throw new Error(\"Serializer is missing a node type: \" + n.type.name);\n    const { dom: i, contentDOM: s } = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.DOMSerializer.renderSpec(Qe(t), e.nodes[n.type.name](n));\n    if (s) {\n        if (n.isLeaf) throw new RangeError(\"Content hole not allowed in a leaf node spec\");\n        if (n.type.name === \"blockContainer\") {\n            const a = n.childCount > 0 && n.firstChild.type.spec.group === \"blockContent\" ? n.firstChild : void 0, l = n.childCount > 0 && n.lastChild.type.spec.group === \"blockGroup\" ? n.lastChild : void 0;\n            if (a !== void 0) {\n                const c = o.blockImplementations[a.type.name].implementation, p = (r ? c.toExternalHTML : c.toInternalHTML)(M(n, o.blockSchema, o.inlineContentSchema, o.styleSchema, o.blockCache), o);\n                if (p.contentDOM !== void 0) {\n                    if (n.isLeaf) throw new RangeError(\"Content hole not allowed in a leaf node spec\");\n                    p.contentDOM.appendChild(e.serializeFragment(a.content, t));\n                }\n                s.appendChild(p.dom);\n            }\n            l !== void 0 && e.serializeFragment(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(l), t, s);\n        } else e.serializeFragment(n.content, t, s);\n    }\n    return i;\n}, Wt = (n, t)=>{\n    const e = t.serializeFragment(n), o = document.createElement(\"div\");\n    return o.appendChild(e), o.innerHTML;\n};\nfunction tn(n) {\n    const t = /* @__PURE__ */ new Set([\n        ...n.orderedListItemBlockTypes,\n        ...n.unorderedListItemBlockTypes\n    ]), e = (o)=>{\n        var s;\n        if (o.children.length === 1 && ((s = o.children[0].properties) == null ? void 0 : s.dataNodeType) === \"blockGroup\") {\n            const a = o.children[0];\n            o.children.pop(), o.children.push(...a.children);\n        }\n        let r = o.children.length, i;\n        for(let a = 0; a < r; a++){\n            const c = o.children[a].children[0], d = c.children[0], p = c.children.length === 2 ? c.children[1] : null, m = t.has(d.properties.dataContentType), h = m ? n.orderedListItemBlockTypes.has(d.properties.dataContentType) ? \"ol\" : \"ul\" : null;\n            if (p !== null && e(p), i && i.tagName !== h) {\n                o.children.splice(a - i.children.length, i.children.length, i);\n                const f = i.children.length - 1;\n                a -= f, r -= f, i = void 0;\n            }\n            if (m) {\n                i || (i = (0,hast_util_from_dom__WEBPACK_IMPORTED_MODULE_21__.fromDom)(document.createElement(h)));\n                const f = (0,hast_util_from_dom__WEBPACK_IMPORTED_MODULE_21__.fromDom)(document.createElement(\"li\"));\n                f.children.push(d.children[0]), p !== null && f.children.push(...p.children), i.children.push(f);\n            } else if (p !== null) {\n                o.children.splice(a + 1, 0, ...p.children), o.children[a] = d.children[0];\n                const f = p.children.length;\n                a += f, r += f;\n            } else o.children[a] = d.children[0];\n        }\n        i && o.children.splice(r - i.children.length, i.children.length, i);\n    };\n    return e;\n}\nconst st = (n, t)=>{\n    const e = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.DOMSerializer.fromSchema(n);\n    return e.serializeNodeInner = (o, r)=>jt(o, r, e, t, !0), e.exportProseMirrorFragment = (o)=>(0,unified__WEBPACK_IMPORTED_MODULE_22__.unified)().use(rehype_parse__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n            fragment: !0\n        }).use(tn, {\n            orderedListItemBlockTypes: /* @__PURE__ */ new Set([\n                \"numberedListItem\"\n            ]),\n            unorderedListItemBlockTypes: /* @__PURE__ */ new Set([\n                \"bulletListItem\"\n            ])\n        }).use(rehype_stringify__WEBPACK_IMPORTED_MODULE_24__[\"default\"]).processSync(Wt(o, e)).value, e.exportBlocks = (o)=>{\n        const r = o.map((s)=>O(s, n, t.styleSchema)), i = n.nodes.blockGroup.create(null, r);\n        return e.exportProseMirrorFragment(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(i));\n    }, e;\n}, qt = (n, t)=>{\n    const e = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.DOMSerializer.fromSchema(n);\n    return e.serializeNodeInner = (o, r)=>jt(o, r, e, t, !1), e.serializeProseMirrorFragment = (o)=>Wt(o, e), e.serializeBlocks = (o)=>{\n        const r = o.map((s)=>O(s, n, t.styleSchema)), i = n.nodes.blockGroup.create(null, r);\n        return e.serializeProseMirrorFragment(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(i));\n    }, e;\n}, Tr = async (n)=>{\n    const t = new FormData();\n    return t.append(\"file\", n), (await (await fetch(\"https://tmpfiles.org/api/v1/upload\", {\n        method: \"POST\",\n        body: t\n    })).json()).data.url.replace(\"tmpfiles.org/\", \"tmpfiles.org/dl/\");\n}, en = ()=>typeof navigator < \"u\" && (/Mac/.test(navigator.platform) || /AppleWebKit/.test(navigator.userAgent) && /Mobile\\/\\w+/.test(navigator.userAgent));\nfunction Mr(n) {\n    return en() ? n.replace(\"Mod\", \"⌘\") : n.replace(\"Mod\", \"Ctrl\");\n}\nfunction z(...n) {\n    return n.filter((t)=>t).join(\" \");\n}\nfunction tt(n, t, e, o) {\n    const r = document.createElement(\"div\");\n    r.className = z(\"bn-block-content\", e.class), r.setAttribute(\"data-content-type\", n);\n    for (const [s, a] of Object.entries(e))s !== \"class\" && r.setAttribute(s, a);\n    const i = document.createElement(t);\n    i.className = z(\"bn-inline-content\", o.class);\n    for (const [s, a] of Object.entries(o))s !== \"class\" && i.setAttribute(s, a);\n    return r.appendChild(i), {\n        dom: r,\n        contentDOM: i\n    };\n}\nconst Lt = (n, t)=>{\n    const e = O(n, t._tiptapEditor.schema, t.styleSchema).firstChild, o = t._tiptapEditor.schema.nodes[e.type.name].spec.toDOM;\n    if (o === void 0) throw new Error(\"This block has no default HTML serialization as its corresponding TipTap node doesn't implement `renderHTML`.\");\n    const r = o(e);\n    if (typeof r != \"object\" || !(\"dom\" in r)) throw new Error(\"Cannot use this block's default HTML serialization as its corresponding TipTap node's `renderHTML` function does not return an object with the `dom` property.\");\n    return r;\n}, B = {\n    backgroundColor: {\n        default: \"default\"\n    },\n    textColor: {\n        default: \"default\"\n    },\n    textAlignment: {\n        default: \"left\",\n        values: [\n            \"left\",\n            \"center\",\n            \"right\",\n            \"justify\"\n        ]\n    }\n}, Kt = [\n    \"backgroundColor\",\n    \"textColor\"\n];\nfunction it(n) {\n    return \"data-\" + n.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nfunction Xt(n) {\n    const t = {};\n    return Object.entries(n).filter(([e, o])=>!Kt.includes(e)).forEach(([e, o])=>{\n        t[e] = {\n            default: o.default,\n            keepOnSplit: !0,\n            // Props are displayed in kebab-case as HTML attributes. If a prop's\n            // value is the same as its default, we don't display an HTML\n            // attribute for it.\n            parseHTML: (r)=>{\n                const i = r.getAttribute(it(e));\n                if (i === null) return null;\n                if (typeof o.default == \"boolean\") return i === \"true\" ? !0 : i === \"false\" ? !1 : null;\n                if (typeof o.default == \"number\") {\n                    const s = parseFloat(i);\n                    return !Number.isNaN(s) && Number.isFinite(s) ? s : null;\n                }\n                return i;\n            },\n            renderHTML: (r)=>r[e] !== o.default ? {\n                    [it(e)]: r[e]\n                } : {}\n        };\n    }), t;\n}\nfunction nn(n, t, e, o) {\n    if (typeof n == \"boolean\") throw new Error(\"Cannot find node position as getPos is a boolean, not a function.\");\n    const r = n(), s = e.state.doc.resolve(r).node().attrs.id, a = t.getBlock(s);\n    if (a.type !== o) throw new Error(\"Block type does not match\");\n    return a;\n}\nfunction lt(n, t, e, o, r) {\n    const i = document.createElement(\"div\");\n    if (r !== void 0) for (const [s, a] of Object.entries(r))s !== \"class\" && i.setAttribute(s, a);\n    i.className = z(\"bn-block-content\", (r == null ? void 0 : r.class) || \"\"), i.setAttribute(\"data-content-type\", t);\n    for (const [s, a] of Object.entries(e))!Kt.includes(s) && a !== o[s].default && i.setAttribute(it(s), a);\n    return i.appendChild(n.dom), n.contentDOM !== void 0 && (n.contentDOM.className = z(\"bn-inline-content\", n.contentDOM.className), n.contentDOM.setAttribute(\"data-editable\", \"\")), {\n        ...n,\n        dom: i\n    };\n}\nfunction W(n) {\n    return _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create(n);\n}\nfunction Jt(n, t) {\n    return {\n        config: n,\n        implementation: t\n    };\n}\nfunction et(n, t, e) {\n    return Jt({\n        type: n.name,\n        content: n.config.content === \"inline*\" ? \"inline\" : n.config.content === \"tableRow+\" ? \"table\" : \"none\",\n        propSchema: t\n    }, {\n        node: n,\n        requiredExtensions: e,\n        toInternalHTML: Lt,\n        toExternalHTML: Lt\n    });\n}\nfunction Yt(n) {\n    return Object.fromEntries(Object.entries(n).map(([t, e])=>[\n            t,\n            e.config\n        ]));\n}\nfunction on(n, t) {\n    const e = [\n        {\n            tag: \"[data-content-type=\" + n.type + \"]\",\n            contentElement: \"[data-editable]\"\n        }\n    ];\n    return t && e.push({\n        tag: \"*\",\n        getAttrs (o) {\n            if (typeof o == \"string\") return !1;\n            const r = t == null ? void 0 : t(o);\n            return r === void 0 ? !1 : r;\n        }\n    }), e;\n}\nfunction rn(n, t) {\n    const e = W({\n        name: n.type,\n        content: n.content === \"inline\" ? \"inline*\" : \"\",\n        group: \"blockContent\",\n        selectable: !0,\n        addAttributes () {\n            return Xt(n.propSchema);\n        },\n        parseHTML () {\n            return on(n, t.parse);\n        },\n        renderHTML () {\n            const o = document.createElement(\"div\");\n            return o.setAttribute(\"data-tmp-placeholder\", \"true\"), {\n                dom: o\n            };\n        },\n        addNodeView () {\n            return ({ getPos: o })=>{\n                var l;\n                const r = this.options.editor, i = nn(o, r, this.editor, n.type), s = ((l = this.options.domAttributes) == null ? void 0 : l.blockContent) || {}, a = t.render(i, r);\n                return lt(a, i.type, i.props, n.propSchema, s);\n            };\n        }\n    });\n    if (e.name !== n.type) throw new Error(\"Node name does not match block type. This is a bug in BlockNote.\");\n    return Jt(n, {\n        node: e,\n        toInternalHTML: (o, r)=>{\n            var a;\n            const i = ((a = e.options.domAttributes) == null ? void 0 : a.blockContent) || {}, s = t.render(o, r);\n            return lt(s, o.type, o.props, n.propSchema, i);\n        },\n        toExternalHTML: (o, r)=>{\n            var a, l;\n            const i = ((a = e.options.domAttributes) == null ? void 0 : a.blockContent) || {};\n            let s = (l = t.toExternalHTML) == null ? void 0 : l.call(t, o, r);\n            return s === void 0 && (s = t.render(o, r)), lt(s, o.type, o.props, n.propSchema, i);\n        }\n    });\n}\nfunction sn(n, t, e, o) {\n    return n.dom.setAttribute(\"data-inline-content-type\", t), Object.entries(e).filter(([r, i])=>i !== o[r].default).map(([r, i])=>[\n            it(r),\n            i\n        ]).forEach(([r, i])=>n.dom.setAttribute(r, i)), n.contentDOM !== void 0 && n.contentDOM.setAttribute(\"data-editable\", \"\"), n;\n}\nfunction an(n) {\n    return {\n        Backspace: ({ editor: t })=>{\n            const e = t.state.selection.$from;\n            return t.state.selection.empty && e.node().type.name === n.type && e.parentOffset === 0;\n        }\n    };\n}\nfunction ln(n, t) {\n    return {\n        config: n,\n        implementation: t\n    };\n}\nfunction cn(n, t) {\n    return ln({\n        type: n.name,\n        propSchema: t,\n        content: n.config.content === \"inline*\" ? \"styled\" : \"none\"\n    }, {\n        node: n\n    });\n}\nfunction Zt(n) {\n    return Object.fromEntries(Object.entries(n).map(([t, e])=>[\n            t,\n            e.config\n        ]));\n}\nfunction dn(n) {\n    return [\n        {\n            tag: `[data-inline-content-type=\"${n.type}\"]`,\n            contentElement: (t)=>{\n                const e = t;\n                return e.matches(\"[data-editable]\") ? e : e.querySelector(\"[data-editable]\") || e;\n            }\n        }\n    ];\n}\nfunction xr(n, t) {\n    const e = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n        name: n.type,\n        inline: !0,\n        group: \"inline\",\n        selectable: n.content === \"styled\",\n        atom: n.content === \"none\",\n        content: n.content === \"styled\" ? \"inline*\" : \"\",\n        addAttributes () {\n            return Xt(n.propSchema);\n        },\n        addKeyboardShortcuts () {\n            return an(n);\n        },\n        parseHTML () {\n            return dn(n);\n        },\n        renderHTML ({ node: o }) {\n            const r = this.options.editor, i = t.render(Gt(o, r.inlineContentSchema, r.styleSchema));\n            return sn(i, n.type, o.attrs, n.propSchema);\n        }\n    });\n    return cn(e, n.propSchema);\n}\nfunction un(n) {\n    return n === \"boolean\" ? {} : {\n        stringValue: {\n            default: void 0,\n            keepOnSplit: !0,\n            parseHTML: (t)=>t.getAttribute(\"data-value\"),\n            renderHTML: (t)=>t.stringValue !== void 0 ? {\n                    \"data-value\": t.stringValue\n                } : {}\n        }\n    };\n}\nfunction pn(n, t, e, o) {\n    return n.dom.setAttribute(\"data-style-type\", t), o === \"string\" && n.dom.setAttribute(\"data-value\", e), n.contentDOM !== void 0 && n.contentDOM.setAttribute(\"data-editable\", \"\"), n;\n}\nfunction Qt(n, t) {\n    return {\n        config: n,\n        implementation: t\n    };\n}\nfunction _(n, t) {\n    return Qt({\n        type: n.name,\n        propSchema: t\n    }, {\n        mark: n\n    });\n}\nfunction te(n) {\n    return Object.fromEntries(Object.entries(n).map(([t, e])=>[\n            t,\n            e.config\n        ]));\n}\nfunction hn(n) {\n    return [\n        {\n            tag: `[data-style-type=\"${n.type}\"]`,\n            contentElement: (t)=>{\n                const e = t;\n                return e.matches(\"[data-editable]\") ? e : e.querySelector(\"[data-editable]\") || e;\n            }\n        }\n    ];\n}\nfunction Br(n, t) {\n    const e = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Mark.create({\n        name: n.type,\n        addAttributes () {\n            return un(n.propSchema);\n        },\n        parseHTML () {\n            return hn(n);\n        },\n        renderHTML ({ mark: o }) {\n            let r;\n            if (n.propSchema === \"boolean\") r = t.render();\n            else if (n.propSchema === \"string\") r = t.render(o.attrs.stringValue);\n            else throw new A(n.propSchema);\n            return pn(r, n.type, o.attrs.stringValue, n.propSchema);\n        }\n    });\n    return Qt(n, {\n        mark: e\n    });\n}\nconst mn = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Mark.create({\n    name: \"backgroundColor\",\n    addAttributes () {\n        return {\n            stringValue: {\n                default: void 0,\n                parseHTML: (n)=>n.getAttribute(\"data-background-color\"),\n                renderHTML: (n)=>({\n                        \"data-background-color\": n.stringValue\n                    })\n            }\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"span\",\n                getAttrs: (n)=>typeof n == \"string\" ? !1 : n.hasAttribute(\"data-background-color\") ? {\n                        stringValue: n.getAttribute(\"data-background-color\")\n                    } : !1\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        return [\n            \"span\",\n            n,\n            0\n        ];\n    }\n}), fn = _(mn, \"string\"), gn = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Mark.create({\n    name: \"textColor\",\n    addAttributes () {\n        return {\n            stringValue: {\n                default: void 0,\n                parseHTML: (n)=>n.getAttribute(\"data-text-color\"),\n                renderHTML: (n)=>({\n                        \"data-text-color\": n.stringValue\n                    })\n            }\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"span\",\n                getAttrs: (n)=>typeof n == \"string\" ? !1 : n.hasAttribute(\"data-text-color\") ? {\n                        stringValue: n.getAttribute(\"data-text-color\")\n                    } : !1\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        return [\n            \"span\",\n            n,\n            0\n        ];\n    }\n}), bn = _(gn, \"string\"), kn = {\n    ...B,\n    level: {\n        default: 1,\n        values: [\n            1,\n            2,\n            3\n        ]\n    }\n}, yn = W({\n    name: \"heading\",\n    content: \"inline*\",\n    group: \"blockContent\",\n    addAttributes () {\n        return {\n            level: {\n                default: 1,\n                // instead of \"level\" attributes, use \"data-level\"\n                parseHTML: (n)=>{\n                    const t = n.getAttribute(\"data-level\"), e = parseInt(t);\n                    if (isFinite(e)) return e;\n                },\n                renderHTML: (n)=>({\n                        \"data-level\": n.level.toString()\n                    })\n            }\n        };\n    },\n    addInputRules () {\n        return [\n            ...[\n                1,\n                2,\n                3\n            ].map((n)=>new _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.InputRule({\n                    find: new RegExp(`^(#{${n}})\\\\s$`),\n                    handler: ({ state: t, chain: e, range: o })=>{\n                        e().BNUpdateBlock(t.selection.from, {\n                            type: \"heading\",\n                            props: {\n                                level: n\n                            }\n                        }).deleteRange({\n                            from: o.from,\n                            to: o.to\n                        });\n                    }\n                }))\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            \"Mod-Alt-1\": ()=>this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n                    type: \"heading\",\n                    props: {\n                        level: 1\n                    }\n                }),\n            \"Mod-Alt-2\": ()=>this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n                    type: \"heading\",\n                    props: {\n                        level: 2\n                    }\n                }),\n            \"Mod-Alt-3\": ()=>this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n                    type: \"heading\",\n                    props: {\n                        level: 3\n                    }\n                })\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"div[data-content-type=\" + this.name + \"]\",\n                getAttrs: (n)=>typeof n == \"string\" ? !1 : {\n                        level: n.getAttribute(\"data-level\")\n                    }\n            },\n            {\n                tag: \"h1\",\n                attrs: {\n                    level: 1\n                },\n                node: \"heading\"\n            },\n            {\n                tag: \"h2\",\n                attrs: {\n                    level: 2\n                },\n                node: \"heading\"\n            },\n            {\n                tag: \"h3\",\n                attrs: {\n                    level: 3\n                },\n                node: \"heading\"\n            }\n        ];\n    },\n    renderHTML ({ node: n, HTMLAttributes: t }) {\n        var e, o;\n        return tt(this.name, `h${n.attrs.level}`, {\n            ...((e = this.options.domAttributes) == null ? void 0 : e.blockContent) || {},\n            ...t\n        }, ((o = this.options.domAttributes) == null ? void 0 : o.inlineContent) || {});\n    }\n}), wn = et(yn, kn);\nclass q {\n    constructor(){\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        u(this, \"callbacks\", {});\n    }\n    on(t, e) {\n        return this.callbacks[t] || (this.callbacks[t] = []), this.callbacks[t].push(e), ()=>this.off(t, e);\n    }\n    emit(t, ...e) {\n        const o = this.callbacks[t];\n        o && o.forEach((r)=>r.apply(this, e));\n    }\n    off(t, e) {\n        const o = this.callbacks[t];\n        o && (e ? this.callbacks[t] = o.filter((r)=>r !== e) : delete this.callbacks[t]);\n    }\n    removeAllListeners() {\n        this.callbacks = {};\n    }\n}\nclass vn {\n    constructor(t, e, o){\n        u(this, \"imageToolbarState\");\n        u(this, \"updateImageToolbar\");\n        u(this, \"prevWasEditable\", null);\n        u(this, \"mouseDownHandler\", ()=>{\n            var t;\n            (t = this.imageToolbarState) != null && t.show && (this.imageToolbarState.show = !1, this.updateImageToolbar());\n        });\n        // For dragging the whole editor.\n        u(this, \"dragstartHandler\", ()=>{\n            var t;\n            (t = this.imageToolbarState) != null && t.show && (this.imageToolbarState.show = !1, this.updateImageToolbar());\n        });\n        u(this, \"blurHandler\", (t)=>{\n            var o;\n            const e = this.pmView.dom.parentElement;\n            // An element is clicked.\n            t && t.relatedTarget && // Element is inside the editor.\n            (e === t.relatedTarget || e.contains(t.relatedTarget)) || (o = this.imageToolbarState) != null && o.show && (this.imageToolbarState.show = !1, this.updateImageToolbar());\n        });\n        u(this, \"scrollHandler\", ()=>{\n            var t;\n            if ((t = this.imageToolbarState) != null && t.show) {\n                const e = document.querySelector(`[data-node-type=\"blockContainer\"][data-id=\"${this.imageToolbarState.block.id}\"]`);\n                this.imageToolbarState.referencePos = e.getBoundingClientRect(), this.updateImageToolbar();\n            }\n        });\n        this.pluginKey = t, this.pmView = e, this.updateImageToolbar = ()=>{\n            if (!this.imageToolbarState) throw new Error(\"Attempting to update uninitialized image toolbar\");\n            o(this.imageToolbarState);\n        }, e.dom.addEventListener(\"mousedown\", this.mouseDownHandler), e.dom.addEventListener(\"dragstart\", this.dragstartHandler), e.dom.addEventListener(\"blur\", this.blurHandler), document.addEventListener(\"scroll\", this.scrollHandler);\n    }\n    update(t, e) {\n        var r, i;\n        const o = this.pluginKey.getState(t.state);\n        if (!((r = this.imageToolbarState) != null && r.show) && o.block) {\n            const s = document.querySelector(`[data-node-type=\"blockContainer\"][data-id=\"${o.block.id}\"]`);\n            this.imageToolbarState = {\n                show: !0,\n                referencePos: s.getBoundingClientRect(),\n                block: o.block\n            }, this.updateImageToolbar();\n            return;\n        }\n        (!t.state.selection.eq(e.selection) || !t.state.doc.eq(e.doc)) && (i = this.imageToolbarState) != null && i.show && (this.imageToolbarState.show = !1, this.updateImageToolbar());\n    }\n    destroy() {\n        this.pmView.dom.removeEventListener(\"mousedown\", this.mouseDownHandler), this.pmView.dom.removeEventListener(\"dragstart\", this.dragstartHandler), this.pmView.dom.removeEventListener(\"blur\", this.blurHandler), document.removeEventListener(\"scroll\", this.scrollHandler);\n    }\n}\nconst Y = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"ImageToolbarPlugin\");\nclass Sn extends q {\n    constructor(e){\n        super();\n        u(this, \"view\");\n        u(this, \"plugin\");\n        this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n            key: Y,\n            view: (o)=>(this.view = new vn(// editor,\n                Y, o, (r)=>{\n                    this.emit(\"update\", r);\n                }), this.view),\n            state: {\n                init: ()=>({\n                        block: void 0\n                    }),\n                apply: (o)=>{\n                    var i;\n                    return {\n                        block: (i = o.getMeta(Y)) == null ? void 0 : i.block\n                    };\n                }\n            }\n        });\n    }\n    onUpdate(e) {\n        return this.on(\"update\", e);\n    }\n}\nconst En = {\n    textAlignment: B.textAlignment,\n    backgroundColor: B.backgroundColor,\n    // Image url.\n    url: {\n        default: \"\"\n    },\n    // Image caption.\n    caption: {\n        default: \"\"\n    },\n    // Image width in px.\n    width: {\n        default: 512\n    }\n}, Ht = (n)=>{\n    switch(n){\n        case \"left\":\n            return \"flex-start\";\n        case \"center\":\n            return \"center\";\n        case \"right\":\n            return \"flex-end\";\n        default:\n            return \"flex-start\";\n    }\n}, Nt = 64, Cn = (n, t)=>{\n    const e = document.createElement(\"div\");\n    e.className = \"bn-image-block-content-wrapper\", e.style.alignItems = Ht(n.props.textAlignment);\n    const o = document.createElement(\"div\");\n    o.className = \"bn-add-image-button\";\n    const r = document.createElement(\"div\");\n    r.className = \"bn-add-image-button-icon\";\n    const i = document.createElement(\"p\");\n    i.className = \"bn-add-image-button-text\", i.innerText = \"Add Image\";\n    const s = document.createElement(\"div\");\n    s.className = \"bn-image-and-caption-wrapper\";\n    const a = document.createElement(\"div\");\n    a.className = \"bn-image-wrapper\";\n    const l = document.createElement(\"img\");\n    l.className = \"bn-image\", l.src = n.props.url, l.alt = \"placeholder\", l.contentEditable = \"false\", l.draggable = !1, l.style.width = `${Math.min(n.props.width, t.domElement.firstElementChild.clientWidth)}px`;\n    const c = document.createElement(\"div\");\n    c.className = \"bn-image-resize-handle\", c.style.left = \"4px\";\n    const d = document.createElement(\"div\");\n    d.className = \"bn-image-resize-handle\", d.style.right = \"4px\";\n    const p = document.createElement(\"p\");\n    p.className = \"bn-image-caption\", p.innerText = n.props.caption, p.style.padding = n.props.caption ? \"4px\" : \"\";\n    const m = ()=>{\n        var K;\n        const b = ((K = t.getSelection()) == null ? void 0 : K.blocks) || [];\n        [\n            t.getTextCursorPosition().block,\n            ...b\n        ].find((F)=>F.id === n.id) !== void 0 ? (o.style.outline = \"4px solid rgb(100, 160, 255)\", s.style.outline = \"4px solid rgb(100, 160, 255)\") : (o.style.outline = \"\", s.style.outline = \"\");\n    };\n    t.onEditorContentChange(m), t.onEditorSelectionChange(m);\n    let h;\n    const f = (b)=>{\n        if (!h) {\n            !t.isEditable && a.contains(c) && a.contains(d) && (a.removeChild(c), a.removeChild(d));\n            return;\n        }\n        let T;\n        Ht(n.props.textAlignment) === \"center\" ? h.handleUsed === \"left\" ? T = h.initialWidth + (h.initialClientX - b.clientX) * 2 : T = h.initialWidth + (b.clientX - h.initialClientX) * 2 : h.handleUsed === \"left\" ? T = h.initialWidth + h.initialClientX - b.clientX : T = h.initialWidth + b.clientX - h.initialClientX, T < Nt ? l.style.width = `${Nt}px` : T > t.domElement.firstElementChild.clientWidth ? l.style.width = `${t.domElement.firstElementChild.clientWidth}px` : l.style.width = `${T}px`;\n    }, y = (b)=>{\n        (!b.target || !a.contains(b.target) || !t.isEditable) && a.contains(c) && a.contains(d) && (a.removeChild(c), a.removeChild(d)), h && (h = void 0, t.updateBlock(n, {\n            type: \"image\",\n            props: {\n                // Removes \"px\" from the end of the width string and converts to float.\n                width: parseFloat(l.style.width.slice(0, -2))\n            }\n        }));\n    }, S = (b)=>{\n        b.preventDefault();\n    }, E = ()=>{\n        t._tiptapEditor.view.dispatch(t._tiptapEditor.state.tr.setMeta(Y, {\n            block: n\n        }));\n    }, k = ()=>{\n        t.isEditable && (a.appendChild(c), a.appendChild(d));\n    }, g = (b)=>{\n        b.relatedTarget === c || b.relatedTarget === d || h || t.isEditable && a.contains(c) && a.contains(d) && (a.removeChild(c), a.removeChild(d));\n    }, v = (b)=>{\n        b.preventDefault(), a.appendChild(c), a.appendChild(d), h = {\n            handleUsed: \"left\",\n            initialWidth: n.props.width,\n            initialClientX: b.clientX\n        };\n    }, C = (b)=>{\n        b.preventDefault(), a.appendChild(c), a.appendChild(d), h = {\n            handleUsed: \"right\",\n            initialWidth: n.props.width,\n            initialClientX: b.clientX\n        };\n    };\n    return o.appendChild(r), o.appendChild(i), s.appendChild(a), a.appendChild(l), s.appendChild(p), n.props.url === \"\" ? e.appendChild(o) : e.appendChild(s), window.addEventListener(\"mousemove\", f), window.addEventListener(\"mouseup\", y), o.addEventListener(\"mousedown\", S), o.addEventListener(\"click\", E), l.addEventListener(\"mouseenter\", k), l.addEventListener(\"mouseleave\", g), c.addEventListener(\"mousedown\", v), d.addEventListener(\"mousedown\", C), {\n        dom: e,\n        destroy: ()=>{\n            window.removeEventListener(\"mousemove\", f), window.removeEventListener(\"mouseup\", y), o.removeEventListener(\"mousedown\", S), o.removeEventListener(\"click\", E), c.removeEventListener(\"mousedown\", v), d.removeEventListener(\"mousedown\", C);\n        }\n    };\n}, Tn = rn({\n    type: \"image\",\n    propSchema: En,\n    content: \"none\"\n}, {\n    render: Cn,\n    toExternalHTML: (n)=>{\n        if (n.props.url === \"\") {\n            const o = document.createElement(\"p\");\n            return o.innerHTML = \"Add Image\", {\n                dom: o\n            };\n        }\n        const t = document.createElement(\"figure\"), e = document.createElement(\"img\");\n        if (e.src = n.props.url, t.appendChild(e), n.props.caption !== \"\") {\n            const o = document.createElement(\"figcaption\");\n            o.innerHTML = n.props.caption, t.appendChild(o);\n        }\n        return {\n            dom: t\n        };\n    },\n    parse: (n)=>{\n        if (n.tagName === \"FIGURE\") {\n            const t = n.querySelector(\"img\"), e = n.querySelector(\"figcaption\");\n            return {\n                url: (t == null ? void 0 : t.getAttribute(\"src\")) || \"\",\n                caption: (e == null ? void 0 : e.textContent) || (t == null ? void 0 : t.getAttribute(\"alt\")) || void 0\n            };\n        } else if (n.tagName === \"IMG\") return {\n            url: n.getAttribute(\"src\") || \"\",\n            caption: n.getAttribute(\"alt\") || void 0\n        };\n    }\n}), yt = (n)=>{\n    const { node: t, contentType: e } = w(n.state.doc, n.state.selection.from), o = n.state.selection.anchor === n.state.selection.head;\n    return !e.name.endsWith(\"ListItem\") || !o ? !1 : n.commands.first(({ state: r, chain: i, commands: s })=>[\n            ()=>// Changes list item block to a text block if the content is empty.\n                s.command(()=>t.textContent.length === 0 ? s.BNUpdateBlock(r.selection.from, {\n                        type: \"paragraph\",\n                        props: {}\n                    }) : !1),\n            ()=>// Splits the current block, moving content inside that's after the cursor to a new block of the same type\n                // below.\n                s.command(()=>t.textContent.length > 0 ? (i().deleteSelection().BNSplitBlock(r.selection.from, !0).run(), !0) : !1)\n        ]);\n}, Mn = {\n    ...B\n}, xn = W({\n    name: \"bulletListItem\",\n    content: \"inline*\",\n    group: \"blockContent\",\n    addInputRules () {\n        return [\n            // Creates an unordered list when starting with \"-\", \"+\", or \"*\".\n            new _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.InputRule({\n                find: new RegExp(\"^[-+*]\\\\s$\"),\n                handler: ({ state: n, chain: t, range: e })=>{\n                    t().BNUpdateBlock(n.selection.from, {\n                        type: \"bulletListItem\",\n                        props: {}\n                    }).deleteRange({\n                        from: e.from,\n                        to: e.to\n                    });\n                }\n            })\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            Enter: ()=>yt(this.editor),\n            \"Mod-Shift-8\": ()=>this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n                    type: \"bulletListItem\",\n                    props: {}\n                })\n        };\n    },\n    parseHTML () {\n        return [\n            // Case for regular HTML list structure.\n            {\n                tag: \"div[data-content-type=\" + this.name + \"]\"\n            },\n            {\n                tag: \"li\",\n                getAttrs: (n)=>{\n                    if (typeof n == \"string\") return !1;\n                    const t = n.parentElement;\n                    return t === null ? !1 : t.tagName === \"UL\" || t.tagName === \"DIV\" && t.parentElement.tagName === \"UL\" ? {} : !1;\n                },\n                node: \"bulletListItem\"\n            },\n            // Case for BlockNote list structure.\n            {\n                tag: \"p\",\n                getAttrs: (n)=>{\n                    if (typeof n == \"string\") return !1;\n                    const t = n.parentElement;\n                    return t === null ? !1 : t.getAttribute(\"data-content-type\") === \"bulletListItem\" ? {} : !1;\n                },\n                priority: 300,\n                node: \"bulletListItem\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        var t, e;\n        return tt(this.name, // We use a <p> tag, because for <li> tags we'd need a <ul> element to put\n        // them in to be semantically correct, which we can't have due to the\n        // schema.\n        \"p\", {\n            ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n            ...n\n        }, ((e = this.options.domAttributes) == null ? void 0 : e.inlineContent) || {});\n    }\n}), Bn = et(xn, Mn), In = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"numbered-list-indexing\"), Ln = ()=>new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n        key: In,\n        appendTransaction: (n, t, e)=>{\n            const o = e.tr;\n            o.setMeta(\"numberedListIndexing\", !0);\n            let r = !1;\n            return e.doc.descendants((i, s)=>{\n                if (i.type.name === \"blockContainer\" && i.firstChild.type.name === \"numberedListItem\") {\n                    let a = \"1\";\n                    const l = s === 1, c = w(o.doc, s + 1);\n                    if (c === void 0) return;\n                    if (!l) {\n                        const m = w(o.doc, s - 2);\n                        if (m === void 0) return;\n                        if (!(c.depth !== m.depth)) {\n                            const f = m.contentNode;\n                            if (m.contentType.name === \"numberedListItem\") {\n                                const E = f.attrs.index;\n                                a = (parseInt(E) + 1).toString();\n                            }\n                        }\n                    }\n                    c.contentNode.attrs.index !== a && (r = !0, o.setNodeMarkup(s + 1, void 0, {\n                        index: a\n                    }));\n                }\n            }), r ? o : null;\n        }\n    }), Hn = {\n    ...B\n}, Nn = W({\n    name: \"numberedListItem\",\n    content: \"inline*\",\n    group: \"blockContent\",\n    addAttributes () {\n        return {\n            index: {\n                default: null,\n                parseHTML: (n)=>n.getAttribute(\"data-index\"),\n                renderHTML: (n)=>({\n                        \"data-index\": n.index\n                    })\n            }\n        };\n    },\n    addInputRules () {\n        return [\n            // Creates an ordered list when starting with \"1.\".\n            new _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.InputRule({\n                find: new RegExp(\"^1\\\\.\\\\s$\"),\n                handler: ({ state: n, chain: t, range: e })=>{\n                    t().BNUpdateBlock(n.selection.from, {\n                        type: \"numberedListItem\",\n                        props: {}\n                    }).deleteRange({\n                        from: e.from,\n                        to: e.to\n                    });\n                }\n            })\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            Enter: ()=>yt(this.editor),\n            \"Mod-Shift-7\": ()=>this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n                    type: \"numberedListItem\",\n                    props: {}\n                })\n        };\n    },\n    addProseMirrorPlugins () {\n        return [\n            Ln()\n        ];\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"div[data-content-type=\" + this.name + \"]\"\n            },\n            // Case for regular HTML list structure.\n            // (e.g.: when pasting from other apps)\n            {\n                tag: \"li\",\n                getAttrs: (n)=>{\n                    if (typeof n == \"string\") return !1;\n                    const t = n.parentElement;\n                    return t === null ? !1 : t.tagName === \"OL\" || t.tagName === \"DIV\" && t.parentElement.tagName === \"OL\" ? {} : !1;\n                },\n                node: \"numberedListItem\"\n            },\n            // Case for BlockNote list structure.\n            // (e.g.: when pasting from blocknote)\n            {\n                tag: \"p\",\n                getAttrs: (n)=>{\n                    if (typeof n == \"string\") return !1;\n                    const t = n.parentElement;\n                    return t === null ? !1 : t.getAttribute(\"data-content-type\") === \"numberedListItem\" ? {} : !1;\n                },\n                priority: 300,\n                node: \"numberedListItem\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        var t, e;\n        return tt(this.name, // We use a <p> tag, because for <li> tags we'd need an <ol> element to\n        // put them in to be semantically correct, which we can't have due to the\n        // schema.\n        \"p\", {\n            ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n            ...n\n        }, ((e = this.options.domAttributes) == null ? void 0 : e.inlineContent) || {});\n    }\n}), An = et(Nn, Hn), Pn = {\n    ...B\n}, Dn = W({\n    name: \"paragraph\",\n    content: \"inline*\",\n    group: \"blockContent\",\n    addKeyboardShortcuts () {\n        return {\n            Enter: ()=>yt(this.editor),\n            \"Mod-Alt-0\": ()=>this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n                    type: \"paragraph\",\n                    props: {}\n                })\n        };\n    },\n    parseHTML () {\n        return [\n            {\n                tag: \"div[data-content-type=\" + this.name + \"]\"\n            },\n            {\n                tag: \"p\",\n                priority: 200,\n                node: \"paragraph\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        var t, e;\n        return tt(this.name, \"p\", {\n            ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n            ...n\n        }, ((e = this.options.domAttributes) == null ? void 0 : e.inlineContent) || {});\n    }\n}), On = et(Dn, Pn), _n = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n    name: \"BlockNoteTableExtension\",\n    addProseMirrorPlugins: ()=>[\n            (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_8__.columnResizing)({\n                cellMinWidth: 100\n            }),\n            (0,prosemirror_tables__WEBPACK_IMPORTED_MODULE_8__.tableEditing)()\n        ],\n    addKeyboardShortcuts () {\n        return {\n            // Makes enter create a new line within the cell.\n            Enter: ()=>this.editor.state.selection.empty && this.editor.state.selection.$head.parent.type.name === \"tableParagraph\" ? (this.editor.commands.setHardBreak(), !0) : !1,\n            // Ensures that backspace won't delete the table if the text cursor is at\n            // the start of a cell and the selection is empty.\n            Backspace: ()=>{\n                const n = this.editor.state.selection, t = n.empty, e = n.$head.parentOffset === 0, o = n.$head.node().type.name === \"tableParagraph\";\n                return t && e && o;\n            }\n        };\n    },\n    extendNodeSchema (n) {\n        const t = {\n            name: n.name,\n            options: n.options,\n            storage: n.storage\n        };\n        return {\n            tableRole: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.callOrReturn)((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.getExtensionField)(n, \"tableRole\", t))\n        };\n    }\n}), Rn = {\n    ...B\n}, zn = W({\n    name: \"table\",\n    content: \"tableRow+\",\n    group: \"blockContent\",\n    tableRole: \"table\",\n    isolating: !0,\n    parseHTML () {\n        return [\n            {\n                tag: \"table\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        var t, e;\n        return tt(this.name, \"table\", {\n            ...((t = this.options.domAttributes) == null ? void 0 : t.blockContent) || {},\n            ...n\n        }, ((e = this.options.domAttributes) == null ? void 0 : e.inlineContent) || {});\n    }\n}), Vn = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n    name: \"tableParagraph\",\n    group: \"tableContent\",\n    content: \"inline*\",\n    parseHTML () {\n        return [\n            {\n                tag: \"p\"\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        return [\n            \"p\",\n            (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.mergeAttributes)(this.options.HTMLAttributes, n),\n            0\n        ];\n    }\n}), Fn = et(zn, Rn, [\n    _n,\n    Vn,\n    _tiptap_extension_table_header__WEBPACK_IMPORTED_MODULE_6__.TableHeader.extend({\n        content: \"tableContent\"\n    }),\n    _tiptap_extension_table_cell__WEBPACK_IMPORTED_MODULE_5__.TableCell.extend({\n        content: \"tableContent\"\n    }),\n    _tiptap_extension_table_row__WEBPACK_IMPORTED_MODULE_7__.TableRow\n]), ee = {\n    paragraph: On,\n    heading: wn,\n    bulletListItem: Bn,\n    numberedListItem: An,\n    image: Tn,\n    table: Fn\n}, ne = Yt(ee), oe = {\n    bold: _(_tiptap_extension_bold__WEBPACK_IMPORTED_MODULE_0__[\"default\"], \"boolean\"),\n    italic: _(_tiptap_extension_italic__WEBPACK_IMPORTED_MODULE_2__[\"default\"], \"boolean\"),\n    underline: _(_tiptap_extension_underline__WEBPACK_IMPORTED_MODULE_4__[\"default\"], \"boolean\"),\n    strike: _(_tiptap_extension_strike__WEBPACK_IMPORTED_MODULE_3__[\"default\"], \"boolean\"),\n    code: _(_tiptap_extension_code__WEBPACK_IMPORTED_MODULE_1__[\"default\"], \"boolean\"),\n    textColor: bn,\n    backgroundColor: fn\n}, Ir = te(oe), re = {\n    text: {\n        config: \"text\",\n        implementation: {}\n    },\n    link: {\n        config: \"link\",\n        implementation: {}\n    }\n}, Lr = Zt(re);\nfunction wt(n, t) {\n    let e, o;\n    if (t.firstChild.descendants((r, i)=>e ? !1 : r.type.name !== \"blockContainer\" || r.attrs.id !== n ? !0 : (e = r, o = i + 1, !1)), e === void 0 || o === void 0) throw Error(\"Could not find block in the editor with matching ID.\");\n    return {\n        node: e,\n        posBeforeNode: o\n    };\n}\nfunction Un(n, t, e = \"before\", o) {\n    const r = o._tiptapEditor, i = typeof t == \"string\" ? t : t.id, s = [];\n    for (const d of n)s.push(O(d, r.schema, o.styleSchema));\n    const { node: a, posBeforeNode: l } = wt(i, r.state.doc);\n    if (e === \"before\" && r.view.dispatch(r.state.tr.insert(l, s)), e === \"after\" && r.view.dispatch(r.state.tr.insert(l + a.nodeSize, s)), e === \"nested\" && a.childCount < 2) {\n        const d = r.state.schema.nodes.blockGroup.create({}, s);\n        r.view.dispatch(r.state.tr.insert(l + a.firstChild.nodeSize + 1, d));\n    }\n    const c = [];\n    for (const d of s)c.push(M(d, o.blockSchema, o.inlineContentSchema, o.styleSchema, o.blockCache));\n    return c;\n}\nfunction $n(n, t, e) {\n    const o = e._tiptapEditor, r = typeof n == \"string\" ? n : n.id, { posBeforeNode: i } = wt(r, o.state.doc);\n    o.commands.BNUpdateBlock(i + 1, t);\n    const s = o.state.doc.resolve(i + 1).node();\n    return M(s, e.blockSchema, e.inlineContentSchema, e.styleSchema, e.blockCache);\n}\nfunction ie(n, t, e) {\n    const o = t._tiptapEditor, r = o.state.tr, i = new Set(n.map((l)=>typeof l == \"string\" ? l : l.id)), s = [];\n    let a = 0;\n    if (o.state.doc.descendants((l, c)=>{\n        if (i.size === 0) return !1;\n        if (l.type.name !== \"blockContainer\" || !i.has(l.attrs.id)) return !0;\n        s.push(M(l, t.blockSchema, t.inlineContentSchema, t.styleSchema, t.blockCache)), i.delete(l.attrs.id), a = (e == null ? void 0 : e(l, c, r, a)) || a;\n        const d = r.doc.nodeSize;\n        r.delete(c - a - 1, c - a + l.nodeSize + 1);\n        const p = r.doc.nodeSize;\n        return a += d - p, !1;\n    }), i.size > 0) {\n        const l = [\n            ...i\n        ].join(`\n`);\n        throw Error(\"Blocks with the following IDs could not be found in the editor: \" + l);\n    }\n    return o.view.dispatch(r), s;\n}\nfunction Gn(n, t) {\n    return ie(n, t);\n}\nfunction jn(n, t, e) {\n    const o = e._tiptapEditor, r = [];\n    for (const l of t)r.push(O(l, o.schema, e.styleSchema));\n    const i = typeof n[0] == \"string\" ? n[0] : n[0].id, s = ie(n, e, (l, c, d, p)=>{\n        if (l.attrs.id === i) {\n            const m = d.doc.nodeSize;\n            d.insert(c, r);\n            const h = d.doc.nodeSize;\n            return p + m - h;\n        }\n        return p;\n    }), a = [];\n    for (const l of r)a.push(M(l, e.blockSchema, e.inlineContentSchema, e.styleSchema, e.blockCache));\n    return {\n        insertedBlocks: a,\n        removedBlocks: s\n    };\n}\nfunction Wn() {\n    const n = (t)=>{\n        let e = t.children.length;\n        for(let o = 0; o < e; o++){\n            const r = t.children[o];\n            if (r.type === \"element\" && (n(r), r.tagName === \"u\")) if (r.children.length > 0) {\n                t.children.splice(o, 1, ...r.children);\n                const i = r.children.length - 1;\n                e += i, o += i;\n            } else t.children.splice(o, 1), e--, o--;\n        }\n    };\n    return n;\n}\nfunction vt(n) {\n    return (0,unified__WEBPACK_IMPORTED_MODULE_22__.unified)().use(rehype_parse__WEBPACK_IMPORTED_MODULE_23__[\"default\"], {\n        fragment: !0\n    }).use(Wn).use(rehype_remark__WEBPACK_IMPORTED_MODULE_25__[\"default\"]).use(remark_gfm__WEBPACK_IMPORTED_MODULE_26__[\"default\"]).use(remark_stringify__WEBPACK_IMPORTED_MODULE_27__[\"default\"]).processSync(n).value;\n}\nfunction qn(n, t, e) {\n    const r = st(t, e).exportBlocks(n);\n    return vt(r);\n}\nfunction Kn(n) {\n    return Array.prototype.indexOf.call(n.parentElement.childNodes, n);\n}\nfunction Xn(n) {\n    return n.nodeType === 3 && !/\\S/.test(n.nodeValue || \"\");\n}\nfunction Jn(n) {\n    n.querySelectorAll(\"li > ul, li > ol\").forEach((t)=>{\n        const e = Kn(t), o = t.parentElement, r = Array.from(o.childNodes).slice(e + 1);\n        t.remove(), r.forEach((i)=>{\n            i.remove();\n        }), o.insertAdjacentElement(\"afterend\", t), r.reverse().forEach((i)=>{\n            if (Xn(i)) return;\n            const s = document.createElement(\"li\");\n            s.append(i), t.insertAdjacentElement(\"afterend\", s);\n        }), o.childNodes.length === 0 && o.remove();\n    });\n}\nfunction Yn(n) {\n    n.querySelectorAll(\"li + ul, li + ol\").forEach((t)=>{\n        var i, s;\n        const e = t.previousElementSibling, o = document.createElement(\"div\");\n        e.insertAdjacentElement(\"afterend\", o), o.append(e);\n        const r = document.createElement(\"div\");\n        for(r.setAttribute(\"data-node-type\", \"blockGroup\"), o.append(r); ((i = o.nextElementSibling) == null ? void 0 : i.nodeName) === \"UL\" || ((s = o.nextElementSibling) == null ? void 0 : s.nodeName) === \"OL\";)r.append(o.nextElementSibling);\n    });\n}\nfunction se(n) {\n    if (typeof n == \"string\") {\n        const t = document.createElement(\"div\");\n        t.innerHTML = n, n = t;\n    }\n    return Jn(n), Yn(n), n;\n}\nasync function ae(n, t, e, o, r) {\n    const i = se(n), a = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.DOMParser.fromSchema(r).parse(i, {\n        topNode: r.nodes.blockGroup.create()\n    }), l = [];\n    for(let c = 0; c < a.childCount; c++)l.push(M(a.child(c), t, e, o));\n    return l;\n}\nfunction Zn(n, t) {\n    const e = t.value ? t.value + `\n` : \"\", o = {};\n    t.lang && (o[\"data-language\"] = t.lang);\n    let r = {\n        type: \"element\",\n        tagName: \"code\",\n        properties: o,\n        children: [\n            {\n                type: \"text\",\n                value: e\n            }\n        ]\n    };\n    return t.meta && (r.data = {\n        meta: t.meta\n    }), n.patch(t, r), r = n.applyData(t, r), r = {\n        type: \"element\",\n        tagName: \"pre\",\n        properties: {},\n        children: [\n            r\n        ]\n    }, n.patch(t, r), r;\n}\nfunction Qn(n, t, e, o, r) {\n    const i = (0,unified__WEBPACK_IMPORTED_MODULE_22__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_28__[\"default\"]).use(remark_gfm__WEBPACK_IMPORTED_MODULE_26__[\"default\"]).use(remark_rehype__WEBPACK_IMPORTED_MODULE_29__[\"default\"], {\n        handlers: {\n            ...remark_rehype__WEBPACK_IMPORTED_MODULE_30__.handlers,\n            code: Zn\n        }\n    }).use(rehype_stringify__WEBPACK_IMPORTED_MODULE_24__[\"default\"]).processSync(n);\n    return ae(i.value, t, e, o, r);\n}\nclass to {\n    constructor(t, e, o){\n        u(this, \"formattingToolbarState\");\n        u(this, \"updateFormattingToolbar\");\n        u(this, \"preventHide\", !1);\n        u(this, \"preventShow\", !1);\n        u(this, \"prevWasEditable\", null);\n        u(this, \"shouldShow\", ({ state: t })=>!t.selection.empty);\n        u(this, \"viewMousedownHandler\", ()=>{\n            this.preventShow = !0;\n        });\n        u(this, \"viewMouseupHandler\", ()=>{\n            this.preventShow = !1, setTimeout(()=>this.update(this.pmView));\n        });\n        // For dragging the whole editor.\n        u(this, \"dragHandler\", ()=>{\n            var t;\n            (t = this.formattingToolbarState) != null && t.show && (this.formattingToolbarState.show = !1, this.updateFormattingToolbar());\n        });\n        u(this, \"focusHandler\", ()=>{\n            setTimeout(()=>this.update(this.pmView));\n        });\n        u(this, \"blurHandler\", (t)=>{\n            var o;\n            if (this.preventHide) {\n                this.preventHide = !1;\n                return;\n            }\n            const e = this.pmView.dom.parentElement;\n            // An element is clicked.\n            t && t.relatedTarget && // Element is inside the editor.\n            (e === t.relatedTarget || e.contains(t.relatedTarget)) || (o = this.formattingToolbarState) != null && o.show && (this.formattingToolbarState.show = !1, this.updateFormattingToolbar());\n        });\n        u(this, \"scrollHandler\", ()=>{\n            var t;\n            (t = this.formattingToolbarState) != null && t.show && (this.formattingToolbarState.referencePos = this.getSelectionBoundingBox(), this.updateFormattingToolbar());\n        });\n        this.editor = t, this.pmView = e, this.updateFormattingToolbar = ()=>{\n            if (!this.formattingToolbarState) throw new Error(\"Attempting to update uninitialized formatting toolbar\");\n            o(this.formattingToolbarState);\n        }, e.dom.addEventListener(\"mousedown\", this.viewMousedownHandler), e.dom.addEventListener(\"mouseup\", this.viewMouseupHandler), e.dom.addEventListener(\"dragstart\", this.dragHandler), e.dom.addEventListener(\"dragover\", this.dragHandler), e.dom.addEventListener(\"focus\", this.focusHandler), e.dom.addEventListener(\"blur\", this.blurHandler), document.addEventListener(\"scroll\", this.scrollHandler);\n    }\n    update(t, e) {\n        var m, h;\n        const { state: o, composing: r } = t, { doc: i, selection: s } = o, a = e && e.doc.eq(i) && e.selection.eq(s);\n        if ((this.prevWasEditable === null || this.prevWasEditable === this.editor.isEditable) && (r || a)) return;\n        this.prevWasEditable = this.editor.isEditable;\n        const { ranges: l } = s, c = Math.min(...l.map((f)=>f.$from.pos)), d = Math.max(...l.map((f)=>f.$to.pos)), p = (m = this.shouldShow) == null ? void 0 : m.call(this, {\n            view: t,\n            state: o,\n            from: c,\n            to: d\n        });\n        if (this.editor.isEditable && !this.preventShow && (p || this.preventHide)) {\n            this.formattingToolbarState = {\n                show: !0,\n                referencePos: this.getSelectionBoundingBox()\n            }, this.updateFormattingToolbar();\n            return;\n        }\n        if ((h = this.formattingToolbarState) != null && h.show && !this.preventHide && (!p || this.preventShow || !this.editor.isEditable)) {\n            this.formattingToolbarState.show = !1, this.updateFormattingToolbar();\n            return;\n        }\n    }\n    destroy() {\n        this.pmView.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler), this.pmView.dom.removeEventListener(\"mouseup\", this.viewMouseupHandler), this.pmView.dom.removeEventListener(\"dragstart\", this.dragHandler), this.pmView.dom.removeEventListener(\"dragover\", this.dragHandler), this.pmView.dom.removeEventListener(\"focus\", this.focusHandler), this.pmView.dom.removeEventListener(\"blur\", this.blurHandler), document.removeEventListener(\"scroll\", this.scrollHandler);\n    }\n    getSelectionBoundingBox() {\n        const { state: t } = this.pmView, { selection: e } = t, { ranges: o } = e, r = Math.min(...o.map((s)=>s.$from.pos)), i = Math.max(...o.map((s)=>s.$to.pos));\n        if ((0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.isNodeSelection)(e)) {\n            const s = this.pmView.nodeDOM(r);\n            if (s) return s.getBoundingClientRect();\n        }\n        return (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.posToDOMRect)(this.pmView, r, i);\n    }\n}\nconst eo = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"FormattingToolbarPlugin\");\nclass no extends q {\n    constructor(e){\n        super();\n        u(this, \"view\");\n        u(this, \"plugin\");\n        this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n            key: eo,\n            view: (o)=>(this.view = new to(e, o, (r)=>{\n                    this.emit(\"update\", r);\n                }), this.view)\n        });\n    }\n    onUpdate(e) {\n        return this.on(\"update\", e);\n    }\n}\nclass oo {\n    constructor(t, e, o){\n        u(this, \"hyperlinkToolbarState\");\n        u(this, \"updateHyperlinkToolbar\");\n        u(this, \"menuUpdateTimer\");\n        u(this, \"startMenuUpdateTimer\");\n        u(this, \"stopMenuUpdateTimer\");\n        u(this, \"mouseHoveredHyperlinkMark\");\n        u(this, \"mouseHoveredHyperlinkMarkRange\");\n        u(this, \"keyboardHoveredHyperlinkMark\");\n        u(this, \"keyboardHoveredHyperlinkMarkRange\");\n        u(this, \"hyperlinkMark\");\n        u(this, \"hyperlinkMarkRange\");\n        u(this, \"mouseOverHandler\", (t)=>{\n            if (this.mouseHoveredHyperlinkMark = void 0, this.mouseHoveredHyperlinkMarkRange = void 0, this.stopMenuUpdateTimer(), t.target instanceof HTMLAnchorElement && t.target.nodeName === \"A\") {\n                const e = t.target, o = this.pmView.posAtDOM(e, 0) + 1, r = this.pmView.state.doc.resolve(o), i = r.marks();\n                for (const s of i)if (s.type.name === this.pmView.state.schema.mark(\"link\").type.name) {\n                    this.mouseHoveredHyperlinkMark = s, this.mouseHoveredHyperlinkMarkRange = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.getMarkRange)(r, s.type, s.attrs) || void 0;\n                    break;\n                }\n            }\n            return this.startMenuUpdateTimer(), !1;\n        });\n        u(this, \"clickHandler\", (t)=>{\n            var o;\n            const e = this.pmView.dom.parentElement;\n            // Toolbar is open.\n            this.hyperlinkMark && // An element is clicked.\n            t && t.target && // The clicked element is not the editor.\n            !(e === t.target || e.contains(t.target)) && (o = this.hyperlinkToolbarState) != null && o.show && (this.hyperlinkToolbarState.show = !1, this.updateHyperlinkToolbar());\n        });\n        u(this, \"scrollHandler\", ()=>{\n            var t;\n            this.hyperlinkMark !== void 0 && (t = this.hyperlinkToolbarState) != null && t.show && (this.hyperlinkToolbarState.referencePos = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.posToDOMRect)(this.pmView, this.hyperlinkMarkRange.from, this.hyperlinkMarkRange.to), this.updateHyperlinkToolbar());\n        });\n        this.editor = t, this.pmView = e, this.updateHyperlinkToolbar = ()=>{\n            if (!this.hyperlinkToolbarState) throw new Error(\"Attempting to update uninitialized hyperlink toolbar\");\n            o(this.hyperlinkToolbarState);\n        }, this.startMenuUpdateTimer = ()=>{\n            this.menuUpdateTimer = setTimeout(()=>{\n                this.update();\n            }, 250);\n        }, this.stopMenuUpdateTimer = ()=>(this.menuUpdateTimer && (clearTimeout(this.menuUpdateTimer), this.menuUpdateTimer = void 0), !1), this.pmView.dom.addEventListener(\"mouseover\", this.mouseOverHandler), document.addEventListener(\"click\", this.clickHandler, !0), document.addEventListener(\"scroll\", this.scrollHandler);\n    }\n    editHyperlink(t, e) {\n        var r;\n        const o = this.pmView.state.tr.insertText(e, this.hyperlinkMarkRange.from, this.hyperlinkMarkRange.to);\n        o.addMark(this.hyperlinkMarkRange.from, this.hyperlinkMarkRange.from + e.length, this.pmView.state.schema.mark(\"link\", {\n            href: t\n        })), this.pmView.dispatch(o), this.pmView.focus(), (r = this.hyperlinkToolbarState) != null && r.show && (this.hyperlinkToolbarState.show = !1, this.updateHyperlinkToolbar());\n    }\n    deleteHyperlink() {\n        var t;\n        this.pmView.dispatch(this.pmView.state.tr.removeMark(this.hyperlinkMarkRange.from, this.hyperlinkMarkRange.to, this.hyperlinkMark.type).setMeta(\"preventAutolink\", !0)), this.pmView.focus(), (t = this.hyperlinkToolbarState) != null && t.show && (this.hyperlinkToolbarState.show = !1, this.updateHyperlinkToolbar());\n    }\n    update() {\n        var e;\n        if (!this.pmView.hasFocus()) return;\n        const t = this.hyperlinkMark;\n        if (this.hyperlinkMark = void 0, this.hyperlinkMarkRange = void 0, this.keyboardHoveredHyperlinkMark = void 0, this.keyboardHoveredHyperlinkMarkRange = void 0, this.pmView.state.selection.empty) {\n            const o = this.pmView.state.selection.$from.marks();\n            for (const r of o)if (r.type.name === this.pmView.state.schema.mark(\"link\").type.name) {\n                this.keyboardHoveredHyperlinkMark = r, this.keyboardHoveredHyperlinkMarkRange = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.getMarkRange)(this.pmView.state.selection.$from, r.type, r.attrs) || void 0;\n                break;\n            }\n        }\n        if (this.mouseHoveredHyperlinkMark && (this.hyperlinkMark = this.mouseHoveredHyperlinkMark, this.hyperlinkMarkRange = this.mouseHoveredHyperlinkMarkRange), this.keyboardHoveredHyperlinkMark && (this.hyperlinkMark = this.keyboardHoveredHyperlinkMark, this.hyperlinkMarkRange = this.keyboardHoveredHyperlinkMarkRange), this.hyperlinkMark && this.editor.isEditable) {\n            this.hyperlinkToolbarState = {\n                show: !0,\n                referencePos: (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.posToDOMRect)(this.pmView, this.hyperlinkMarkRange.from, this.hyperlinkMarkRange.to),\n                url: this.hyperlinkMark.attrs.href,\n                text: this.pmView.state.doc.textBetween(this.hyperlinkMarkRange.from, this.hyperlinkMarkRange.to)\n            }, this.updateHyperlinkToolbar();\n            return;\n        }\n        if ((e = this.hyperlinkToolbarState) != null && e.show && t && (!this.hyperlinkMark || !this.editor.isEditable)) {\n            this.hyperlinkToolbarState.show = !1, this.updateHyperlinkToolbar();\n            return;\n        }\n    }\n    destroy() {\n        this.pmView.dom.removeEventListener(\"mouseover\", this.mouseOverHandler), document.removeEventListener(\"scroll\", this.scrollHandler), document.removeEventListener(\"click\", this.clickHandler, !0);\n    }\n}\nconst ro = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"HyperlinkToolbarPlugin\");\nclass io extends q {\n    constructor(e){\n        super();\n        u(this, \"view\");\n        u(this, \"plugin\");\n        /**\n     * Edit the currently hovered hyperlink.\n     */ u(this, \"editHyperlink\", (e, o)=>{\n            this.view.editHyperlink(e, o);\n        });\n        /**\n     * Delete the currently hovered hyperlink.\n     */ u(this, \"deleteHyperlink\", ()=>{\n            this.view.deleteHyperlink();\n        });\n        /**\n     * When hovering on/off hyperlinks using the mouse cursor, the hyperlink\n     * toolbar will open & close with a delay.\n     *\n     * This function starts the delay timer, and should be used for when the mouse cursor enters the hyperlink toolbar.\n     */ u(this, \"startHideTimer\", ()=>{\n            this.view.startMenuUpdateTimer();\n        });\n        /**\n     * When hovering on/off hyperlinks using the mouse cursor, the hyperlink\n     * toolbar will open & close with a delay.\n     *\n     * This function stops the delay timer, and should be used for when the mouse cursor exits the hyperlink toolbar.\n     */ u(this, \"stopHideTimer\", ()=>{\n            this.view.stopMenuUpdateTimer();\n        });\n        this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n            key: ro,\n            view: (o)=>(this.view = new oo(e, o, (r)=>{\n                    this.emit(\"update\", r);\n                }), this.view)\n        });\n    }\n    onUpdate(e) {\n        return this.on(\"update\", e);\n    }\n}\nconst so = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.findParentNode)((n)=>n.type.name === \"blockContainer\");\nclass ao {\n    constructor(t, e, o = ()=>{}){\n        u(this, \"suggestionsMenuState\");\n        u(this, \"updateSuggestionsMenu\");\n        u(this, \"pluginState\");\n        u(this, \"handleScroll\", ()=>{\n            var t;\n            if ((t = this.suggestionsMenuState) != null && t.show) {\n                const e = document.querySelector(`[data-decoration-id=\"${this.pluginState.decorationId}\"]`);\n                this.suggestionsMenuState.referencePos = e.getBoundingClientRect(), this.updateSuggestionsMenu();\n            }\n        });\n        this.editor = t, this.pluginKey = e, this.pluginState = pt(), this.updateSuggestionsMenu = ()=>{\n            if (!this.suggestionsMenuState) throw new Error(\"Attempting to update uninitialized suggestions menu\");\n            o(this.suggestionsMenuState);\n        }, document.addEventListener(\"scroll\", this.handleScroll);\n    }\n    update(t, e) {\n        const o = this.pluginKey.getState(e), r = this.pluginKey.getState(t.state), i = !o.active && r.active, s = o.active && !r.active, a = o.active && r.active;\n        if (!i && !a && !s) return;\n        if (this.pluginState = s ? o : r, s || !this.editor.isEditable) {\n            this.suggestionsMenuState.show = !1, this.updateSuggestionsMenu();\n            return;\n        }\n        const l = document.querySelector(`[data-decoration-id=\"${this.pluginState.decorationId}\"]`);\n        this.editor.isEditable && (this.suggestionsMenuState = {\n            show: !0,\n            referencePos: l.getBoundingClientRect(),\n            filteredItems: this.pluginState.items,\n            keyboardHoveredItemIndex: this.pluginState.keyboardHoveredItemIndex\n        }, this.updateSuggestionsMenu());\n    }\n    destroy() {\n        document.removeEventListener(\"scroll\", this.handleScroll);\n    }\n}\nfunction pt() {\n    return {\n        active: !1,\n        triggerCharacter: void 0,\n        queryStartPos: void 0,\n        items: [],\n        keyboardHoveredItemIndex: void 0,\n        notFoundCount: 0,\n        decorationId: void 0\n    };\n}\nconst lo = (n, t, e, o, r = ()=>[], i = ()=>{})=>{\n    if (o.length !== 1) throw new Error(\"'char' should be a single character\");\n    let s;\n    const a = (l)=>{\n        l.dispatch(l.state.tr.setMeta(e, {\n            deactivate: !0\n        }));\n    };\n    return {\n        plugin: new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n            key: e,\n            view: ()=>(s = new ao(n, e, t), s),\n            state: {\n                // Initialize the plugin's internal state.\n                init () {\n                    return pt();\n                },\n                // Apply changes to the plugin state from an editor transaction.\n                apply (l, c, d, p) {\n                    var h, f, y, S;\n                    if (l.getMeta(\"orderedListIndexing\") !== void 0) return c;\n                    if ((h = l.getMeta(e)) != null && h.activate) return {\n                        active: !0,\n                        triggerCharacter: ((f = l.getMeta(e)) == null ? void 0 : f.triggerCharacter) || \"\",\n                        queryStartPos: p.selection.from,\n                        items: r(\"\"),\n                        keyboardHoveredItemIndex: 0,\n                        // TODO: Maybe should be 1 if the menu has no possible items? Probably redundant since a menu with no items\n                        //  is useless in practice.\n                        notFoundCount: 0,\n                        decorationId: `id_${Math.floor(Math.random() * 4294967295)}`\n                    };\n                    if (!c.active) return c;\n                    const m = {\n                        ...c\n                    };\n                    if (m.items = r(p.doc.textBetween(c.queryStartPos, p.selection.from)), m.notFoundCount = 0, m.items.length === 0 && (m.notFoundCount = Math.max(0, c.notFoundCount + (p.selection.from - d.selection.from))), p.selection.from !== p.selection.to || // Transactions with plugin metadata {deactivate: true} should hide the menu.\n                    (y = l.getMeta(e)) != null && y.deactivate || // Certain mouse events should hide the menu.\n                    // TODO: Change to global mousedown listener.\n                    l.getMeta(\"focus\") || l.getMeta(\"blur\") || l.getMeta(\"pointer\") || // Moving the caret before the character which triggered the menu should hide it.\n                    c.active && p.selection.from < c.queryStartPos || // Entering more than 3 characters, after the last query that matched with at least 1 menu item, should hide\n                    // the menu.\n                    m.notFoundCount > 3) return pt();\n                    if (((S = l.getMeta(e)) == null ? void 0 : S.selectedItemIndexChanged) !== void 0) {\n                        let E = l.getMeta(e).selectedItemIndexChanged;\n                        E < 0 ? E = c.items.length - 1 : E >= c.items.length && (E = 0), m.keyboardHoveredItemIndex = E;\n                    } else d.selection.from !== p.selection.from && (m.keyboardHoveredItemIndex = 0);\n                    return m;\n                }\n            },\n            props: {\n                handleKeyDown (l, c) {\n                    const d = this.getState(l.state).active;\n                    if (c.key === o && !d) return l.dispatch(l.state.tr.insertText(o).scrollIntoView().setMeta(e, {\n                        activate: !0,\n                        triggerCharacter: o\n                    })), !0;\n                    if (!d) return !1;\n                    const { triggerCharacter: p, queryStartPos: m, items: h, keyboardHoveredItemIndex: f } = e.getState(l.state);\n                    return c.key === \"ArrowUp\" ? (l.dispatch(l.state.tr.setMeta(e, {\n                        selectedItemIndexChanged: f - 1\n                    })), !0) : c.key === \"ArrowDown\" ? (l.dispatch(l.state.tr.setMeta(e, {\n                        selectedItemIndexChanged: f + 1\n                    })), !0) : c.key === \"Enter\" ? (h.length === 0 || (a(l), n._tiptapEditor.chain().focus().deleteRange({\n                        from: m - p.length,\n                        to: n._tiptapEditor.state.selection.from\n                    }).run(), i({\n                        item: h[f],\n                        editor: n\n                    })), !0) : c.key === \"Escape\" ? (a(l), !0) : !1;\n                },\n                // Setup decorator on the currently active suggestion.\n                decorations (l) {\n                    const { active: c, decorationId: d, queryStartPos: p, triggerCharacter: m } = this.getState(l);\n                    if (!c) return null;\n                    if (m === \"\") {\n                        const h = so(l.selection);\n                        if (h) return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(l.doc, [\n                            prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.node(h.pos, h.pos + h.node.nodeSize, {\n                                nodeName: \"span\",\n                                class: \"bn-suggestion-decorator\",\n                                \"data-decoration-id\": d\n                            })\n                        ]);\n                    }\n                    return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(l.doc, [\n                        prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.inline(p - m.length, p, {\n                            nodeName: \"span\",\n                            class: \"bn-suggestion-decorator\",\n                            \"data-decoration-id\": d\n                        })\n                    ]);\n                }\n            }\n        }),\n        itemCallback: (l)=>{\n            a(n._tiptapEditor.view), n._tiptapEditor.chain().focus().deleteRange({\n                from: s.pluginState.queryStartPos - s.pluginState.triggerCharacter.length,\n                to: n._tiptapEditor.state.selection.from\n            }).run(), i({\n                item: l,\n                editor: n\n            });\n        }\n    };\n}, St = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"SlashMenuPlugin\");\nclass co extends q {\n    constructor(e, o){\n        super();\n        u(this, \"plugin\");\n        u(this, \"itemCallback\");\n        const r = lo(e, (i)=>{\n            this.emit(\"update\", i);\n        }, St, \"/\", (i)=>o.filter(({ name: s, aliases: a })=>s.toLowerCase().startsWith(i.toLowerCase()) || a && a.filter((l)=>l.toLowerCase().startsWith(i.toLowerCase())).length !== 0), ({ item: i, editor: s })=>i.execute(s));\n        this.plugin = r.plugin, this.itemCallback = r.itemCallback;\n    }\n    onUpdate(e) {\n        return this.on(\"update\", e);\n    }\n}\nclass U extends prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Selection {\n    constructor(e, o){\n        super(e, o);\n        u(this, \"nodes\");\n        const r = e.node();\n        this.nodes = [], e.doc.nodesBetween(e.pos, o.pos, (i, s, a)=>{\n            if (a !== null && a.eq(r)) return this.nodes.push(i), !1;\n        });\n    }\n    static create(e, o, r = o) {\n        return new U(e.resolve(o), e.resolve(r));\n    }\n    content() {\n        return new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(this.nodes), 0, 0);\n    }\n    eq(e) {\n        if (!(e instanceof U) || this.nodes.length !== e.nodes.length || this.from !== e.from || this.to !== e.to) return !1;\n        for(let o = 0; o < this.nodes.length; o++)if (!this.nodes[o].eq(e.nodes[o])) return !1;\n        return !0;\n    }\n    map(e, o) {\n        const r = o.mapResult(this.from), i = o.mapResult(this.to);\n        return i.deleted ? prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Selection.near(e.resolve(r.pos)) : r.deleted ? prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Selection.near(e.resolve(i.pos)) : new U(e.resolve(r.pos), e.resolve(i.pos));\n    }\n    toJSON() {\n        return {\n            type: \"node\",\n            anchor: this.anchor,\n            head: this.head\n        };\n    }\n}\nlet D;\nfunction Et(n, t) {\n    var r;\n    if (!t.dom.isConnected) return;\n    const e = t.posAtCoords(n);\n    if (!e) return;\n    let o = t.domAtPos(e.pos).node;\n    if (o !== t.dom) {\n        for(; o && o.parentNode && o.parentNode !== t.dom && !((r = o.hasAttribute) != null && r.call(o, \"data-id\"));)o = o.parentNode;\n        if (o) return {\n            node: o,\n            id: o.getAttribute(\"data-id\")\n        };\n    }\n}\nfunction uo(n, t) {\n    const e = Et(n, t);\n    if (e && e.node.nodeType === 1) {\n        const o = t.docView, r = o.nearestDesc(e.node, !0);\n        return !r || r === o ? null : r.posBefore;\n    }\n    return null;\n}\nfunction po(n, t) {\n    let e, o;\n    const r = t.resolve(n.from).node().type.spec.group === \"blockContent\", i = t.resolve(n.to).node().type.spec.group === \"blockContent\", s = Math.min(n.$anchor.depth, n.$head.depth);\n    if (r && i) {\n        const a = n.$from.start(s - 1), l = n.$to.end(s - 1);\n        e = t.resolve(a - 1).pos, o = t.resolve(l + 1).pos;\n    } else e = n.from, o = n.to;\n    return {\n        from: e,\n        to: o\n    };\n}\nfunction At(n, t, e = t) {\n    t === e && (e += n.state.doc.resolve(t + 1).node().nodeSize);\n    const o = n.domAtPos(t).node.cloneNode(!0), r = n.domAtPos(t).node, i = (d, p)=>Array.prototype.indexOf.call(d.children, p), s = i(r, // Expects from position to be just before the first selected block.\n    n.domAtPos(t + 1).node.parentElement), a = i(r, // Expects to position to be just after the last selected block.\n    n.domAtPos(e - 1).node.parentElement);\n    for(let d = r.childElementCount - 1; d >= 0; d--)(d > a || d < s) && o.removeChild(o.children[d]);\n    le(), D = o;\n    const c = n.dom.className.split(\" \").filter((d)=>d !== \"ProseMirror\" && d !== \"bn-root\" && d !== \"bn-editor\").join(\" \");\n    D.className = D.className + \" bn-drag-preview \" + c, document.body.appendChild(D);\n}\nfunction le() {\n    D !== void 0 && (document.body.removeChild(D), D = void 0);\n}\nfunction ho(n, t) {\n    if (!n.dataTransfer) return;\n    const e = t.prosemirrorView, o = e.dom.getBoundingClientRect(), r = {\n        left: o.left + o.width / 2,\n        // take middle of editor\n        top: n.clientY\n    }, i = uo(r, e);\n    if (i != null) {\n        const s = e.state.selection, a = e.state.doc, { from: l, to: c } = po(s, a), d = l <= i && i < c, p = s.$anchor.node() !== s.$head.node() || s instanceof U;\n        d && p ? (e.dispatch(e.state.tr.setSelection(U.create(a, l, c))), At(e, l, c)) : (e.dispatch(e.state.tr.setSelection(prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.NodeSelection.create(e.state.doc, i))), At(e, i));\n        const m = e.state.selection.content(), h = t._tiptapEditor.schema, y = qt(h, t).serializeProseMirrorFragment(m.content), E = st(h, t).exportProseMirrorFragment(m.content), k = vt(E);\n        n.dataTransfer.clearData(), n.dataTransfer.setData(\"blocknote/html\", y), n.dataTransfer.setData(\"text/html\", E), n.dataTransfer.setData(\"text/plain\", k), n.dataTransfer.effectAllowed = \"move\", n.dataTransfer.setDragImage(D, 0, 0), e.dragging = {\n            slice: m,\n            move: !0\n        };\n    }\n}\nclass mo {\n    constructor(t, e, o){\n        u(this, \"sideMenuState\");\n        // When true, the drag handle with be anchored at the same level as root elements\n        // When false, the drag handle with be just to the left of the element\n        // TODO: Is there any case where we want this to be false?\n        u(this, \"horizontalPosAnchoredAtRoot\");\n        u(this, \"horizontalPosAnchor\");\n        u(this, \"hoveredBlock\");\n        // Used to check if currently dragged content comes from this editor instance.\n        u(this, \"isDragging\", !1);\n        u(this, \"menuFrozen\", !1);\n        /**\n     * Sets isDragging when dragging text.\n     */ u(this, \"onDragStart\", ()=>{\n            this.isDragging = !0;\n        });\n        /**\n     * If the event is outside the editor contents,\n     * we dispatch a fake event, so that we can still drop the content\n     * when dragging / dropping to the side of the editor\n     */ u(this, \"onDrop\", (t)=>{\n            if (this.editor._tiptapEditor.commands.blur(), t.synthetic || !this.isDragging) return;\n            const e = this.pmView.posAtCoords({\n                left: t.clientX,\n                top: t.clientY\n            });\n            if (this.isDragging = !1, !e || e.inside === -1) {\n                const o = new Event(\"drop\", t), r = this.pmView.dom.firstChild.getBoundingClientRect();\n                o.clientX = r.left + r.width / 2, o.clientY = t.clientY, o.dataTransfer = t.dataTransfer, o.preventDefault = ()=>t.preventDefault(), o.synthetic = !0, this.pmView.dom.dispatchEvent(o);\n            }\n        });\n        /**\n     * If the event is outside the editor contents,\n     * we dispatch a fake event, so that we can still drop the content\n     * when dragging / dropping to the side of the editor\n     */ u(this, \"onDragOver\", (t)=>{\n            if (t.synthetic || !this.isDragging) return;\n            const e = this.pmView.posAtCoords({\n                left: t.clientX,\n                top: t.clientY\n            });\n            if (!e || e.inside === -1) {\n                const o = new Event(\"dragover\", t), r = this.pmView.dom.firstChild.getBoundingClientRect();\n                o.clientX = r.left + r.width / 2, o.clientY = t.clientY, o.dataTransfer = t.dataTransfer, o.preventDefault = ()=>t.preventDefault(), o.synthetic = !0, this.pmView.dom.dispatchEvent(o);\n            }\n        });\n        u(this, \"onKeyDown\", (t)=>{\n            var e;\n            (e = this.sideMenuState) != null && e.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState)), this.menuFrozen = !1;\n        });\n        u(this, \"onMouseDown\", (t)=>{\n            this.sideMenuState && !this.sideMenuState.show && (this.sideMenuState.show = !0, this.updateSideMenu(this.sideMenuState)), this.menuFrozen = !1;\n        });\n        u(this, \"onMouseMove\", (t)=>{\n            var c, d, p, m, h;\n            if (this.menuFrozen) return;\n            const e = this.pmView.dom.firstChild.getBoundingClientRect(), o = this.pmView.dom.getBoundingClientRect(), r = t.clientX >= o.left && t.clientX <= o.right && t.clientY >= o.top && t.clientY <= o.bottom, i = this.pmView.dom.parentElement;\n            if (// Cursor is within the editor area\n            r && // An element is hovered\n            t && t.target && // Element is outside the editor\n            !(i === t.target || i.contains(t.target))) {\n                (c = this.sideMenuState) != null && c.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState));\n                return;\n            }\n            this.horizontalPosAnchor = e.x;\n            const s = {\n                left: e.left + e.width / 2,\n                // take middle of editor\n                top: t.clientY\n            }, a = Et(s, this.pmView);\n            if (!a || !this.editor.isEditable) {\n                (d = this.sideMenuState) != null && d.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState));\n                return;\n            }\n            if ((p = this.sideMenuState) != null && p.show && (m = this.hoveredBlock) != null && m.hasAttribute(\"data-id\") && ((h = this.hoveredBlock) == null ? void 0 : h.getAttribute(\"data-id\")) === a.id) return;\n            this.hoveredBlock = a.node;\n            const l = a.node.firstChild;\n            if (l && this.editor.isEditable) {\n                const f = l.getBoundingClientRect();\n                this.sideMenuState = {\n                    show: !0,\n                    referencePos: new DOMRect(this.horizontalPosAnchoredAtRoot ? this.horizontalPosAnchor : f.x, f.y, f.width, f.height),\n                    block: this.editor.getBlock(this.hoveredBlock.getAttribute(\"data-id\"))\n                }, this.updateSideMenu(this.sideMenuState);\n            }\n        });\n        u(this, \"onScroll\", ()=>{\n            var t;\n            if ((t = this.sideMenuState) != null && t.show) {\n                const o = this.hoveredBlock.firstChild.getBoundingClientRect();\n                this.sideMenuState.referencePos = new DOMRect(this.horizontalPosAnchoredAtRoot ? this.horizontalPosAnchor : o.x, o.y, o.width, o.height), this.updateSideMenu(this.sideMenuState);\n            }\n        });\n        this.editor = t, this.pmView = e, this.updateSideMenu = o, this.horizontalPosAnchoredAtRoot = !0, this.horizontalPosAnchor = this.pmView.dom.firstChild.getBoundingClientRect().x, document.body.addEventListener(\"drop\", this.onDrop, !0), document.body.addEventListener(\"dragover\", this.onDragOver), this.pmView.dom.addEventListener(\"dragstart\", this.onDragStart), document.body.addEventListener(\"mousemove\", this.onMouseMove, !0), document.addEventListener(\"scroll\", this.onScroll), document.body.addEventListener(\"mousedown\", this.onMouseDown, !0), document.body.addEventListener(\"keydown\", this.onKeyDown, !0);\n    }\n    destroy() {\n        var t;\n        (t = this.sideMenuState) != null && t.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState)), document.body.removeEventListener(\"mousemove\", this.onMouseMove), document.body.removeEventListener(\"dragover\", this.onDragOver), this.pmView.dom.removeEventListener(\"dragstart\", this.onDragStart), document.body.removeEventListener(\"drop\", this.onDrop, !0), document.removeEventListener(\"scroll\", this.onScroll), document.body.removeEventListener(\"mousedown\", this.onMouseDown, !0), document.body.removeEventListener(\"keydown\", this.onKeyDown, !0);\n    }\n    addBlock() {\n        var l;\n        (l = this.sideMenuState) != null && l.show && (this.sideMenuState.show = !1, this.updateSideMenu(this.sideMenuState)), this.menuFrozen = !0;\n        const e = this.hoveredBlock.firstChild.getBoundingClientRect(), o = this.pmView.posAtCoords({\n            left: e.left + e.width / 2,\n            top: e.top + e.height / 2\n        });\n        if (!o) return;\n        const r = w(this.editor._tiptapEditor.state.doc, o.pos);\n        if (r === void 0) return;\n        const { contentNode: i, startPos: s, endPos: a } = r;\n        if (i.type.spec.content !== \"inline*\" || i.textContent.length !== 0) {\n            const c = a + 1, d = c + 2;\n            this.editor._tiptapEditor.chain().BNCreateBlock(c).BNUpdateBlock(d, {\n                type: \"paragraph\",\n                props: {}\n            }).setTextSelection(d).run();\n        } else this.editor._tiptapEditor.commands.setTextSelection(s + 1);\n        this.pmView.focus(), this.pmView.dispatch(this.pmView.state.tr.scrollIntoView().setMeta(St, {\n            // TODO import suggestion plugin key\n            activate: !0,\n            type: \"drag\"\n        }));\n    }\n}\nconst fo = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"SideMenuPlugin\");\nclass go extends q {\n    constructor(e){\n        super();\n        u(this, \"sideMenuView\");\n        u(this, \"plugin\");\n        /**\n     * If the block is empty, opens the slash menu. If the block has content,\n     * creates a new block below and opens the slash menu in it.\n     */ u(this, \"addBlock\", ()=>this.sideMenuView.addBlock());\n        /**\n     * Handles drag & drop events for blocks.\n     */ u(this, \"blockDragStart\", (e)=>{\n            this.sideMenuView.isDragging = !0, ho(e, this.editor);\n        });\n        /**\n     * Handles drag & drop events for blocks.\n     */ u(this, \"blockDragEnd\", ()=>le());\n        /**\n     * Freezes the side menu. When frozen, the side menu will stay\n     * attached to the same block regardless of which block is hovered by the\n     * mouse cursor.\n     */ u(this, \"freezeMenu\", ()=>this.sideMenuView.menuFrozen = !0);\n        /**\n     * Unfreezes the side menu. When frozen, the side menu will stay\n     * attached to the same block regardless of which block is hovered by the\n     * mouse cursor.\n     */ u(this, \"unfreezeMenu\", ()=>this.sideMenuView.menuFrozen = !1);\n        this.editor = e, this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n            key: fo,\n            view: (o)=>(this.sideMenuView = new mo(e, o, (r)=>{\n                    this.emit(\"update\", r);\n                }), this.sideMenuView)\n        });\n    }\n    onUpdate(e) {\n        return this.on(\"update\", e);\n    }\n}\nfunction bo(n) {\n    let t = n.getTextCursorPosition().block, e = n.blockSchema[t.type].content;\n    for(; e === \"none\";)t = n.getTextCursorPosition().nextBlock, e = n.blockSchema[t.type].content, n.setTextCursorPosition(t, \"end\");\n}\nfunction P(n, t) {\n    const e = n.getTextCursorPosition().block;\n    if (e.content === void 0) throw new Error(\"Slash Menu open in a block that doesn't contain content.\");\n    Array.isArray(e.content) && (e.content.length === 1 && Z(e.content[0]) && e.content[0].type === \"text\" && e.content[0].text === \"/\" || e.content.length === 0) ? n.updateBlock(e, t) : (n.insertBlocks([\n        t\n    ], e, \"after\"), n.setTextCursorPosition(n.getTextCursorPosition().nextBlock, \"end\"));\n    const o = n.getTextCursorPosition().block;\n    return bo(n), o;\n}\nconst ko = (n = ne)=>{\n    var e, o, r;\n    const t = [];\n    return \"heading\" in n && \"level\" in n.heading.propSchema && ((e = n.heading.propSchema.level.values) != null && e.includes(1) && t.push({\n        name: \"Heading\",\n        aliases: [\n            \"h\",\n            \"heading1\",\n            \"h1\"\n        ],\n        execute: (i)=>P(i, {\n                type: \"heading\",\n                props: {\n                    level: 1\n                }\n            })\n    }), (o = n.heading.propSchema.level.values) != null && o.includes(2) && t.push({\n        name: \"Heading 2\",\n        aliases: [\n            \"h2\",\n            \"heading2\",\n            \"subheading\"\n        ],\n        execute: (i)=>P(i, {\n                type: \"heading\",\n                props: {\n                    level: 2\n                }\n            })\n    }), (r = n.heading.propSchema.level.values) != null && r.includes(3) && t.push({\n        name: \"Heading 3\",\n        aliases: [\n            \"h3\",\n            \"heading3\",\n            \"subheading\"\n        ],\n        execute: (i)=>P(i, {\n                type: \"heading\",\n                props: {\n                    level: 3\n                }\n            })\n    })), \"bulletListItem\" in n && t.push({\n        name: \"Bullet List\",\n        aliases: [\n            \"ul\",\n            \"list\",\n            \"bulletlist\",\n            \"bullet list\"\n        ],\n        execute: (i)=>P(i, {\n                type: \"bulletListItem\"\n            })\n    }), \"numberedListItem\" in n && t.push({\n        name: \"Numbered List\",\n        aliases: [\n            \"li\",\n            \"list\",\n            \"numberedlist\",\n            \"numbered list\"\n        ],\n        execute: (i)=>P(i, {\n                type: \"numberedListItem\"\n            })\n    }), \"paragraph\" in n && t.push({\n        name: \"Paragraph\",\n        aliases: [\n            \"p\"\n        ],\n        execute: (i)=>P(i, {\n                type: \"paragraph\"\n            })\n    }), \"table\" in n && t.push({\n        name: \"Table\",\n        aliases: [\n            \"table\"\n        ],\n        execute: (i)=>{\n            P(i, {\n                type: \"table\",\n                content: {\n                    type: \"tableContent\",\n                    rows: [\n                        {\n                            cells: [\n                                \"\",\n                                \"\",\n                                \"\"\n                            ]\n                        },\n                        {\n                            cells: [\n                                \"\",\n                                \"\",\n                                \"\"\n                            ]\n                        }\n                    ]\n                }\n            });\n        }\n    }), \"image\" in n && t.push({\n        name: \"Image\",\n        aliases: [\n            \"image\",\n            \"imageUpload\",\n            \"upload\",\n            \"img\",\n            \"picture\",\n            \"media\",\n            \"url\",\n            \"drive\",\n            \"dropbox\"\n        ],\n        execute: (i)=>{\n            const s = P(i, {\n                type: \"image\"\n            });\n            i._tiptapEditor.view.dispatch(i._tiptapEditor.state.tr.setMeta(Y, {\n                block: s\n            }));\n        }\n    }), t;\n};\nlet I;\nfunction Pt() {\n    I || (I = document.createElement(\"div\"), I.innerHTML = \"_\", I.style.opacity = \"0\", I.style.height = \"1px\", I.style.width = \"1px\", document.body.appendChild(I));\n}\nfunction yo() {\n    I && (document.body.removeChild(I), I = void 0);\n}\nfunction ot(n) {\n    return Array.prototype.indexOf.call(n.parentElement.childNodes, n);\n}\nfunction wo(n) {\n    for(; n && n.nodeName !== \"TD\" && n.nodeName !== \"TH\";)n = n.classList && n.classList.contains(\"ProseMirror\") ? null : n.parentNode;\n    return n;\n}\nfunction vo(n) {\n    n.forEach((t)=>{\n        const e = document.getElementsByClassName(t);\n        for(let o = 0; o < e.length; o++)e[o].style.visibility = \"hidden\";\n    });\n}\nclass So {\n    constructor(t, e, o){\n        u(this, \"state\");\n        u(this, \"updateState\");\n        u(this, \"tableId\");\n        u(this, \"tablePos\");\n        u(this, \"menuFrozen\", !1);\n        u(this, \"prevWasEditable\", null);\n        u(this, \"mouseMoveHandler\", (t)=>{\n            var c;\n            if (this.menuFrozen) return;\n            const e = wo(t.target);\n            if (!e || !this.editor.isEditable) {\n                (c = this.state) != null && c.show && (this.state.show = !1, this.updateState());\n                return;\n            }\n            const o = ot(e), r = ot(e.parentElement), i = e.getBoundingClientRect(), s = e.parentElement.parentElement.getBoundingClientRect(), a = Et(i, this.pmView);\n            if (!a) throw new Error(\"Found table cell element, but could not find surrounding blockContent element.\");\n            if (this.tableId = a.id, this.state !== void 0 && this.state.show && this.tableId === a.id && this.state.rowIndex === r && this.state.colIndex === o) return;\n            let l;\n            return this.editor._tiptapEditor.state.doc.descendants((d, p)=>typeof l < \"u\" ? !1 : d.type.name !== \"blockContainer\" || d.attrs.id !== a.id ? !0 : (l = M(d, this.editor.blockSchema, this.editor.inlineContentSchema, this.editor.styleSchema, this.editor.blockCache), this.tablePos = p + 1, !1)), this.state = {\n                show: !0,\n                referencePosCell: i,\n                referencePosTable: s,\n                block: l,\n                colIndex: o,\n                rowIndex: r,\n                draggingState: void 0\n            }, this.updateState(), !1;\n        });\n        u(this, \"dragOverHandler\", (t)=>{\n            var m;\n            if (((m = this.state) == null ? void 0 : m.draggingState) === void 0) return;\n            t.preventDefault(), t.dataTransfer.dropEffect = \"move\", vo([\n                \"column-resize-handle\",\n                \"prosemirror-dropcursor-block\",\n                \"prosemirror-dropcursor-inline\"\n            ]);\n            const e = {\n                left: Math.min(Math.max(t.clientX, this.state.referencePosTable.left + 1), this.state.referencePosTable.right - 1),\n                top: Math.min(Math.max(t.clientY, this.state.referencePosTable.top + 1), this.state.referencePosTable.bottom - 1)\n            }, o = document.elementsFromPoint(e.left, e.top).filter((h)=>h.tagName === \"TD\" || h.tagName === \"TH\");\n            if (o.length === 0) throw new Error(\"Could not find table cell element that the mouse cursor is hovering over.\");\n            const r = o[0];\n            let i = !1;\n            const s = ot(r.parentElement), a = ot(r), l = this.state.draggingState.draggedCellOrientation === \"row\" ? this.state.rowIndex : this.state.colIndex, d = (this.state.draggingState.draggedCellOrientation === \"row\" ? s : a) !== l;\n            (this.state.rowIndex !== s || this.state.colIndex !== a) && (this.state.rowIndex = s, this.state.colIndex = a, this.state.referencePosCell = r.getBoundingClientRect(), i = !0);\n            const p = this.state.draggingState.draggedCellOrientation === \"row\" ? e.top : e.left;\n            this.state.draggingState.mousePos !== p && (this.state.draggingState.mousePos = p, i = !0), i && this.updateState(), d && this.pmView.dispatch(this.pmView.state.tr.setMeta(J, !0));\n        });\n        u(this, \"dropHandler\", (t)=>{\n            if (this.state === void 0 || this.state.draggingState === void 0) return;\n            t.preventDefault();\n            const e = this.state.block.content.rows;\n            if (this.state.draggingState.draggedCellOrientation === \"row\") {\n                const o = e[this.state.draggingState.originalIndex];\n                e.splice(this.state.draggingState.originalIndex, 1), e.splice(this.state.rowIndex, 0, o);\n            } else {\n                const o = e.map((r)=>r.cells[this.state.draggingState.originalIndex]);\n                e.forEach((r, i)=>{\n                    r.cells.splice(this.state.draggingState.originalIndex, 1), r.cells.splice(this.state.colIndex, 0, o[i]);\n                });\n            }\n            this.editor.updateBlock(this.state.block, {\n                type: \"table\",\n                content: {\n                    type: \"tableContent\",\n                    rows: e\n                }\n            });\n        });\n        u(this, \"scrollHandler\", ()=>{\n            var t;\n            if ((t = this.state) != null && t.show) {\n                const e = document.querySelector(`[data-node-type=\"blockContainer\"][data-id=\"${this.tableId}\"] table`), o = e.querySelector(`tr:nth-child(${this.state.rowIndex + 1}) > td:nth-child(${this.state.colIndex + 1})`);\n                this.state.referencePosTable = e.getBoundingClientRect(), this.state.referencePosCell = o.getBoundingClientRect(), this.updateState();\n            }\n        });\n        this.editor = t, this.pmView = e, this.updateState = ()=>{\n            if (!this.state) throw new Error(\"Attempting to update uninitialized image toolbar\");\n            o(this.state);\n        }, e.dom.addEventListener(\"mousemove\", this.mouseMoveHandler), document.addEventListener(\"dragover\", this.dragOverHandler), document.addEventListener(\"drop\", this.dropHandler), document.addEventListener(\"scroll\", this.scrollHandler);\n    }\n    destroy() {\n        this.pmView.dom.removeEventListener(\"mousedown\", this.mouseMoveHandler), document.removeEventListener(\"dragover\", this.dragOverHandler), document.removeEventListener(\"drop\", this.dropHandler), document.removeEventListener(\"scroll\", this.scrollHandler);\n    }\n}\nconst J = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"TableHandlesPlugin\");\nclass Eo extends q {\n    constructor(e){\n        super();\n        u(this, \"view\");\n        u(this, \"plugin\");\n        /**\n     * Callback that should be set on the `dragStart` event for whichever element\n     * is used as the column drag handle.\n     */ u(this, \"colDragStart\", (e)=>{\n            if (this.view.state === void 0) throw new Error(\"Attempted to drag table column, but no table block was hovered prior.\");\n            this.view.state.draggingState = {\n                draggedCellOrientation: \"col\",\n                originalIndex: this.view.state.colIndex,\n                mousePos: e.clientX\n            }, this.view.updateState(), this.editor._tiptapEditor.view.dispatch(this.editor._tiptapEditor.state.tr.setMeta(J, {\n                draggedCellOrientation: this.view.state.draggingState.draggedCellOrientation,\n                originalIndex: this.view.state.colIndex,\n                newIndex: this.view.state.colIndex,\n                tablePos: this.view.tablePos\n            })), Pt(), e.dataTransfer.setDragImage(I, 0, 0), e.dataTransfer.effectAllowed = \"move\";\n        });\n        /**\n     * Callback that should be set on the `dragStart` event for whichever element\n     * is used as the row drag handle.\n     */ u(this, \"rowDragStart\", (e)=>{\n            if (this.view.state === void 0) throw new Error(\"Attempted to drag table row, but no table block was hovered prior.\");\n            this.view.state.draggingState = {\n                draggedCellOrientation: \"row\",\n                originalIndex: this.view.state.rowIndex,\n                mousePos: e.clientY\n            }, this.view.updateState(), this.editor._tiptapEditor.view.dispatch(this.editor._tiptapEditor.state.tr.setMeta(J, {\n                draggedCellOrientation: this.view.state.draggingState.draggedCellOrientation,\n                originalIndex: this.view.state.rowIndex,\n                newIndex: this.view.state.rowIndex,\n                tablePos: this.view.tablePos\n            })), Pt(), e.dataTransfer.setDragImage(I, 0, 0), e.dataTransfer.effectAllowed = \"copyMove\";\n        });\n        /**\n     * Callback that should be set on the `dragEnd` event for both the element\n     * used as the row drag handle, and the one used as the column drag handle.\n     */ u(this, \"dragEnd\", ()=>{\n            if (this.view.state === void 0) throw new Error(\"Attempted to drag table row, but no table block was hovered prior.\");\n            this.view.state.draggingState = void 0, this.view.updateState(), this.editor._tiptapEditor.view.dispatch(this.editor._tiptapEditor.state.tr.setMeta(J, null)), yo();\n        });\n        /**\n     * Freezes the drag handles. When frozen, they will stay attached to the same\n     * cell regardless of which cell is hovered by the mouse cursor.\n     */ u(this, \"freezeHandles\", ()=>this.view.menuFrozen = !0);\n        /**\n     * Unfreezes the drag handles. When frozen, they will stay attached to the\n     * same cell regardless of which cell is hovered by the mouse cursor.\n     */ u(this, \"unfreezeHandles\", ()=>this.view.menuFrozen = !1);\n        this.editor = e, this.plugin = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n            key: J,\n            view: (o)=>(this.view = new So(e, o, (r)=>{\n                    this.emit(\"update\", r);\n                }), this.view),\n            // We use decorations to render the drop cursor when dragging a table row\n            // or column. The decorations are updated in the `dragOverHandler` method.\n            props: {\n                decorations: (o)=>{\n                    if (this.view === void 0 || this.view.state === void 0 || this.view.state.draggingState === void 0 || this.view.tablePos === void 0) return;\n                    const r = this.view.state.draggingState.draggedCellOrientation === \"row\" ? this.view.state.rowIndex : this.view.state.colIndex, i = [];\n                    if (r === this.view.state.draggingState.originalIndex) return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(o.doc, i);\n                    const s = o.doc.resolve(this.view.tablePos + 1), a = s.node();\n                    if (this.view.state.draggingState.draggedCellOrientation === \"row\") {\n                        const l = o.doc.resolve(s.posAtIndex(r) + 1), c = l.node();\n                        for(let d = 0; d < c.childCount; d++){\n                            const p = o.doc.resolve(l.posAtIndex(d) + 1), m = p.node(), h = p.pos + (r > this.view.state.draggingState.originalIndex ? m.nodeSize - 2 : 0);\n                            i.push(// The widget is a small bar which spans the width of the cell.\n                            prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.widget(h, ()=>{\n                                const f = document.createElement(\"div\");\n                                return f.className = \"bn-table-drop-cursor\", f.style.left = \"0\", f.style.right = \"0\", r > this.view.state.draggingState.originalIndex ? f.style.bottom = \"-2px\" : f.style.top = \"-3px\", f.style.height = \"4px\", f;\n                            }));\n                        }\n                    } else for(let l = 0; l < a.childCount; l++){\n                        const c = o.doc.resolve(s.posAtIndex(l) + 1), d = o.doc.resolve(c.posAtIndex(r) + 1), p = d.node(), m = d.pos + (r > this.view.state.draggingState.originalIndex ? p.nodeSize - 2 : 0);\n                        i.push(// The widget is a small bar which spans the height of the cell.\n                        prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.widget(m, ()=>{\n                            const h = document.createElement(\"div\");\n                            return h.className = \"bn-table-drop-cursor\", h.style.top = \"0\", h.style.bottom = \"0\", r > this.view.state.draggingState.originalIndex ? h.style.right = \"-2px\" : h.style.left = \"-3px\", h.style.width = \"4px\", h;\n                        }));\n                    }\n                    return prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(o.doc, i);\n                }\n            }\n        });\n    }\n    onUpdate(e) {\n        return this.on(\"update\", e);\n    }\n}\nfunction Dt(n, t) {\n    const e = n.state.selection.content().content, r = qt(n.state.schema, t).serializeProseMirrorFragment(e), s = st(n.state.schema, t).exportProseMirrorFragment(e), a = vt(s);\n    return {\n        internalHTML: r,\n        externalHTML: s,\n        plainText: a\n    };\n}\nconst Co = (n)=>_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n        name: \"copyToClipboard\",\n        addProseMirrorPlugins () {\n            return [\n                new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n                    props: {\n                        handleDOMEvents: {\n                            copy (t, e) {\n                                e.preventDefault(), e.clipboardData.clearData(), \"node\" in t.state.selection && t.state.selection.node.type.spec.group === \"blockContent\" && t.dispatch(t.state.tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.NodeSelection(t.state.doc.resolve(t.state.selection.from - 1))));\n                                const { internalHTML: o, externalHTML: r, plainText: i } = Dt(t, n);\n                                return e.clipboardData.setData(\"blocknote/html\", o), e.clipboardData.setData(\"text/html\", r), e.clipboardData.setData(\"text/plain\", i), !0;\n                            },\n                            // This is for the use-case in which only a block without content\n                            // is selected, e.g. an image block, and dragged (not using the\n                            // drag handle).\n                            dragstart (t, e) {\n                                if (!(\"node\" in t.state.selection) || t.state.selection.node.type.spec.group !== \"blockContent\") return;\n                                t.dispatch(t.state.tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.NodeSelection(t.state.doc.resolve(t.state.selection.from - 1)))), e.preventDefault(), e.dataTransfer.clearData();\n                                const { internalHTML: o, externalHTML: r, plainText: i } = Dt(t, n);\n                                return e.dataTransfer.setData(\"blocknote/html\", o), e.dataTransfer.setData(\"text/html\", r), e.dataTransfer.setData(\"text/plain\", i), !0;\n                            }\n                        }\n                    }\n                })\n            ];\n        }\n    }), To = [\n    \"blocknote/html\",\n    \"text/html\",\n    \"text/plain\"\n], Mo = (n)=>_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n        name: \"pasteFromClipboard\",\n        addProseMirrorPlugins () {\n            return [\n                new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n                    props: {\n                        handleDOMEvents: {\n                            paste (t, e) {\n                                e.preventDefault();\n                                let o = null;\n                                for (const r of To)if (e.clipboardData.types.includes(r)) {\n                                    o = r;\n                                    break;\n                                }\n                                if (o !== null) {\n                                    let r = e.clipboardData.getData(o);\n                                    o === \"text/html\" && (r = se(r.trim()).innerHTML), n._tiptapEditor.view.pasteHTML(r);\n                                }\n                                return !0;\n                            }\n                        }\n                    }\n                })\n            ];\n        }\n    }), xo = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n    name: \"blockBackgroundColor\",\n    addGlobalAttributes () {\n        return [\n            {\n                types: [\n                    \"blockContainer\"\n                ],\n                attributes: {\n                    backgroundColor: {\n                        default: B.backgroundColor.default,\n                        parseHTML: (n)=>n.hasAttribute(\"data-background-color\") ? n.getAttribute(\"data-background-color\") : B.backgroundColor.default,\n                        renderHTML: (n)=>n.backgroundColor !== B.backgroundColor.default && {\n                                \"data-background-color\": n.backgroundColor\n                            }\n                    }\n                }\n            }\n        ];\n    }\n}), Bo = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"blocknote-placeholder\"), Io = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n    name: \"placeholder\",\n    addOptions () {\n        return {\n            emptyEditorClass: \"bn-is-editor-empty\",\n            emptyNodeClass: \"bn-is-empty\",\n            isFilterClass: \"bn-is-filter\",\n            hasAnchorClass: \"bn-has-anchor\",\n            placeholder: \"Write something …\",\n            showOnlyWhenEditable: !0,\n            showOnlyCurrent: !0,\n            includeChildren: !1\n        };\n    },\n    addProseMirrorPlugins () {\n        return [\n            new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n                key: Bo,\n                props: {\n                    decorations: (n)=>{\n                        const { doc: t, selection: e } = n, o = St.getState(n), r = this.editor.isEditable || !this.options.showOnlyWhenEditable, { anchor: i } = e, s = [];\n                        if (r) return t.descendants((a, l)=>{\n                            const c = i >= l && i <= l + a.nodeSize, d = !a.isLeaf && !a.childCount;\n                            if ((c || !this.options.showOnlyCurrent) && d) {\n                                const p = [\n                                    this.options.emptyNodeClass\n                                ];\n                                this.editor.isEmpty && p.push(this.options.emptyEditorClass), c && p.push(this.options.hasAnchorClass), (o == null ? void 0 : o.triggerCharacter) === \"\" && o != null && o.active && p.push(this.options.isFilterClass);\n                                const m = prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.node(l, l + a.nodeSize, {\n                                    class: p.join(\" \")\n                                });\n                                s.push(m);\n                            }\n                            return this.options.includeChildren;\n                        }), prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(t, s);\n                    }\n                }\n            })\n        ];\n    }\n}), Lo = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n    name: \"textAlignment\",\n    addGlobalAttributes () {\n        return [\n            {\n                // Attribute is applied to block content instead of container so that child blocks don't inherit the text\n                // alignment styling.\n                types: [\n                    \"paragraph\",\n                    \"heading\",\n                    \"bulletListItem\",\n                    \"numberedListItem\"\n                ],\n                attributes: {\n                    textAlignment: {\n                        default: \"left\",\n                        parseHTML: (n)=>n.getAttribute(\"data-text-alignment\"),\n                        renderHTML: (n)=>n.textAlignment !== \"left\" && {\n                                \"data-text-alignment\": n.textAlignment\n                            }\n                    }\n                }\n            }\n        ];\n    }\n}), Ho = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n    name: \"blockTextColor\",\n    addGlobalAttributes () {\n        return [\n            {\n                types: [\n                    \"blockContainer\"\n                ],\n                attributes: {\n                    textColor: {\n                        default: B.textColor.default,\n                        parseHTML: (n)=>n.hasAttribute(\"data-text-color\") ? n.getAttribute(\"data-text-color\") : B.textColor.default,\n                        renderHTML: (n)=>n.textColor !== B.textColor.default && {\n                                \"data-text-color\": n.textColor\n                            }\n                    }\n                }\n            }\n        ];\n    }\n}), No = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n    name: \"trailingNode\",\n    addProseMirrorPlugins () {\n        const n = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(this.name);\n        return [\n            new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n                key: n,\n                appendTransaction: (t, e, o)=>{\n                    const { doc: r, tr: i, schema: s } = o, a = n.getState(o), l = r.content.size - 2, c = s.nodes.blockContainer, d = s.nodes.paragraph;\n                    if (a) return i.insert(l, c.create(void 0, d.create()));\n                },\n                state: {\n                    init: (t, e)=>{},\n                    apply: (t, e)=>{\n                        if (!t.docChanged) return e;\n                        let o = t.doc.lastChild;\n                        if (!o || o.type.name !== \"blockGroup\") throw new Error(\"Expected blockGroup\");\n                        if (o = o.lastChild, !o || o.type.name !== \"blockContainer\") throw new Error(\"Expected blockContainer\");\n                        const r = o.firstChild;\n                        if (!r) throw new Error(\"Expected blockContent\");\n                        return o.nodeSize > 4 || r.type.spec.content !== \"inline*\";\n                    }\n                }\n            })\n        ];\n    }\n}), Ao = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"non-editable-block\"), Po = ()=>new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n        key: Ao,\n        props: {\n            handleKeyDown: (n, t)=>{\n                \"node\" in n.state.selection && t.key.length === 1 && !t.ctrlKey && !t.altKey && !t.metaKey && !t.shiftKey && t.preventDefault();\n            }\n        }\n    }), Ot = new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.PluginKey(\"previous-blocks\"), Do = {\n    // Numbered List Items\n    index: \"index\",\n    // Headings\n    level: \"level\",\n    // All Blocks\n    type: \"type\",\n    depth: \"depth\",\n    \"depth-change\": \"depth-change\"\n}, Oo = ()=>{\n    let n;\n    return new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.Plugin({\n        key: Ot,\n        view (t) {\n            return {\n                update: async (e, o)=>{\n                    var r;\n                    ((r = this.key) == null ? void 0 : r.getState(e.state).updatedBlocks.size) > 0 && (n = setTimeout(()=>{\n                        e.dispatch(e.state.tr.setMeta(Ot, {\n                            clearUpdate: !0\n                        }));\n                    }, 0));\n                },\n                destroy: ()=>{\n                    n && clearTimeout(n);\n                }\n            };\n        },\n        state: {\n            init () {\n                return {\n                    // Block attributes, by block ID, from just before the previous transaction.\n                    prevTransactionOldBlockAttrs: {},\n                    // Block attributes, by block ID, from just before the current transaction.\n                    currentTransactionOldBlockAttrs: {},\n                    // Set of IDs of blocks whose attributes changed from the current transaction.\n                    updatedBlocks: /* @__PURE__ */ new Set()\n                };\n            },\n            apply (t, e, o, r) {\n                if (e.currentTransactionOldBlockAttrs = {}, e.updatedBlocks.clear(), !t.docChanged || o.doc.eq(r.doc)) return e;\n                const i = {}, s = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.findChildren)(o.doc, (c)=>c.attrs.id), a = new Map(s.map((c)=>[\n                        c.node.attrs.id,\n                        c\n                    ])), l = (0,_tiptap_core__WEBPACK_IMPORTED_MODULE_17__.findChildren)(r.doc, (c)=>c.attrs.id);\n                for (const c of l){\n                    const d = a.get(c.node.attrs.id), p = d == null ? void 0 : d.node.firstChild, m = c.node.firstChild;\n                    if (d && p && m) {\n                        const h = {\n                            index: m.attrs.index,\n                            level: m.attrs.level,\n                            type: m.type.name,\n                            depth: r.doc.resolve(c.pos).depth\n                        };\n                        let f = {\n                            index: p.attrs.index,\n                            level: p.attrs.level,\n                            type: p.type.name,\n                            depth: o.doc.resolve(d.pos).depth\n                        };\n                        i[c.node.attrs.id] = f, t.getMeta(\"numberedListIndexing\") && (c.node.attrs.id in e.prevTransactionOldBlockAttrs && (f = e.prevTransactionOldBlockAttrs[c.node.attrs.id]), h.type === \"numberedListItem\" && (f.index = h.index)), e.currentTransactionOldBlockAttrs[c.node.attrs.id] = f, JSON.stringify(f) !== JSON.stringify(h) && (f[\"depth-change\"] = f.depth - h.depth, e.updatedBlocks.add(c.node.attrs.id));\n                    }\n                }\n                return e.prevTransactionOldBlockAttrs = i, e;\n            }\n        },\n        props: {\n            decorations (t) {\n                const e = this.getState(t);\n                if (e.updatedBlocks.size === 0) return;\n                const o = [];\n                return t.doc.descendants((r, i)=>{\n                    if (!r.attrs.id || !e.updatedBlocks.has(r.attrs.id)) return;\n                    const s = e.currentTransactionOldBlockAttrs[r.attrs.id], a = {};\n                    for (const [c, d] of Object.entries(s))a[\"data-prev-\" + Do[c]] = d || \"none\";\n                    const l = prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.Decoration.node(i, i + r.nodeSize, {\n                        ...a\n                    });\n                    o.push(l);\n                }), prosemirror_view__WEBPACK_IMPORTED_MODULE_31__.DecorationSet.create(t.doc, o);\n            }\n        }\n    });\n}, _o = {\n    blockColor: \"data-block-color\",\n    blockStyle: \"data-block-style\",\n    id: \"data-id\",\n    depth: \"data-depth\",\n    depthChange: \"data-depth-change\"\n}, Ro = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n    name: \"blockContainer\",\n    group: \"blockContainer\",\n    // A block always contains content, and optionally a blockGroup which contains nested blocks\n    content: \"blockContent blockGroup?\",\n    // Ensures content-specific keyboard handlers trigger first.\n    priority: 50,\n    defining: !0,\n    parseHTML () {\n        return [\n            {\n                tag: \"div\",\n                getAttrs: (n)=>{\n                    if (typeof n == \"string\") return !1;\n                    const t = {};\n                    for (const [e, o] of Object.entries(_o))n.getAttribute(o) && (t[e] = n.getAttribute(o));\n                    return n.getAttribute(\"data-node-type\") === \"blockContainer\" ? t : !1;\n                }\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        var r;\n        const t = document.createElement(\"div\");\n        t.className = \"bn-block-outer\", t.setAttribute(\"data-node-type\", \"blockOuter\");\n        for (const [i, s] of Object.entries(n))i !== \"class\" && t.setAttribute(i, s);\n        const e = {\n            ...((r = this.options.domAttributes) == null ? void 0 : r.blockContainer) || {},\n            ...n\n        }, o = document.createElement(\"div\");\n        o.className = z(\"bn-block\", e.class), o.setAttribute(\"data-node-type\", this.name);\n        for (const [i, s] of Object.entries(e))i !== \"class\" && o.setAttribute(i, s);\n        return t.appendChild(o), {\n            dom: t,\n            contentDOM: o\n        };\n    },\n    addCommands () {\n        return {\n            // Creates a new text block at a given position.\n            BNCreateBlock: (n)=>({ state: t, dispatch: e })=>{\n                    const o = t.schema.nodes.blockContainer.createAndFill();\n                    return e && t.tr.insert(n, o), !0;\n                },\n            // Deletes a block at a given position.\n            BNDeleteBlock: (n)=>({ state: t, dispatch: e })=>{\n                    const o = w(t.doc, n);\n                    if (o === void 0) return !1;\n                    const { startPos: r, endPos: i } = o;\n                    return e && t.tr.deleteRange(r, i), !0;\n                },\n            // Updates a block at a given position.\n            BNUpdateBlock: (n, t)=>({ state: e, dispatch: o })=>{\n                    const r = w(e.doc, n);\n                    if (r === void 0) return !1;\n                    const { startPos: i, endPos: s, node: a, contentNode: l } = r;\n                    if (o) {\n                        if (t.children !== void 0) {\n                            const m = [];\n                            for (const h of t.children)m.push(O(h, e.schema, this.options.editor.styleSchema));\n                            a.childCount === 2 ? e.tr.replace(i + l.nodeSize + 1, s - 1, new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(m), 0, 0)) : e.tr.insert(i + l.nodeSize, e.schema.nodes.blockGroup.create({}, m));\n                        }\n                        const c = l.type.name, d = t.type || c;\n                        let p = \"keep\";\n                        if (t.content) if (typeof t.content == \"string\") p = [\n                            e.schema.text(t.content)\n                        ];\n                        else if (Array.isArray(t.content)) p = bt(t.content, e.schema, this.options.editor.styleSchema);\n                        else if (t.content.type === \"tableContent\") p = Ut(t.content, e.schema, this.options.editor.styleSchema);\n                        else throw new A(t.content.type);\n                        else {\n                            const m = e.schema.nodes[c].spec.content, h = e.schema.nodes[d].spec.content;\n                            m === \"\" || h !== m && (p = []);\n                        }\n                        p === \"keep\" ? e.tr.setNodeMarkup(i, t.type === void 0 ? void 0 : e.schema.nodes[t.type], {\n                            ...l.attrs,\n                            ...t.props\n                        }) : e.tr.replaceWith(i, s, e.schema.nodes[d].create({\n                            ...l.attrs,\n                            ...t.props\n                        }, p)).setSelection(e.schema.nodes[d].spec.content === \"\" ? new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.NodeSelection(e.tr.doc.resolve(i)) : e.schema.nodes[d].spec.content === \"inline*\" ? new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.TextSelection(e.tr.doc.resolve(i)) : // Need to offset the position as we have to get through the\n                        // `tableRow` and `tableCell` nodes to get to the\n                        // `tableParagraph` node we want to set the selection in.\n                        new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.TextSelection(e.tr.doc.resolve(i + 4))), e.tr.setNodeMarkup(i - 1, void 0, {\n                            ...a.attrs,\n                            ...t.props\n                        });\n                    }\n                    return !0;\n                },\n            // Appends the text contents of a block to the nearest previous block, given a position between them. Children of\n            // the merged block are moved out of it first, rather than also being merged.\n            //\n            // In the example below, the position passed into the function is between Block1 and Block2.\n            //\n            // Block1\n            //    Block2\n            // Block3\n            //    Block4\n            //        Block5\n            //\n            // Becomes:\n            //\n            // Block1\n            //    Block2Block3\n            // Block4\n            //     Block5\n            BNMergeBlocks: (n)=>({ state: t, dispatch: e })=>{\n                    const o = t.doc.resolve(n + 1).node().type.name === \"blockContainer\", r = t.doc.resolve(n - 1).node().type.name === \"blockContainer\";\n                    if (!o || !r) return !1;\n                    const i = w(t.doc, n + 1), { node: s, contentNode: a, startPos: l, endPos: c, depth: d } = i;\n                    if (s.childCount === 2) {\n                        const h = t.doc.resolve(l + a.nodeSize + 1), f = t.doc.resolve(c - 1), y = h.blockRange(f);\n                        e && t.tr.lift(y, d - 1);\n                    }\n                    let p = n - 1, m = w(t.doc, p);\n                    for(; m.numChildBlocks > 0;)if (p--, m = w(t.doc, p), m === void 0) return !1;\n                    return e && (e(t.tr.deleteRange(l, l + a.nodeSize).replace(p - 1, l, new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(a.content, 0, 0)).scrollIntoView()), t.tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.TextSelection(t.doc.resolve(p - 1)))), !0;\n                },\n            // Splits a block at a given position. Content after the position is moved to a new block below, at the same\n            // nesting level.\n            BNSplitBlock: (n, t)=>({ state: e, dispatch: o })=>{\n                    const r = w(e.doc, n);\n                    if (r === void 0) return !1;\n                    const { contentNode: i, contentType: s, startPos: a, endPos: l, depth: c } = r, d = e.doc.cut(a + 1, n), p = e.doc.cut(n, l - 1), m = e.schema.nodes.blockContainer.createAndFill(), h = l + 1, f = h + 2;\n                    return o && (e.tr.insert(h, m), e.tr.replace(f, f + 1, p.content.size > 0 ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(p), c + 2, c + 2) : void 0), t && e.tr.setBlockType(f, f, e.schema.node(s).type, i.attrs), e.tr.setSelection(new prosemirror_state__WEBPACK_IMPORTED_MODULE_19__.TextSelection(e.doc.resolve(f))), e.tr.replace(a + 1, l - 1, d.content.size > 0 ? new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(d), c + 2, c + 2) : void 0)), !0;\n                }\n        };\n    },\n    addProseMirrorPlugins () {\n        return [\n            Oo(),\n            Po()\n        ];\n    },\n    addKeyboardShortcuts () {\n        return {\n            Backspace: ()=>this.editor.commands.first(({ commands: o })=>[\n                        // Deletes the selection if it's not empty.\n                        ()=>o.deleteSelection(),\n                        // Undoes an input rule if one was triggered in the last editor state change.\n                        ()=>o.undoInputRule(),\n                        // Reverts block content type to a paragraph if the selection is at the start of the block.\n                        ()=>o.command(({ state: r })=>{\n                                const { contentType: i, startPos: s } = w(r.doc, r.selection.from), a = r.selection.from === s + 1, l = i.name === \"paragraph\";\n                                return a && !l ? o.BNUpdateBlock(r.selection.from, {\n                                    type: \"paragraph\",\n                                    props: {}\n                                }) : !1;\n                            }),\n                        // Removes a level of nesting if the block is indented if the selection is at the start of the block.\n                        ()=>o.command(({ state: r })=>{\n                                const { startPos: i } = w(r.doc, r.selection.from);\n                                return r.selection.from === i + 1 ? o.liftListItem(\"blockContainer\") : !1;\n                            }),\n                        // Merges block with the previous one if it isn't indented, isn't the first block in the doc, and the selection\n                        // is at the start of the block.\n                        ()=>o.command(({ state: r })=>{\n                                const { depth: i, startPos: s } = w(r.doc, r.selection.from), a = r.selection.from === s + 1, l = r.selection.empty, c = s === 2, d = s - 1;\n                                return !c && a && l && i === 2 ? o.BNMergeBlocks(d) : !1;\n                            })\n                    ]),\n            Delete: ()=>this.editor.commands.first(({ commands: o })=>[\n                        // Deletes the selection if it's not empty.\n                        ()=>o.deleteSelection(),\n                        // Merges block with the next one (at the same nesting level or lower),\n                        // if one exists, the block has no children, and the selection is at the\n                        // end of the block.\n                        ()=>o.command(({ state: r })=>{\n                                const { node: i, depth: s, endPos: a } = w(r.doc, r.selection.from), l = a === r.doc.nodeSize - 4, c = r.selection.from === a - 1, d = r.selection.empty, p = i.childCount === 2;\n                                if (!l && c && d && !p) {\n                                    let m = s, h = a + 2, f = r.doc.resolve(h).depth;\n                                    for(; f < m;)m = f, h += 2, f = r.doc.resolve(h).depth;\n                                    return o.BNMergeBlocks(h - 1);\n                                }\n                                return !1;\n                            })\n                    ]),\n            Enter: ()=>this.editor.commands.first(({ commands: o })=>[\n                        // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start\n                        // of the block.\n                        ()=>o.command(({ state: r })=>{\n                                const { node: i, depth: s } = w(r.doc, r.selection.from), a = r.selection.$anchor.parentOffset === 0, l = r.selection.anchor === r.selection.head, c = i.textContent.length === 0, d = s > 2;\n                                return a && l && c && d ? o.liftListItem(\"blockContainer\") : !1;\n                            }),\n                        // Creates a new block and moves the selection to it if the current one is empty, while the selection is also\n                        // empty & at the start of the block.\n                        ()=>o.command(({ state: r, chain: i })=>{\n                                const { node: s, endPos: a } = w(r.doc, r.selection.from), l = r.selection.$anchor.parentOffset === 0, c = r.selection.anchor === r.selection.head, d = s.textContent.length === 0;\n                                if (l && c && d) {\n                                    const p = a + 1, m = p + 2;\n                                    return i().BNCreateBlock(p).setTextSelection(m).run(), !0;\n                                }\n                                return !1;\n                            }),\n                        // Splits the current block, moving content inside that's after the cursor to a new text block below. Also\n                        // deletes the selection beforehand, if it's not empty.\n                        ()=>o.command(({ state: r, chain: i })=>{\n                                const { node: s } = w(r.doc, r.selection.from), a = r.selection.$anchor.parentOffset === 0;\n                                return s.textContent.length === 0 ? !1 : (i().deleteSelection().BNSplitBlock(r.selection.from, a).run(), !0);\n                            })\n                    ]),\n            // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the\n            // editor since the browser will try to use tab for keyboard navigation.\n            Tab: ()=>(this.editor.commands.sinkListItem(\"blockContainer\"), !0),\n            \"Shift-Tab\": ()=>(this.editor.commands.liftListItem(\"blockContainer\"), !0)\n        };\n    }\n}), zo = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n    name: \"blockGroup\",\n    group: \"blockGroup\",\n    content: \"blockContainer+\",\n    parseHTML () {\n        return [\n            {\n                tag: \"div\",\n                getAttrs: (n)=>typeof n == \"string\" ? !1 : n.getAttribute(\"data-node-type\") === \"blockGroup\" ? null : !1\n            }\n        ];\n    },\n    renderHTML ({ HTMLAttributes: n }) {\n        var o;\n        const t = {\n            ...((o = this.options.domAttributes) == null ? void 0 : o.blockGroup) || {},\n            ...n\n        }, e = document.createElement(\"div\");\n        e.className = z(\"bn-block-group\", t.class), e.setAttribute(\"data-node-type\", \"blockGroup\");\n        for (const [r, i] of Object.entries(t))r !== \"class\" && e.setAttribute(r, i);\n        return {\n            dom: e,\n            contentDOM: e\n        };\n    }\n}), Vo = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Node.create({\n    name: \"doc\",\n    topNode: !0,\n    content: \"blockGroup\"\n}), Fo = (n)=>{\n    var e;\n    const t = [\n        _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.ClipboardTextSerializer,\n        _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.Commands,\n        _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.Editable,\n        _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.FocusEvents,\n        _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.extensions.Tabindex,\n        // DevTools,\n        _tiptap_extension_gapcursor__WEBPACK_IMPORTED_MODULE_12__.Gapcursor,\n        // DropCursor,\n        Io.configure({\n            includeChildren: !0,\n            showOnlyCurrent: !1\n        }),\n        Q.configure({\n            types: [\n                \"blockContainer\"\n            ]\n        }),\n        _tiptap_extension_hard_break__WEBPACK_IMPORTED_MODULE_13__.HardBreak,\n        // Comments,\n        // basics:\n        _tiptap_extension_text__WEBPACK_IMPORTED_MODULE_16__.Text,\n        // marks:\n        _tiptap_extension_link__WEBPACK_IMPORTED_MODULE_15__.Link,\n        ...Object.values(n.styleSpecs).map((o)=>o.implementation.mark),\n        Ho,\n        xo,\n        Lo,\n        // nodes\n        Vo,\n        Ro.configure({\n            editor: n.editor,\n            domAttributes: n.domAttributes\n        }),\n        zo.configure({\n            domAttributes: n.domAttributes\n        }),\n        ...Object.values(n.inlineContentSpecs).filter((o)=>o.config !== \"link\" && o.config !== \"text\").map((o)=>o.implementation.node.configure({\n                editor: n.editor\n            })),\n        ...Object.values(n.blockSpecs).flatMap((o)=>[\n                // dependent nodes (e.g.: tablecell / row)\n                ...(o.implementation.requiredExtensions || []).map((r)=>r.configure({\n                        editor: n.editor,\n                        domAttributes: n.domAttributes\n                    })),\n                // the actual node itself\n                o.implementation.node.configure({\n                    editor: n.editor,\n                    domAttributes: n.domAttributes\n                })\n            ]),\n        Co(n.editor),\n        Mo(n.editor),\n        _tiptap_extension_dropcursor__WEBPACK_IMPORTED_MODULE_11__.Dropcursor.configure({\n            width: 5,\n            color: \"#ddeeff\"\n        }),\n        // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),\n        // should be handled before Enter handlers in other components like splitListItem\n        No\n    ];\n    if (n.collaboration) {\n        if (t.push(_tiptap_extension_collaboration__WEBPACK_IMPORTED_MODULE_9__[\"default\"].configure({\n            fragment: n.collaboration.fragment\n        })), (e = n.collaboration.provider) != null && e.awareness) {\n            const o = (r)=>{\n                const i = document.createElement(\"span\");\n                i.classList.add(\"collaboration-cursor__caret\"), i.setAttribute(\"style\", `border-color: ${r.color}`);\n                const s = document.createElement(\"span\");\n                s.classList.add(\"collaboration-cursor__label\"), s.setAttribute(\"style\", `background-color: ${r.color}`), s.insertBefore(document.createTextNode(r.name), null);\n                const a = document.createTextNode(\"⁠\"), l = document.createTextNode(\"⁠\");\n                return i.insertBefore(a, null), i.insertBefore(s, null), i.insertBefore(l, null), i;\n            };\n            t.push(_tiptap_extension_collaboration_cursor__WEBPACK_IMPORTED_MODULE_10__[\"default\"].configure({\n                user: n.collaboration.user,\n                render: n.collaboration.renderCursor || o,\n                provider: n.collaboration.provider\n            }));\n        }\n    } else t.push(_tiptap_extension_history__WEBPACK_IMPORTED_MODULE_14__.History);\n    return t;\n};\nfunction Uo(n, t) {\n    const e = [];\n    return n.forEach((o, r, i)=>{\n        i !== t && e.push(o);\n    }), prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(e);\n}\nfunction $o(n, t) {\n    let e = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Fragment.from(n.content);\n    for(let o = 0; o < e.childCount; o++)if (e.child(o).type.spec.group === \"blockContent\") {\n        const r = [\n            e.child(o)\n        ];\n        if (o + 1 < e.childCount && e.child(o + 1).type.spec.group === \"blockGroup\") {\n            const s = e.child(o + 1).child(0).child(0);\n            (s.type.name === \"bulletListItem\" || s.type.name === \"numberedListItem\") && (r.push(e.child(o + 1)), e = Uo(e, o + 1));\n        }\n        const i = t.state.schema.nodes.blockContainer.create(void 0, r);\n        e = e.replaceChild(o, i);\n    }\n    return new prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Slice(e, n.openStart, n.openEnd);\n}\nconst Go = {\n    enableInputRules: !0,\n    enablePasteRules: !0,\n    enableCoreExtensions: !1\n};\nclass ce {\n    constructor(t){\n        u(this, \"_tiptapEditor\");\n        u(this, \"blockCache\", /* @__PURE__ */ new WeakMap());\n        u(this, \"blockSchema\");\n        u(this, \"inlineContentSchema\");\n        u(this, \"styleSchema\");\n        u(this, \"blockImplementations\");\n        u(this, \"inlineContentImplementations\");\n        u(this, \"styleImplementations\");\n        u(this, \"ready\", !1);\n        u(this, \"sideMenu\");\n        u(this, \"formattingToolbar\");\n        u(this, \"slashMenu\");\n        u(this, \"hyperlinkToolbar\");\n        u(this, \"imageToolbar\");\n        u(this, \"tableHandles\");\n        u(this, \"uploadFile\");\n        var l, c, d, p, m, h, f, y, S, E;\n        this.options = t;\n        const e = {\n            defaultStyles: !0,\n            blockSpecs: t.blockSpecs || ee,\n            styleSpecs: t.styleSpecs || oe,\n            inlineContentSpecs: t.inlineContentSpecs || re,\n            ...t\n        };\n        this.blockSchema = Yt(e.blockSpecs), this.inlineContentSchema = Zt(e.inlineContentSpecs), this.styleSchema = te(e.styleSpecs), this.blockImplementations = e.blockSpecs, this.inlineContentImplementations = e.inlineContentSpecs, this.styleImplementations = e.styleSpecs, this.sideMenu = new go(this), this.formattingToolbar = new no(this), this.slashMenu = new co(this, e.slashMenuItems || ko(this.blockSchema)), this.hyperlinkToolbar = new io(this), this.imageToolbar = new Sn(this), this.blockSchema.table === ne.table && (this.tableHandles = new Eo(this));\n        const o = Fo({\n            editor: this,\n            domAttributes: e.domAttributes || {},\n            blockSchema: this.blockSchema,\n            blockSpecs: e.blockSpecs,\n            styleSpecs: e.styleSpecs,\n            inlineContentSpecs: e.inlineContentSpecs,\n            collaboration: e.collaboration\n        }), r = _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Extension.create({\n            name: \"BlockNoteUIExtension\",\n            addProseMirrorPlugins: ()=>[\n                    this.sideMenu.plugin,\n                    this.formattingToolbar.plugin,\n                    this.slashMenu.plugin,\n                    this.hyperlinkToolbar.plugin,\n                    this.imageToolbar.plugin,\n                    ...this.tableHandles ? [\n                        this.tableHandles.plugin\n                    ] : []\n                ]\n        });\n        o.push(r), this.uploadFile = e.uploadFile, e.collaboration && e.initialContent && console.warn(\"When using Collaboration, initialContent might cause conflicts, because changes should come from the collaboration provider\");\n        const i = e.initialContent || (t.collaboration ? void 0 : [\n            {\n                type: \"paragraph\",\n                id: Q.options.generateID()\n            }\n        ]), s = this.styleSchema, a = {\n            ...Go,\n            ...e._tiptapOptions,\n            onBeforeCreate (k) {\n                var T, V;\n                (V = (T = e._tiptapOptions) == null ? void 0 : T.onBeforeCreate) == null || V.call(T, k);\n                const g = k.editor.schema;\n                let v;\n                const C = g.nodes.doc.createAndFill;\n                g.nodes.doc.createAndFill = (...K)=>{\n                    if (v) return v;\n                    const F = C.apply(g.nodes.doc, K), Ct = JSON.parse(JSON.stringify(F.toJSON()));\n                    return Ct.content[0].content[0].attrs.id = \"initialBlockId\", v = prosemirror_model__WEBPACK_IMPORTED_MODULE_20__.Node.fromJSON(g, Ct), v;\n                };\n                const b = g.node(\"doc\", void 0, g.node(\"blockGroup\", void 0, [\n                    O({\n                        id: \"initialBlockId\",\n                        type: \"paragraph\"\n                    }, g, s)\n                ]));\n                k.editor.options.content = b.toJSON();\n            },\n            onCreate: (k)=>{\n                var g, v, C;\n                (v = (g = e._tiptapOptions) == null ? void 0 : g.onCreate) == null || v.call(g, k), i !== void 0 && this.replaceBlocks(this.topLevelBlocks, i), (C = e.onEditorReady) == null || C.call(e, this), this.ready = !0;\n            },\n            onUpdate: (k)=>{\n                var g, v, C;\n                (v = (g = e._tiptapOptions) == null ? void 0 : g.onUpdate) == null || v.call(g, k), this.ready && ((C = e.onEditorContentChange) == null || C.call(e, this));\n            },\n            onSelectionUpdate: (k)=>{\n                var g, v, C;\n                (v = (g = e._tiptapOptions) == null ? void 0 : g.onSelectionUpdate) == null || v.call(g, k), this.ready && ((C = e.onTextCursorPositionChange) == null || C.call(e, this));\n            },\n            editable: t.editable !== void 0 ? t.editable : ((l = e._tiptapOptions) == null ? void 0 : l.editable) !== void 0 ? (c = e._tiptapOptions) == null ? void 0 : c.editable : !0,\n            extensions: e.enableBlockNoteExtensions === !1 ? ((d = e._tiptapOptions) == null ? void 0 : d.extensions) || [] : [\n                ...((p = e._tiptapOptions) == null ? void 0 : p.extensions) || [],\n                ...o\n            ],\n            editorProps: {\n                ...(m = e._tiptapOptions) == null ? void 0 : m.editorProps,\n                attributes: {\n                    ...(f = (h = e._tiptapOptions) == null ? void 0 : h.editorProps) == null ? void 0 : f.attributes,\n                    ...(y = e.domAttributes) == null ? void 0 : y.editor,\n                    class: z(\"bn-root\", \"bn-editor\", e.defaultStyles ? \"bn-default-styles\" : \"\", ((E = (S = e.domAttributes) == null ? void 0 : S.editor) == null ? void 0 : E.class) || \"\")\n                },\n                transformPasted: $o\n            }\n        };\n        e.parentElement && (a.element = e.parentElement), this._tiptapEditor = new _tiptap_core__WEBPACK_IMPORTED_MODULE_17__.Editor(a);\n    }\n    static create(t = {}) {\n        return new ce(t);\n    }\n    get prosemirrorView() {\n        return this._tiptapEditor.view;\n    }\n    get domElement() {\n        return this._tiptapEditor.view.dom;\n    }\n    isFocused() {\n        return this._tiptapEditor.view.hasFocus();\n    }\n    focus() {\n        this._tiptapEditor.view.focus();\n    }\n    /**\n   * Gets a snapshot of all top-level (non-nested) blocks in the editor.\n   * @returns A snapshot of all top-level (non-nested) blocks in the editor.\n   */ get topLevelBlocks() {\n        const t = [];\n        return this._tiptapEditor.state.doc.firstChild.descendants((e)=>(t.push(M(e, this.blockSchema, this.inlineContentSchema, this.styleSchema, this.blockCache)), !1)), t;\n    }\n    /**\n   * Gets a snapshot of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block that should be retrieved.\n   * @returns The block that matches the identifier, or `undefined` if no matching block was found.\n   */ getBlock(t) {\n        const e = typeof t == \"string\" ? t : t.id;\n        let o;\n        return this._tiptapEditor.state.doc.firstChild.descendants((r)=>typeof o < \"u\" ? !1 : r.type.name !== \"blockContainer\" || r.attrs.id !== e ? !0 : (o = M(r, this.blockSchema, this.inlineContentSchema, this.styleSchema, this.blockCache), !1)), o;\n    }\n    /**\n   * Traverses all blocks in the editor depth-first, and executes a callback for each.\n   * @param callback The callback to execute for each block. Returning `false` stops the traversal.\n   * @param reverse Whether the blocks should be traversed in reverse order.\n   */ forEachBlock(t, e = !1) {\n        const o = this.topLevelBlocks.slice();\n        e && o.reverse();\n        function r(i) {\n            for (const s of i){\n                if (!t(s)) return !1;\n                const a = e ? s.children.slice().reverse() : s.children;\n                if (!r(a)) return !1;\n            }\n            return !0;\n        }\n        r(o);\n    }\n    /**\n   * Executes a callback whenever the editor's contents change.\n   * @param callback The callback to execute.\n   */ onEditorContentChange(t) {\n        this._tiptapEditor.on(\"update\", t);\n    }\n    /**\n   * Executes a callback whenever the editor's selection changes.\n   * @param callback The callback to execute.\n   */ onEditorSelectionChange(t) {\n        this._tiptapEditor.on(\"selectionUpdate\", t);\n    }\n    /**\n   * Gets a snapshot of the current text cursor position.\n   * @returns A snapshot of the current text cursor position.\n   */ getTextCursorPosition() {\n        const { node: t, depth: e, startPos: o, endPos: r } = w(this._tiptapEditor.state.doc, this._tiptapEditor.state.selection.from), i = this._tiptapEditor.state.doc.resolve(r).index(e - 1), s = this._tiptapEditor.state.doc.resolve(r + 1).node().childCount;\n        let a;\n        i > 0 && (a = this._tiptapEditor.state.doc.resolve(o - 2).node());\n        let l;\n        return i < s - 1 && (l = this._tiptapEditor.state.doc.resolve(r + 2).node()), {\n            block: M(t, this.blockSchema, this.inlineContentSchema, this.styleSchema, this.blockCache),\n            prevBlock: a === void 0 ? void 0 : M(a, this.blockSchema, this.inlineContentSchema, this.styleSchema, this.blockCache),\n            nextBlock: l === void 0 ? void 0 : M(l, this.blockSchema, this.inlineContentSchema, this.styleSchema, this.blockCache)\n        };\n    }\n    /**\n   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could\n   * not be found.\n   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.\n   * @param placement Whether the text cursor should be placed at the start or end of the block.\n   */ setTextCursorPosition(t, e = \"start\") {\n        const o = typeof t == \"string\" ? t : t.id, { posBeforeNode: r } = wt(o, this._tiptapEditor.state.doc), { startPos: i, contentNode: s } = w(this._tiptapEditor.state.doc, r + 2), a = this.blockSchema[s.type.name].content;\n        if (a === \"none\") {\n            this._tiptapEditor.commands.setNodeSelection(i);\n            return;\n        }\n        if (a === \"inline\") e === \"start\" ? this._tiptapEditor.commands.setTextSelection(i + 1) : this._tiptapEditor.commands.setTextSelection(i + s.nodeSize - 1);\n        else if (a === \"table\") e === \"start\" ? this._tiptapEditor.commands.setTextSelection(i + 4) : this._tiptapEditor.commands.setTextSelection(i + s.nodeSize - 4);\n        else throw new A(a);\n    }\n    /**\n   * Gets a snapshot of the current selection.\n   */ getSelection() {\n        if (this._tiptapEditor.state.selection.from === this._tiptapEditor.state.selection.to || \"node\" in this._tiptapEditor.state.selection) return;\n        const t = [];\n        return this._tiptapEditor.state.doc.descendants((e, o)=>e.type.spec.group !== \"blockContent\" || o + e.nodeSize < this._tiptapEditor.state.selection.from || o > this._tiptapEditor.state.selection.to ? !0 : (t.push(M(this._tiptapEditor.state.doc.resolve(o).node(), this.blockSchema, this.inlineContentSchema, this.styleSchema, this.blockCache)), !1)), {\n            blocks: t\n        };\n    }\n    /**\n   * Checks if the editor is currently editable, or if it's locked.\n   * @returns True if the editor is editable, false otherwise.\n   */ get isEditable() {\n        return this._tiptapEditor.isEditable;\n    }\n    /**\n   * Makes the editor editable or locks it, depending on the argument passed.\n   * @param editable True to make the editor editable, or false to lock it.\n   */ set isEditable(t) {\n        this._tiptapEditor.setEditable(t);\n    }\n    /**\n   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an\n   * error if the reference block could not be found.\n   * @param blocksToInsert An array of partial blocks that should be inserted.\n   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.\n   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the\n   * `referenceBlock`. Inserts the blocks at the start of the existing block's children if \"nested\" is used.\n   */ insertBlocks(t, e, o = \"before\") {\n        return Un(t, e, o, this);\n    }\n    /**\n   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be\n   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could\n   * not be found.\n   * @param blockToUpdate The block that should be updated.\n   * @param update A partial block which defines how the existing block should be changed.\n   */ updateBlock(t, e) {\n        return $n(t, e, this);\n    }\n    /**\n   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.\n   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.\n   */ removeBlocks(t) {\n        return Gn(t, this);\n    }\n    /**\n   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or\n   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in\n   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.\n   * @param blocksToRemove An array of blocks that should be replaced.\n   * @param blocksToInsert An array of partial blocks to replace the old ones with.\n   */ replaceBlocks(t, e) {\n        return jn(t, e, this);\n    }\n    /**\n   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.\n   */ getActiveStyles() {\n        const t = {}, e = this._tiptapEditor.state.selection.$to.marks();\n        for (const o of e){\n            const r = this.styleSchema[o.type.name];\n            if (!r) {\n                console.warn(\"mark not found in styleschema\", o.type.name);\n                continue;\n            }\n            r.propSchema === \"boolean\" ? t[r.type] = !0 : t[r.type] = o.attrs.stringValue;\n        }\n        return t;\n    }\n    /**\n   * Adds styles to the currently selected content.\n   * @param styles The styles to add.\n   */ addStyles(t) {\n        this._tiptapEditor.view.focus();\n        for (const [e, o] of Object.entries(t)){\n            const r = this.styleSchema[e];\n            if (!r) throw new Error(`style ${e} not found in styleSchema`);\n            if (r.propSchema === \"boolean\") this._tiptapEditor.commands.setMark(e);\n            else if (r.propSchema === \"string\") this._tiptapEditor.commands.setMark(e, {\n                stringValue: o\n            });\n            else throw new A(r.propSchema);\n        }\n    }\n    /**\n   * Removes styles from the currently selected content.\n   * @param styles The styles to remove.\n   */ removeStyles(t) {\n        this._tiptapEditor.view.focus();\n        for (const e of Object.keys(t))this._tiptapEditor.commands.unsetMark(e);\n    }\n    /**\n   * Toggles styles on the currently selected content.\n   * @param styles The styles to toggle.\n   */ toggleStyles(t) {\n        this._tiptapEditor.view.focus();\n        for (const [e, o] of Object.entries(t)){\n            const r = this.styleSchema[e];\n            if (!r) throw new Error(`style ${e} not found in styleSchema`);\n            if (r.propSchema === \"boolean\") this._tiptapEditor.commands.toggleMark(e);\n            else if (r.propSchema === \"string\") this._tiptapEditor.commands.toggleMark(e, {\n                stringValue: o\n            });\n            else throw new A(r.propSchema);\n        }\n    }\n    /**\n   * Gets the currently selected text.\n   */ getSelectedText() {\n        return this._tiptapEditor.state.doc.textBetween(this._tiptapEditor.state.selection.from, this._tiptapEditor.state.selection.to);\n    }\n    /**\n   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.\n   */ getSelectedLinkUrl() {\n        return this._tiptapEditor.getAttributes(\"link\").href;\n    }\n    /**\n   * Creates a new link to replace the selected content.\n   * @param url The link URL.\n   * @param text The text to display the link with.\n   */ createLink(t, e) {\n        if (t === \"\") return;\n        const { from: o, to: r } = this._tiptapEditor.state.selection;\n        e || (e = this._tiptapEditor.state.doc.textBetween(o, r));\n        const i = this._tiptapEditor.schema.mark(\"link\", {\n            href: t\n        });\n        this._tiptapEditor.view.dispatch(this._tiptapEditor.view.state.tr.insertText(e, o, r).addMark(o, o + e.length, i));\n    }\n    /**\n   * Checks if the block containing the text cursor can be nested.\n   */ canNestBlock() {\n        const { startPos: t, depth: e } = w(this._tiptapEditor.state.doc, this._tiptapEditor.state.selection.from);\n        return this._tiptapEditor.state.doc.resolve(t).index(e - 1) > 0;\n    }\n    /**\n   * Nests the block containing the text cursor into the block above it.\n   */ nestBlock() {\n        this._tiptapEditor.commands.sinkListItem(\"blockContainer\");\n    }\n    /**\n   * Checks if the block containing the text cursor is nested.\n   */ canUnnestBlock() {\n        const { depth: t } = w(this._tiptapEditor.state.doc, this._tiptapEditor.state.selection.from);\n        return t > 2;\n    }\n    /**\n   * Lifts the block containing the text cursor out of its parent.\n   */ unnestBlock() {\n        this._tiptapEditor.commands.liftListItem(\"blockContainer\");\n    }\n    // TODO: Fix when implementing HTML/Markdown import & export\n    /**\n   * Serializes blocks into an HTML string. To better conform to HTML standards, children of blocks which aren't list\n   * items are un-nested in the output HTML.\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */ async blocksToHTMLLossy(t = this.topLevelBlocks) {\n        return st(this._tiptapEditor.schema, this).exportBlocks(t);\n    }\n    /**\n   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and\n   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote\n   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.\n   * @param html The HTML string to parse blocks from.\n   * @returns The blocks parsed from the HTML string.\n   */ async tryParseHTMLToBlocks(t) {\n        return ae(t, this.blockSchema, this.inlineContentSchema, this.styleSchema, this._tiptapEditor.schema);\n    }\n    /**\n   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of\n   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.\n   * @param blocks An array of blocks that should be serialized into Markdown.\n   * @returns The blocks, serialized as a Markdown string.\n   */ async blocksToMarkdownLossy(t = this.topLevelBlocks) {\n        return qn(t, this._tiptapEditor.schema, this);\n    }\n    /**\n   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on\n   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it\n   * as text.\n   * @param markdown The Markdown string to parse blocks from.\n   * @returns The blocks parsed from the Markdown string.\n   */ async tryParseMarkdownToBlocks(t) {\n        return Qn(t, this.blockSchema, this.inlineContentSchema, this.styleSchema, this._tiptapEditor.schema);\n    }\n    /**\n   * Updates the user info for the current user that's shown to other collaborators.\n   */ updateCollaborationUserInfo(t) {\n        if (!this.options.collaboration) throw new Error(\"Cannot update collaboration user info when collaboration is disabled.\");\n        this._tiptapEditor.commands.updateUser(t);\n    }\n}\nfunction ct(n = \"\") {\n    return typeof n == \"string\" ? [\n        {\n            type: \"text\",\n            text: n,\n            styles: {}\n        }\n    ] : n;\n}\nfunction de(n) {\n    return typeof n == \"string\" ? ct(n) : Array.isArray(n) ? n.flatMap((t)=>typeof t == \"string\" ? ct(t) : Ft(t) ? {\n            ...t,\n            content: ct(t.content)\n        } : Z(t) ? t : {\n            props: {},\n            ...t,\n            content: de(t.content)\n        }) : n;\n}\nfunction Hr(n, t) {\n    return t.map((e)=>ue(n, e));\n}\nfunction ue(n, t) {\n    const e = {\n        id: \"\",\n        type: t.type,\n        props: {},\n        content: n[t.type].content === \"inline\" ? [] : void 0,\n        children: [],\n        ...t\n    };\n    return Object.entries(n[t.type].propSchema).forEach(([o, r])=>{\n        e.props[o] === void 0 && (e.props[o] = r.default);\n    }), {\n        ...e,\n        content: de(e.content),\n        children: e.children.map((o)=>ue(n, o))\n    };\n}\nfunction jo(n) {\n    n.id || (n.id = Q.options.generateID()), n.children && Wo(n.children);\n}\nfunction Wo(n) {\n    for (const t of n)jo(t);\n}\n //# sourceMappingURL=blocknote.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/core/dist/blocknote.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@blocknote/react/dist/blocknote-react.js":
/*!***************************************************************!*\
  !*** ./node_modules/@blocknote/react/dist/blocknote-react.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AddBlockButton: () => (/* binding */ Kr),\n/* harmony export */   BlockColorsButton: () => (/* binding */ Gr),\n/* harmony export */   BlockContentWrapper: () => (/* binding */ De),\n/* harmony export */   BlockNoteView: () => (/* binding */ Po),\n/* harmony export */   BlockTypeDropdown: () => (/* binding */ Nr),\n/* harmony export */   ColorStyleButton: () => (/* binding */ dr),\n/* harmony export */   CreateLinkButton: () => (/* binding */ Rr),\n/* harmony export */   DefaultDragHandleMenu: () => (/* binding */ Qr),\n/* harmony export */   DefaultFormattingToolbar: () => (/* binding */ Zr),\n/* harmony export */   DefaultImageToolbar: () => (/* binding */ Gt),\n/* harmony export */   DefaultSideMenu: () => (/* binding */ no),\n/* harmony export */   DefaultSlashMenu: () => (/* binding */ ao),\n/* harmony export */   DefaultTableHandle: () => (/* binding */ xo),\n/* harmony export */   DragHandle: () => (/* binding */ eo),\n/* harmony export */   DragHandleMenu: () => (/* binding */ Xr),\n/* harmony export */   DragHandleMenuItem: () => (/* binding */ Qt),\n/* harmony export */   FormattingToolbarPositioner: () => (/* binding */ Ur),\n/* harmony export */   HyperlinkToolbarPositioner: () => (/* binding */ Wr),\n/* harmony export */   ImageCaptionButton: () => (/* binding */ Mr),\n/* harmony export */   ImageToolbarPositioner: () => (/* binding */ Yr),\n/* harmony export */   NestBlockButton: () => (/* binding */ Er),\n/* harmony export */   RemoveBlockButton: () => (/* binding */ Jr),\n/* harmony export */   ReplaceImageButton: () => (/* binding */ Lr),\n/* harmony export */   SideMenu: () => (/* binding */ to),\n/* harmony export */   SideMenuButton: () => (/* binding */ Jt),\n/* harmony export */   SideMenuPositioner: () => (/* binding */ ro),\n/* harmony export */   SlashMenuItem: () => (/* binding */ io),\n/* harmony export */   SlashMenuPositioner: () => (/* binding */ lo),\n/* harmony export */   TableHandlesPositioner: () => (/* binding */ vo),\n/* harmony export */   TextAlignButton: () => (/* binding */ _e),\n/* harmony export */   ToggledStyleButton: () => (/* binding */ je),\n/* harmony export */   Toolbar: () => (/* binding */ $e),\n/* harmony export */   ToolbarButton: () => (/* binding */ F),\n/* harmony export */   ToolbarDropdown: () => (/* binding */ Fr),\n/* harmony export */   UnnestBlockButton: () => (/* binding */ Vr),\n/* harmony export */   applyBlockNoteCSSVariablesFromTheme: () => (/* binding */ xt),\n/* harmony export */   createReactBlockSpec: () => (/* binding */ Ao),\n/* harmony export */   createReactInlineContentSpec: () => (/* binding */ Fo),\n/* harmony export */   createReactStyleSpec: () => (/* binding */ zo),\n/* harmony export */   darkDefaultTheme: () => (/* binding */ _o),\n/* harmony export */   defaultBlockTypeDropdownItems: () => (/* binding */ zr),\n/* harmony export */   defaultColorScheme: () => (/* binding */ j),\n/* harmony export */   getDefaultReactSlashMenuItems: () => (/* binding */ Co),\n/* harmony export */   lightDefaultTheme: () => (/* binding */ St),\n/* harmony export */   reactWrapInInlineContentStructure: () => (/* binding */ Ho),\n/* harmony export */   removeBlockNoteCSSVariables: () => (/* binding */ or),\n/* harmony export */   useActiveStyles: () => (/* binding */ Do),\n/* harmony export */   useBlockNote: () => (/* binding */ Io),\n/* harmony export */   useEditorChange: () => (/* binding */ G),\n/* harmony export */   useEditorContentChange: () => (/* binding */ Dt),\n/* harmony export */   useEditorForceUpdate: () => (/* binding */ Oo),\n/* harmony export */   useEditorSelectionChange: () => (/* binding */ It),\n/* harmony export */   useSelectedBlocks: () => (/* binding */ ee)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _blocknote_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @blocknote/core */ \"(ssr)/./node_modules/@blocknote/core/dist/blocknote.js\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Group/Group.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/core/Box/Box.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Menu/Menu.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Stack/Stack.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Text/Text.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Tooltip/Tooltip.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Button/Button.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/ActionIcon/ActionIcon.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Popover/Popover.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/TextInput/TextInput.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/FileInput/FileInput.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Tabs/Tabs.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/LoadingOverlay/LoadingOverlay.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/components/Badge/Badge.mjs\");\n/* harmony import */ var _mantine_core__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! @mantine/core */ \"(ssr)/./node_modules/@mantine/core/esm/core/MantineProvider/MantineProvider.mjs\");\n/* harmony import */ var _tiptap_react__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @tiptap/react */ \"(ssr)/./node_modules/@tiptap/react/dist/index.js\");\n/* harmony import */ var _tiptap_react__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! @tiptap/react */ \"(ssr)/./node_modules/@tiptap/core/dist/index.js\");\n/* harmony import */ var use_prefers_color_scheme__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! use-prefers-color-scheme */ \"(ssr)/./node_modules/use-prefers-color-scheme/dist/index.esm.js\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var _floating_ui_react__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @floating-ui/react */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var lodash_foreach__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash.foreach */ \"(ssr)/./node_modules/lodash.foreach/index.js\");\n/* harmony import */ var lodash_groupby__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash.groupby */ \"(ssr)/./node_modules/lodash.groupby/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n\n\n\n\n\n\n\n\n\nconst _t = (e, r, o = !1)=>{\n    const i = [];\n    function a(l, u = \"--bn\") {\n        for(const d in l){\n            const s = d.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase(), h = `${u}-${s}`;\n            typeof l[d] != \"object\" ? (typeof l[d] == \"number\" && (l[d] = `${l[d]}px`), o ? r.style.removeProperty(h) : r.style.setProperty(h, l[d].toString())) : a(l[d], h);\n        }\n    }\n    return a(e), i;\n}, xt = (e, r)=>_t(e, r), rr = {\n    colors: {\n        editor: {\n            text: void 0,\n            background: void 0\n        },\n        menu: {\n            text: void 0,\n            background: void 0\n        },\n        tooltip: {\n            text: void 0,\n            background: void 0\n        },\n        hovered: {\n            text: void 0,\n            background: void 0\n        },\n        selected: {\n            text: void 0,\n            background: void 0\n        },\n        disabled: {\n            text: void 0,\n            background: void 0\n        },\n        shadow: void 0,\n        border: void 0,\n        sideMenu: void 0,\n        highlights: {\n            gray: {\n                text: void 0,\n                background: void 0\n            },\n            brown: {\n                text: void 0,\n                background: void 0\n            },\n            red: {\n                text: void 0,\n                background: void 0\n            },\n            orange: {\n                text: void 0,\n                background: void 0\n            },\n            yellow: {\n                text: void 0,\n                background: void 0\n            },\n            green: {\n                text: void 0,\n                background: void 0\n            },\n            blue: {\n                text: void 0,\n                background: void 0\n            },\n            purple: {\n                text: void 0,\n                background: void 0\n            },\n            pink: {\n                text: void 0,\n                background: void 0\n            }\n        }\n    },\n    borderRadius: void 0,\n    fontFamily: void 0\n}, or = (e)=>_t(rr, e, !0);\nvar Ie = {\n    exports: {}\n}, ce = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var vt;\nfunction ir() {\n    if (vt) return ce;\n    vt = 1;\n    var e = react__WEBPACK_IMPORTED_MODULE_0__, r = Symbol.for(\"react.element\"), o = Symbol.for(\"react.fragment\"), i = Object.prototype.hasOwnProperty, a = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, l = {\n        key: !0,\n        ref: !0,\n        __self: !0,\n        __source: !0\n    };\n    function u(d, s, h) {\n        var x, k = {}, T = null, m = null;\n        h !== void 0 && (T = \"\" + h), s.key !== void 0 && (T = \"\" + s.key), s.ref !== void 0 && (m = s.ref);\n        for(x in s)i.call(s, x) && !l.hasOwnProperty(x) && (k[x] = s[x]);\n        if (d && d.defaultProps) for(x in s = d.defaultProps, s)k[x] === void 0 && (k[x] = s[x]);\n        return {\n            $$typeof: r,\n            type: d,\n            key: T,\n            ref: m,\n            props: k,\n            _owner: a.current\n        };\n    }\n    return ce.Fragment = o, ce.jsx = u, ce.jsxs = u, ce;\n}\nvar se = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ var kt;\nfunction ar() {\n    return kt || (kt = 1,  true && function() {\n        var e = react__WEBPACK_IMPORTED_MODULE_0__, r = Symbol.for(\"react.element\"), o = Symbol.for(\"react.portal\"), i = Symbol.for(\"react.fragment\"), a = Symbol.for(\"react.strict_mode\"), l = Symbol.for(\"react.profiler\"), u = Symbol.for(\"react.provider\"), d = Symbol.for(\"react.context\"), s = Symbol.for(\"react.forward_ref\"), h = Symbol.for(\"react.suspense\"), x = Symbol.for(\"react.suspense_list\"), k = Symbol.for(\"react.memo\"), T = Symbol.for(\"react.lazy\"), m = Symbol.for(\"react.offscreen\"), I = Symbol.iterator, p = \"@@iterator\";\n        function N(t) {\n            if (t === null || typeof t != \"object\") return null;\n            var c = I && t[I] || t[p];\n            return typeof c == \"function\" ? c : null;\n        }\n        var q = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function M(t) {\n            {\n                for(var c = arguments.length, f = new Array(c > 1 ? c - 1 : 0), g = 1; g < c; g++)f[g - 1] = arguments[g];\n                O(\"error\", t, f);\n            }\n        }\n        function O(t, c, f) {\n            {\n                var g = q.ReactDebugCurrentFrame, C = g.getStackAddendum();\n                C !== \"\" && (c += \"%s\", f = f.concat([\n                    C\n                ]));\n                var H = f.map(function(y) {\n                    return String(y);\n                });\n                H.unshift(\"Warning: \" + c), Function.prototype.apply.call(console[t], console, H);\n            }\n        }\n        var Z = !1, U = !1, he = !1, me = !1, be = !1, P;\n        P = Symbol.for(\"react.module.reference\");\n        function en(t) {\n            return !!(typeof t == \"string\" || typeof t == \"function\" || t === i || t === l || be || t === a || t === h || t === x || me || t === m || Z || U || he || typeof t == \"object\" && t !== null && (t.$$typeof === T || t.$$typeof === k || t.$$typeof === u || t.$$typeof === d || t.$$typeof === s || // This needs to include all possible module reference object\n            // types supported by any Flight configuration anywhere since\n            // we don't know which Flight build this will end up being used\n            // with.\n            t.$$typeof === P || t.getModuleId !== void 0));\n        }\n        function tn(t, c, f) {\n            var g = t.displayName;\n            if (g) return g;\n            var C = c.displayName || c.name || \"\";\n            return C !== \"\" ? f + \"(\" + C + \")\" : f;\n        }\n        function Ye(t) {\n            return t.displayName || \"Context\";\n        }\n        function $(t) {\n            if (t == null) return null;\n            if (typeof t.tag == \"number\" && M(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof t == \"function\") return t.displayName || t.name || null;\n            if (typeof t == \"string\") return t;\n            switch(t){\n                case i:\n                    return \"Fragment\";\n                case o:\n                    return \"Portal\";\n                case l:\n                    return \"Profiler\";\n                case a:\n                    return \"StrictMode\";\n                case h:\n                    return \"Suspense\";\n                case x:\n                    return \"SuspenseList\";\n            }\n            if (typeof t == \"object\") switch(t.$$typeof){\n                case d:\n                    var c = t;\n                    return Ye(c) + \".Consumer\";\n                case u:\n                    var f = t;\n                    return Ye(f._context) + \".Provider\";\n                case s:\n                    return tn(t, t.render, \"ForwardRef\");\n                case k:\n                    var g = t.displayName || null;\n                    return g !== null ? g : $(t.type) || \"Memo\";\n                case T:\n                    {\n                        var C = t, H = C._payload, y = C._init;\n                        try {\n                            return $(y(H));\n                        } catch  {\n                            return null;\n                        }\n                    }\n            }\n            return null;\n        }\n        var J = Object.assign, ae = 0, qe, Ke, Ge, Je, Xe, Qe, et;\n        function tt() {}\n        tt.__reactDisabledLog = !0;\n        function nn() {\n            {\n                if (ae === 0) {\n                    qe = console.log, Ke = console.info, Ge = console.warn, Je = console.error, Xe = console.group, Qe = console.groupCollapsed, et = console.groupEnd;\n                    var t = {\n                        configurable: !0,\n                        enumerable: !0,\n                        value: tt,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        info: t,\n                        log: t,\n                        warn: t,\n                        error: t,\n                        group: t,\n                        groupCollapsed: t,\n                        groupEnd: t\n                    });\n                }\n                ae++;\n            }\n        }\n        function rn() {\n            {\n                if (ae--, ae === 0) {\n                    var t = {\n                        configurable: !0,\n                        enumerable: !0,\n                        writable: !0\n                    };\n                    Object.defineProperties(console, {\n                        log: J({}, t, {\n                            value: qe\n                        }),\n                        info: J({}, t, {\n                            value: Ke\n                        }),\n                        warn: J({}, t, {\n                            value: Ge\n                        }),\n                        error: J({}, t, {\n                            value: Je\n                        }),\n                        group: J({}, t, {\n                            value: Xe\n                        }),\n                        groupCollapsed: J({}, t, {\n                            value: Qe\n                        }),\n                        groupEnd: J({}, t, {\n                            value: et\n                        })\n                    });\n                }\n                ae < 0 && M(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n            }\n        }\n        var pe = q.ReactCurrentDispatcher, Re;\n        function xe(t, c, f) {\n            {\n                if (Re === void 0) try {\n                    throw Error();\n                } catch (C) {\n                    var g = C.stack.trim().match(/\\n( *(at )?)/);\n                    Re = g && g[1] || \"\";\n                }\n                return `\n` + Re + t;\n            }\n        }\n        var Me = !1, ve;\n        {\n            var on = typeof WeakMap == \"function\" ? WeakMap : Map;\n            ve = new on();\n        }\n        function nt(t, c) {\n            if (!t || Me) return \"\";\n            {\n                var f = ve.get(t);\n                if (f !== void 0) return f;\n            }\n            var g;\n            Me = !0;\n            var C = Error.prepareStackTrace;\n            Error.prepareStackTrace = void 0;\n            var H;\n            H = pe.current, pe.current = null, nn();\n            try {\n                if (c) {\n                    var y = function() {\n                        throw Error();\n                    };\n                    if (Object.defineProperty(y.prototype, \"props\", {\n                        set: function() {\n                            throw Error();\n                        }\n                    }), typeof Reflect == \"object\" && Reflect.construct) {\n                        try {\n                            Reflect.construct(y, []);\n                        } catch (W) {\n                            g = W;\n                        }\n                        Reflect.construct(t, [], y);\n                    } else {\n                        try {\n                            y.call();\n                        } catch (W) {\n                            g = W;\n                        }\n                        t.call(y.prototype);\n                    }\n                } else {\n                    try {\n                        throw Error();\n                    } catch (W) {\n                        g = W;\n                    }\n                    t();\n                }\n            } catch (W) {\n                if (W && g && typeof W.stack == \"string\") {\n                    for(var v = W.stack.split(`\n`), B = g.stack.split(`\n`), E = v.length - 1, V = B.length - 1; E >= 1 && V >= 0 && v[E] !== B[V];)V--;\n                    for(; E >= 1 && V >= 0; E--, V--)if (v[E] !== B[V]) {\n                        if (E !== 1 || V !== 1) do if (E--, V--, V < 0 || v[E] !== B[V]) {\n                            var _ = `\n` + v[E].replace(\" at new \", \" at \");\n                            return t.displayName && _.includes(\"<anonymous>\") && (_ = _.replace(\"<anonymous>\", t.displayName)), typeof t == \"function\" && ve.set(t, _), _;\n                        }\n                        while (E >= 1 && V >= 0);\n                        break;\n                    }\n                }\n            } finally{\n                Me = !1, pe.current = H, rn(), Error.prepareStackTrace = C;\n            }\n            var ne = t ? t.displayName || t.name : \"\", mt = ne ? xe(ne) : \"\";\n            return typeof t == \"function\" && ve.set(t, mt), mt;\n        }\n        function an(t, c, f) {\n            return nt(t, !1);\n        }\n        function ln(t) {\n            var c = t.prototype;\n            return !!(c && c.isReactComponent);\n        }\n        function ke(t, c, f) {\n            if (t == null) return \"\";\n            if (typeof t == \"function\") return nt(t, ln(t));\n            if (typeof t == \"string\") return xe(t);\n            switch(t){\n                case h:\n                    return xe(\"Suspense\");\n                case x:\n                    return xe(\"SuspenseList\");\n            }\n            if (typeof t == \"object\") switch(t.$$typeof){\n                case s:\n                    return an(t.render);\n                case k:\n                    return ke(t.type, c, f);\n                case T:\n                    {\n                        var g = t, C = g._payload, H = g._init;\n                        try {\n                            return ke(H(C), c, f);\n                        } catch  {}\n                    }\n            }\n            return \"\";\n        }\n        var ye = Object.prototype.hasOwnProperty, rt = {}, ot = q.ReactDebugCurrentFrame;\n        function Ce(t) {\n            if (t) {\n                var c = t._owner, f = ke(t.type, t._source, c ? c.type : null);\n                ot.setExtraStackFrame(f);\n            } else ot.setExtraStackFrame(null);\n        }\n        function cn(t, c, f, g, C) {\n            {\n                var H = Function.call.bind(ye);\n                for(var y in t)if (H(t, y)) {\n                    var v = void 0;\n                    try {\n                        if (typeof t[y] != \"function\") {\n                            var B = Error((g || \"React class\") + \": \" + f + \" type `\" + y + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof t[y] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                            throw B.name = \"Invariant Violation\", B;\n                        }\n                        v = t[y](c, y, g, f, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                    } catch (E) {\n                        v = E;\n                    }\n                    v && !(v instanceof Error) && (Ce(C), M(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", g || \"React class\", f, y, typeof v), Ce(null)), v instanceof Error && !(v.message in rt) && (rt[v.message] = !0, Ce(C), M(\"Failed %s type: %s\", f, v.message), Ce(null));\n                }\n            }\n        }\n        var sn = Array.isArray;\n        function Ee(t) {\n            return sn(t);\n        }\n        function dn(t) {\n            {\n                var c = typeof Symbol == \"function\" && Symbol.toStringTag, f = c && t[Symbol.toStringTag] || t.constructor.name || \"Object\";\n                return f;\n            }\n        }\n        function un(t) {\n            try {\n                return it(t), !1;\n            } catch  {\n                return !0;\n            }\n        }\n        function it(t) {\n            return \"\" + t;\n        }\n        function at(t) {\n            if (un(t)) return M(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", dn(t)), it(t);\n        }\n        var le = q.ReactCurrentOwner, fn = {\n            key: !0,\n            ref: !0,\n            __self: !0,\n            __source: !0\n        }, lt, ct, Ve;\n        Ve = {};\n        function gn(t) {\n            if (ye.call(t, \"ref\")) {\n                var c = Object.getOwnPropertyDescriptor(t, \"ref\").get;\n                if (c && c.isReactWarning) return !1;\n            }\n            return t.ref !== void 0;\n        }\n        function hn(t) {\n            if (ye.call(t, \"key\")) {\n                var c = Object.getOwnPropertyDescriptor(t, \"key\").get;\n                if (c && c.isReactWarning) return !1;\n            }\n            return t.key !== void 0;\n        }\n        function mn(t, c) {\n            if (typeof t.ref == \"string\" && le.current && c && le.current.stateNode !== c) {\n                var f = $(le.current.type);\n                Ve[f] || (M('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', $(le.current.type), t.ref), Ve[f] = !0);\n            }\n        }\n        function bn(t, c) {\n            {\n                var f = function() {\n                    lt || (lt = !0, M(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", c));\n                };\n                f.isReactWarning = !0, Object.defineProperty(t, \"key\", {\n                    get: f,\n                    configurable: !0\n                });\n            }\n        }\n        function xn(t, c) {\n            {\n                var f = function() {\n                    ct || (ct = !0, M(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", c));\n                };\n                f.isReactWarning = !0, Object.defineProperty(t, \"ref\", {\n                    get: f,\n                    configurable: !0\n                });\n            }\n        }\n        var vn = function(t, c, f, g, C, H, y) {\n            var v = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: r,\n                // Built-in properties that belong on the element\n                type: t,\n                key: c,\n                ref: f,\n                props: y,\n                // Record the component responsible for creating this element.\n                _owner: H\n            };\n            return v._store = {}, Object.defineProperty(v._store, \"validated\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !0,\n                value: !1\n            }), Object.defineProperty(v, \"_self\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: g\n            }), Object.defineProperty(v, \"_source\", {\n                configurable: !1,\n                enumerable: !1,\n                writable: !1,\n                value: C\n            }), Object.freeze && (Object.freeze(v.props), Object.freeze(v)), v;\n        };\n        function kn(t, c, f, g, C) {\n            {\n                var H, y = {}, v = null, B = null;\n                f !== void 0 && (at(f), v = \"\" + f), hn(c) && (at(c.key), v = \"\" + c.key), gn(c) && (B = c.ref, mn(c, C));\n                for(H in c)ye.call(c, H) && !fn.hasOwnProperty(H) && (y[H] = c[H]);\n                if (t && t.defaultProps) {\n                    var E = t.defaultProps;\n                    for(H in E)y[H] === void 0 && (y[H] = E[H]);\n                }\n                if (v || B) {\n                    var V = typeof t == \"function\" ? t.displayName || t.name || \"Unknown\" : t;\n                    v && bn(y, V), B && xn(y, V);\n                }\n                return vn(t, v, B, C, g, le.current, y);\n            }\n        }\n        var Le = q.ReactCurrentOwner, st = q.ReactDebugCurrentFrame;\n        function te(t) {\n            if (t) {\n                var c = t._owner, f = ke(t.type, t._source, c ? c.type : null);\n                st.setExtraStackFrame(f);\n            } else st.setExtraStackFrame(null);\n        }\n        var Be;\n        Be = !1;\n        function Pe(t) {\n            return typeof t == \"object\" && t !== null && t.$$typeof === r;\n        }\n        function dt() {\n            {\n                if (Le.current) {\n                    var t = $(Le.current.type);\n                    if (t) return `\n\nCheck the render method of \\`` + t + \"`.\";\n                }\n                return \"\";\n            }\n        }\n        function yn(t) {\n            {\n                if (t !== void 0) {\n                    var c = t.fileName.replace(/^.*[\\\\\\/]/, \"\"), f = t.lineNumber;\n                    return `\n\nCheck your code at ` + c + \":\" + f + \".\";\n                }\n                return \"\";\n            }\n        }\n        var ut = {};\n        function Cn(t) {\n            {\n                var c = dt();\n                if (!c) {\n                    var f = typeof t == \"string\" ? t : t.displayName || t.name;\n                    f && (c = `\n\nCheck the top-level render call using <` + f + \">.\");\n                }\n                return c;\n            }\n        }\n        function ft(t, c) {\n            {\n                if (!t._store || t._store.validated || t.key != null) return;\n                t._store.validated = !0;\n                var f = Cn(c);\n                if (ut[f]) return;\n                ut[f] = !0;\n                var g = \"\";\n                t && t._owner && t._owner !== Le.current && (g = \" It was passed a child from \" + $(t._owner.type) + \".\"), te(t), M('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', f, g), te(null);\n            }\n        }\n        function gt(t, c) {\n            {\n                if (typeof t != \"object\") return;\n                if (Ee(t)) for(var f = 0; f < t.length; f++){\n                    var g = t[f];\n                    Pe(g) && ft(g, c);\n                }\n                else if (Pe(t)) t._store && (t._store.validated = !0);\n                else if (t) {\n                    var C = N(t);\n                    if (typeof C == \"function\" && C !== t.entries) for(var H = C.call(t), y; !(y = H.next()).done;)Pe(y.value) && ft(y.value, c);\n                }\n            }\n        }\n        function jn(t) {\n            {\n                var c = t.type;\n                if (c == null || typeof c == \"string\") return;\n                var f;\n                if (typeof c == \"function\") f = c.propTypes;\n                else if (typeof c == \"object\" && (c.$$typeof === s || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                c.$$typeof === k)) f = c.propTypes;\n                else return;\n                if (f) {\n                    var g = $(c);\n                    cn(f, t.props, \"prop\", g, t);\n                } else if (c.PropTypes !== void 0 && !Be) {\n                    Be = !0;\n                    var C = $(c);\n                    M(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", C || \"Unknown\");\n                }\n                typeof c.getDefaultProps == \"function\" && !c.getDefaultProps.isReactClassApproved && M(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n            }\n        }\n        function Sn(t) {\n            {\n                for(var c = Object.keys(t.props), f = 0; f < c.length; f++){\n                    var g = c[f];\n                    if (g !== \"children\" && g !== \"key\") {\n                        te(t), M(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", g), te(null);\n                        break;\n                    }\n                }\n                t.ref !== null && (te(t), M(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), te(null));\n            }\n        }\n        function ht(t, c, f, g, C, H) {\n            {\n                var y = en(t);\n                if (!y) {\n                    var v = \"\";\n                    (t === void 0 || typeof t == \"object\" && t !== null && Object.keys(t).length === 0) && (v += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n                    var B = yn(C);\n                    B ? v += B : v += dt();\n                    var E;\n                    t === null ? E = \"null\" : Ee(t) ? E = \"array\" : t !== void 0 && t.$$typeof === r ? (E = \"<\" + ($(t.type) || \"Unknown\") + \" />\", v = \" Did you accidentally export a JSX literal instead of a component?\") : E = typeof t, M(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", E, v);\n                }\n                var V = kn(t, c, f, C, H);\n                if (V == null) return V;\n                if (y) {\n                    var _ = c.children;\n                    if (_ !== void 0) if (g) if (Ee(_)) {\n                        for(var ne = 0; ne < _.length; ne++)gt(_[ne], t);\n                        Object.freeze && Object.freeze(_);\n                    } else M(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n                    else gt(_, t);\n                }\n                return t === i ? Sn(V) : jn(V), V;\n            }\n        }\n        function Hn(t, c, f) {\n            return ht(t, c, f, !0);\n        }\n        function wn(t, c, f) {\n            return ht(t, c, f, !1);\n        }\n        var Tn = wn, pn = Hn;\n        se.Fragment = i, se.jsx = Tn, se.jsxs = pn;\n    }()), se;\n}\n false ? 0 : Ie.exports = ar();\nvar n = Ie.exports;\nfunction Dt(e, r) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(e._tiptapEditor.on(\"update\", r), ()=>{\n            e._tiptapEditor.off(\"update\", r);\n        }), [\n        r,\n        e._tiptapEditor\n    ]);\n}\nfunction It(e, r) {\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(e._tiptapEditor.on(\"selectionUpdate\", r), ()=>{\n            e._tiptapEditor.off(\"selectionUpdate\", r);\n        }), [\n        r,\n        e._tiptapEditor\n    ]);\n}\nfunction G(e, r) {\n    Dt(e, r), It(e, r);\n}\nconst $e = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e, r)=>{\n    const { className: o, children: i, ...a } = e;\n    return /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\"bn-toolbar\", o || \"\"),\n        ref: r,\n        ...a,\n        children: i\n    });\n}), Oe = (e)=>{\n    const r = e.textColor || \"default\", o = e.backgroundColor || \"default\", i = e.size || 16, a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            pointerEvents: \"none\",\n            fontSize: (i * 0.75).toString() + \"px\",\n            height: i.toString() + \"px\",\n            lineHeight: i.toString() + \"px\",\n            textAlign: \"center\",\n            width: i.toString() + \"px\"\n        }), [\n        i\n    ]);\n    return /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_7__.Box, {\n        className: \"bn-color-icon\",\n        \"data-background-color\": o,\n        \"data-text-color\": r,\n        style: a,\n        children: \"A\"\n    });\n};\nvar Ot = {\n    color: void 0,\n    size: void 0,\n    className: void 0,\n    style: void 0,\n    attr: void 0\n}, yt = react__WEBPACK_IMPORTED_MODULE_0__.createContext && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(Ot), K = globalThis && globalThis.__assign || function() {\n    return K = Object.assign || function(e) {\n        for(var r, o = 1, i = arguments.length; o < i; o++){\n            r = arguments[o];\n            for(var a in r)Object.prototype.hasOwnProperty.call(r, a) && (e[a] = r[a]);\n        }\n        return e;\n    }, K.apply(this, arguments);\n}, lr = globalThis && globalThis.__rest || function(e, r) {\n    var o = {};\n    for(var i in e)Object.prototype.hasOwnProperty.call(e, i) && r.indexOf(i) < 0 && (o[i] = e[i]);\n    if (e != null && typeof Object.getOwnPropertySymbols == \"function\") for(var a = 0, i = Object.getOwnPropertySymbols(e); a < i.length; a++)r.indexOf(i[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, i[a]) && (o[i[a]] = e[i[a]]);\n    return o;\n};\nfunction At(e) {\n    return e && e.map(function(r, o) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(r.tag, K({\n            key: o\n        }, r.attr), At(r.child));\n    });\n}\nfunction S(e) {\n    return function(r) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(cr, K({\n            attr: K({}, e.attr)\n        }, r), At(e.child));\n    };\n}\nfunction cr(e) {\n    var r = function(o) {\n        var i = e.attr, a = e.size, l = e.title, u = lr(e, [\n            \"attr\",\n            \"size\",\n            \"title\"\n        ]), d = a || o.size || \"1em\", s;\n        return o.className && (s = o.className), e.className && (s = (s ? s + \" \" : \"\") + e.className), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", K({\n            stroke: \"currentColor\",\n            fill: \"currentColor\",\n            strokeWidth: \"0\"\n        }, o.attr, i, u, {\n            className: s,\n            style: K(K({\n                color: e.color || o.color\n            }, o.style), e.style),\n            height: d,\n            width: d,\n            xmlns: \"http://www.w3.org/2000/svg\"\n        }), l && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"title\", null, l), e.children);\n    };\n    return yt !== void 0 ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(yt.Consumer, null, function(o) {\n        return r(o);\n    }) : r(Ot);\n}\nfunction Ae(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            version: \"1.2\",\n            baseProfile: \"tiny\",\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M16.972 6.251c-.967-.538-2.185-.188-2.72.777l-3.713 6.682-2.125-2.125c-.781-.781-2.047-.781-2.828 0-.781.781-.781 2.047 0 2.828l4 4c.378.379.888.587 1.414.587l.277-.02c.621-.087 1.166-.46 1.471-1.009l5-9c.537-.966.189-2.183-.776-2.72z\"\n                }\n            }\n        ]\n    })(e);\n}\nconst Ft = (e)=>{\n    const r = ()=>e.text ? /* @__PURE__ */ n.jsxs(n.Fragment, {\n            children: [\n                /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Label, {\n                    children: \"Text\"\n                }),\n                [\n                    \"default\",\n                    \"gray\",\n                    \"brown\",\n                    \"red\",\n                    \"orange\",\n                    \"yellow\",\n                    \"green\",\n                    \"blue\",\n                    \"purple\",\n                    \"pink\"\n                ].map((i)=>/* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Item, {\n                        onClick: ()=>{\n                            e.onClick && e.onClick(), e.text.setColor(i);\n                        },\n                        component: \"div\",\n                        \"data-test\": \"text-color-\" + i,\n                        leftSection: /* @__PURE__ */ n.jsx(Oe, {\n                            textColor: i,\n                            size: e.iconSize\n                        }),\n                        rightSection: e.text.color === i ? /* @__PURE__ */ n.jsx(Ae, {\n                            size: 20,\n                            className: \"bn-tick-icon\"\n                        }) : /* @__PURE__ */ n.jsx(\"div\", {\n                            className: \"bn-tick-space\"\n                        }),\n                        children: i.charAt(0).toUpperCase() + i.slice(1)\n                    }, \"text-color-\" + i))\n            ]\n        }) : null, o = ()=>e.background ? /* @__PURE__ */ n.jsxs(n.Fragment, {\n            children: [\n                /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Label, {\n                    children: \"Background\"\n                }),\n                [\n                    \"default\",\n                    \"gray\",\n                    \"brown\",\n                    \"red\",\n                    \"orange\",\n                    \"yellow\",\n                    \"green\",\n                    \"blue\",\n                    \"purple\",\n                    \"pink\"\n                ].map((i)=>/* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Item, {\n                        onClick: ()=>{\n                            e.onClick && e.onClick(), e.background.setColor(i);\n                        },\n                        component: \"div\",\n                        \"data-test\": \"background-color-\" + i,\n                        leftSection: /* @__PURE__ */ n.jsx(Oe, {\n                            backgroundColor: i,\n                            size: e.iconSize\n                        }),\n                        rightSection: e.background.color === i ? /* @__PURE__ */ n.jsx(Ae, {\n                            size: 20,\n                            className: \"bn-tick-icon\"\n                        }) : /* @__PURE__ */ n.jsx(\"div\", {\n                            className: \"bn-tick-space\"\n                        }),\n                        children: i.charAt(0).toUpperCase() + i.slice(1)\n                    }, \"background-color-\" + i))\n            ]\n        }) : null;\n    return /* @__PURE__ */ n.jsxs(n.Fragment, {\n        children: [\n            /* @__PURE__ */ n.jsx(r, {}),\n            /* @__PURE__ */ n.jsx(o, {})\n        ]\n    });\n}, sr = (e)=>/* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_9__.Stack, {\n        gap: 0,\n        className: \"bn-tooltip\",\n        children: [\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_10__.Text, {\n                size: \"sm\",\n                children: e.mainTooltip\n            }),\n            e.secondaryTooltip && /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_10__.Text, {\n                size: \"xs\",\n                children: e.secondaryTooltip\n            })\n        ]\n    }), F = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e, r)=>{\n    const o = e.icon;\n    return /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_11__.Tooltip, {\n        withinPortal: !1,\n        label: /* @__PURE__ */ n.jsx(sr, {\n            mainTooltip: e.mainTooltip,\n            secondaryTooltip: e.secondaryTooltip\n        }),\n        children: e.children ? /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Button, {\n            onClick: e.onClick,\n            \"data-selected\": e.isSelected ? \"true\" : void 0,\n            \"data-test\": e.mainTooltip.slice(0, 1).toLowerCase() + e.mainTooltip.replace(/\\s+/g, \"\").slice(1),\n            size: \"xs\",\n            disabled: e.isDisabled || !1,\n            ref: r,\n            children: [\n                o && /* @__PURE__ */ n.jsx(o, {}),\n                e.children\n            ]\n        }) : /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_13__.ActionIcon, {\n            onClick: e.onClick,\n            \"data-selected\": e.isSelected ? \"true\" : void 0,\n            \"data-test\": e.mainTooltip.slice(0, 1).toLowerCase() + e.mainTooltip.replace(/\\s+/g, \"\").slice(1),\n            size: 30,\n            disabled: e.isDisabled || !1,\n            ref: r,\n            children: o && /* @__PURE__ */ n.jsx(o, {})\n        })\n    });\n});\nfunction We() {\n    const e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    return {\n        ref: e,\n        updateMaxHeight: ()=>{\n            setTimeout(()=>{\n                if (e.current && e.current.childElementCount > 0) {\n                    e.current.firstElementChild.style.maxHeight = \"none\";\n                    const r = e.current.firstElementChild.getBoundingClientRect();\n                    e.current.firstElementChild.style.maxHeight = `${Math.min(r.top >= 0 ? window.innerHeight - r.top - 20 : r.bottom - 20)}px`;\n                }\n            }, 10);\n        }\n    };\n}\nfunction ee(e) {\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        var i;\n        return ((i = e.getSelection()) == null ? void 0 : i.blocks) || [\n            e.getTextCursorPosition().block\n        ];\n    });\n    return G(e, ()=>{\n        var i;\n        return o(((i = e.getSelection()) == null ? void 0 : i.blocks) || [\n            e.getTextCursorPosition().block\n        ]);\n    }), r;\n}\nconst dr = (e)=>{\n    const r = ee(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.editor.getActiveStyles().textColor || \"default\"), [a, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.editor.getActiveStyles().backgroundColor || \"default\");\n    G(e.editor, ()=>{\n        i(e.editor.getActiveStyles().textColor || \"default\"), l(e.editor.getActiveStyles().backgroundColor || \"default\");\n    });\n    const { ref: u, updateMaxHeight: d } = We(), s = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((k)=>{\n        e.editor.focus(), k === \"default\" ? e.editor.removeStyles({\n            textColor: k\n        }) : e.editor.addStyles({\n            textColor: k\n        });\n    }, [\n        e.editor\n    ]), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((k)=>{\n        e.editor.focus(), k === \"default\" ? e.editor.removeStyles({\n            backgroundColor: k\n        }) : e.editor.addStyles({\n            backgroundColor: k\n        });\n    }, [\n        e.editor\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        for (const k of r)if (k.content !== void 0) return !0;\n        return !1;\n    }, [\n        r\n    ]) ? /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu, {\n        withinPortal: !1,\n        onOpen: d,\n        children: [\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Target, {\n                children: /* @__PURE__ */ n.jsx(F, {\n                    mainTooltip: \"Colors\",\n                    icon: ()=>/* @__PURE__ */ n.jsx(Oe, {\n                            textColor: o,\n                            backgroundColor: a,\n                            size: 20\n                        })\n                })\n            }),\n            /* @__PURE__ */ n.jsx(\"div\", {\n                ref: u,\n                children: /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Dropdown, {\n                    children: /* @__PURE__ */ n.jsx(Ft, {\n                        text: {\n                            color: o,\n                            setColor: s\n                        },\n                        background: {\n                            color: a,\n                            setColor: h\n                        }\n                    })\n                })\n            })\n        ]\n    }) : null;\n};\nfunction ur(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M23 11.9998L15.9289 19.0708L14.5147 17.6566L20.1716 11.9998L14.5147 6.34292L15.9289 4.92871L23 11.9998ZM3.82843 11.9998L9.48528 17.6566L8.07107 19.0708L1 11.9998L8.07107 4.92871L9.48528 6.34292L3.82843 11.9998Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction fr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M3 4H21V6H3V4ZM5 19H19V21H5V19ZM3 14H21V16H3V14ZM5 9H19V11H5V9Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction gr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM3 14H21V16H3V14ZM3 9H21V11H3V9Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction hr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M3 4H21V6H3V4ZM3 19H17V21H3V19ZM3 14H21V16H3V14ZM3 9H17V11H3V9Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction mr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M3 4H21V6H3V4ZM7 19H21V21H7V19ZM3 14H21V16H3V14ZM7 9H21V11H7V9Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction br(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M8 11H12.5C13.8807 11 15 9.88071 15 8.5C15 7.11929 13.8807 6 12.5 6H8V11ZM18 15.5C18 17.9853 15.9853 20 13.5 20H6V4H12.5C14.9853 4 17 6.01472 17 8.5C17 9.70431 16.5269 10.7981 15.7564 11.6058C17.0979 12.3847 18 13.837 18 15.5ZM8 13V18H13.5C14.8807 18 16 16.8807 16 15.5C16 14.1193 14.8807 13 13.5 13H8Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction zt(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M13 20H11V13H4V20H2V4H4V11H11V4H13V20ZM21.0005 8V20H19.0005L19 10.204L17 10.74V8.67L19.5005 8H21.0005Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Nt(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M4 4V11H11V4H13V20H11V13H4V20H2V4H4ZM18.5 8C20.5711 8 22.25 9.67893 22.25 11.75C22.25 12.6074 21.9623 13.3976 21.4781 14.0292L21.3302 14.2102L18.0343 18H22V20H15L14.9993 18.444L19.8207 12.8981C20.0881 12.5908 20.25 12.1893 20.25 11.75C20.25 10.7835 19.4665 10 18.5 10C17.5818 10 16.8288 10.7071 16.7558 11.6065L16.75 11.75H14.75C14.75 9.67893 16.4289 8 18.5 8Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Zt(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M22 8L21.9984 10L19.4934 12.883C21.0823 13.3184 22.25 14.7728 22.25 16.5C22.25 18.5711 20.5711 20.25 18.5 20.25C16.674 20.25 15.1528 18.9449 14.8184 17.2166L16.7821 16.8352C16.9384 17.6413 17.6481 18.25 18.5 18.25C19.4665 18.25 20.25 17.4665 20.25 16.5C20.25 15.5335 19.4665 14.75 18.5 14.75C18.214 14.75 17.944 14.8186 17.7056 14.9403L16.3992 13.3932L19.3484 10H15V8H22ZM4 4V11H11V4H13V20H11V13H4V20H2V4H4Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction xr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM3 12.5L7 9V16L3 12.5Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction vr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM7 12.5L3 16V9L7 12.5Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction kr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M15 20H7V18H9.92661L12.0425 6H9V4H17V6H14.0734L11.9575 18H15V20Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction yr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M17 17H22V19H19V22H17V17ZM7 7H2V5H5V2H7V7ZM18.364 15.5355L16.9497 14.1213L18.364 12.7071C20.3166 10.7545 20.3166 7.58866 18.364 5.63604C16.4113 3.68342 13.2455 3.68342 11.2929 5.63604L9.87868 7.05025L8.46447 5.63604L9.87868 4.22183C12.6123 1.48816 17.0445 1.48816 19.7782 4.22183C22.5118 6.9555 22.5118 11.3877 19.7782 14.1213L18.364 15.5355ZM15.5355 18.364L14.1213 19.7782C11.3877 22.5118 6.9555 22.5118 4.22183 19.7782C1.48816 17.0445 1.48816 12.6123 4.22183 9.87868L5.63604 8.46447L7.05025 9.87868L5.63604 11.2929C3.68342 13.2455 3.68342 16.4113 5.63604 18.364C7.58866 20.3166 10.7545 20.3166 12.7071 18.364L14.1213 16.9497L15.5355 18.364ZM14.8284 7.75736L16.2426 9.17157L9.17157 16.2426L7.75736 14.8284L14.8284 7.75736Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Ut(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M18.3643 15.5353L16.95 14.1211L18.3643 12.7069C20.3169 10.7543 20.3169 7.58847 18.3643 5.63585C16.4116 3.68323 13.2458 3.68323 11.2932 5.63585L9.87898 7.05007L8.46477 5.63585L9.87898 4.22164C12.6127 1.48797 17.0448 1.48797 19.7785 4.22164C22.5121 6.95531 22.5121 11.3875 19.7785 14.1211L18.3643 15.5353ZM15.5358 18.3638L14.1216 19.778C11.388 22.5117 6.9558 22.5117 4.22213 19.778C1.48846 17.0443 1.48846 12.6122 4.22213 9.87849L5.63634 8.46428L7.05055 9.87849L5.63634 11.2927C3.68372 13.2453 3.68372 16.4112 5.63634 18.3638C7.58896 20.3164 10.7548 20.3164 12.7074 18.3638L14.1216 16.9496L15.5358 18.3638ZM14.8287 7.75717L16.2429 9.17139L9.17187 16.2425L7.75766 14.8282L14.8287 7.75717Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction $t(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M8 4H21V6H8V4ZM5 3V6H6V7H3V6H4V4H3V3H5ZM3 14V11.5H5V11H3V10H6V12.5H4V13H6V14H3ZM5 19.5H3V18.5H5V18H3V17H6V21H3V20H5V19.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Wt(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M8 4H21V6H8V4ZM4.5 6.5C3.67157 6.5 3 5.82843 3 5C3 4.17157 3.67157 3.5 4.5 3.5C5.32843 3.5 6 4.17157 6 5C6 5.82843 5.32843 6.5 4.5 6.5ZM4.5 13.5C3.67157 13.5 3 12.8284 3 12C3 11.1716 3.67157 10.5 4.5 10.5C5.32843 10.5 6 11.1716 6 12C6 12.8284 5.32843 13.5 4.5 13.5ZM4.5 20.4C3.67157 20.4 3 19.7284 3 18.9C3 18.0716 3.67157 17.4 4.5 17.4C5.32843 17.4 6 18.0716 6 18.9C6 19.7284 5.32843 20.4 4.5 20.4ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Cr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M17.1538 14C17.3846 14.5161 17.5 15.0893 17.5 15.7196C17.5 17.0625 16.9762 18.1116 15.9286 18.867C14.8809 19.6223 13.4335 20 11.5862 20C9.94674 20 8.32335 19.6185 6.71592 18.8555V16.6009C8.23538 17.4783 9.7908 17.917 11.3822 17.917C13.9333 17.917 15.2128 17.1846 15.2208 15.7196C15.2208 15.0939 15.0049 14.5598 14.5731 14.1173C14.5339 14.0772 14.4939 14.0381 14.4531 14H3V12H21V14H17.1538ZM13.076 11H7.62908C7.4566 10.8433 7.29616 10.6692 7.14776 10.4778C6.71592 9.92084 6.5 9.24559 6.5 8.45207C6.5 7.21602 6.96583 6.165 7.89749 5.299C8.82916 4.43299 10.2706 4 12.2219 4C13.6934 4 15.1009 4.32808 16.4444 4.98426V7.13591C15.2448 6.44921 13.9293 6.10587 12.4978 6.10587C10.0187 6.10587 8.77917 6.88793 8.77917 8.45207C8.77917 8.87172 8.99709 9.23796 9.43293 9.55079C9.86878 9.86362 10.4066 10.1135 11.0463 10.3004C11.6665 10.4816 12.3431 10.7148 13.076 11H13.076Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction jr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M13 10V14H19V10H13ZM11 10H5V14H11V10ZM13 19H19V16H13V19ZM11 19V16H5V19H11ZM13 5V8H19V5H13ZM11 5H5V8H11V5ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction ue(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M13 6V21H11V6H5V4H19V6H13Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Sr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M8 3V12C8 14.2091 9.79086 16 12 16C14.2091 16 16 14.2091 16 12V3H18V12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12V3H8ZM4 20H20V22H4V20Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Hr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M5 11.1005L7 9.1005L12.5 14.6005L16 11.1005L19 14.1005V5H5V11.1005ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3ZM15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction wr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M20 3C20.5523 3 21 3.44772 21 4V5.757L19 7.757V5H5V13.1L9 9.1005L13.328 13.429L12.0012 14.7562L11.995 18.995L16.2414 19.0012L17.571 17.671L18.8995 19H19V16.242L21 14.242V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM21.7782 7.80761L23.1924 9.22183L15.4142 17L13.9979 16.9979L14 15.5858L21.7782 7.80761ZM15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7Z\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Tr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3.44772 6 4 6H10ZM21 3V12L17.206 8.207L11.2071 14.2071L9.79289 12.7929L15.792 6.793L12 3H21Z\"\n                }\n            }\n        ]\n    })(e);\n}\nconst Yt = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        o(!1);\n    }, []), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        o(!0);\n    }, []);\n    return /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_14__.Popover, {\n        withinPortal: !1,\n        onOpen: ()=>{\n            a();\n        },\n        onClose: ()=>{\n            i();\n        },\n        zIndex: 1e4,\n        ...e,\n        children: [\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_14__.Popover.Target, {\n                children: e.target\n            }),\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_14__.Popover.Dropdown, {\n                children: r ? e.dropdown : null\n            })\n        ]\n    });\n}, qt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ className: e, ...r }, o)=>/* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_9__.Stack, {\n        ...r,\n        className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\"bn-toolbar-input-dropdown\", e || \"\"),\n        ref: o,\n        children: r.children\n    })), pr = {\n    text: _mantine_core__WEBPACK_IMPORTED_MODULE_15__.TextInput,\n    file: _mantine_core__WEBPACK_IMPORTED_MODULE_16__.FileInput\n}, Fe = (e)=>{\n    const r = e.icon, o = pr[e.type];\n    return /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        children: /* @__PURE__ */ n.jsx(o, {\n            size: \"xs\",\n            icon: /* @__PURE__ */ n.jsx(r, {}),\n            ...e.inputProps\n        })\n    });\n}, Kt = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ url: e, text: r, update: o, ...i }, a)=>{\n    const [l, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e), [d, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(r);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        u(e), s(r);\n    }, [\n        r,\n        e\n    ]);\n    const h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((m)=>{\n        m.key === \"Enter\" && (m.preventDefault(), o(l, d));\n    }, [\n        o,\n        l,\n        d\n    ]), x = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((m)=>u(m.currentTarget.value), []), k = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((m)=>s(m.currentTarget.value), []), T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>o(l, d), [\n        o,\n        l,\n        d\n    ]);\n    return /* @__PURE__ */ n.jsxs(qt, {\n        ...i,\n        ref: a,\n        children: [\n            /* @__PURE__ */ n.jsx(Fe, {\n                type: \"text\",\n                icon: Ut,\n                inputProps: {\n                    autoFocus: !0,\n                    placeholder: \"Edit URL\",\n                    value: l,\n                    onKeyDown: h,\n                    onChange: x,\n                    onSubmit: T\n                }\n            }),\n            /* @__PURE__ */ n.jsx(Fe, {\n                type: \"text\",\n                icon: ue,\n                inputProps: {\n                    placeholder: \"Edit Title\",\n                    value: d,\n                    onKeyDown: h,\n                    onChange: k,\n                    onSubmit: T\n                }\n            })\n        ]\n    });\n}), Rr = (e)=>{\n    const r = ee(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.editor.getSelectedLinkUrl() || \"\"), [a, l] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.editor.getSelectedText());\n    G(e.editor, ()=>{\n        l(e.editor.getSelectedText() || \"\"), i(e.editor.getSelectedLinkUrl() || \"\");\n    });\n    const u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((s, h)=>{\n        e.editor.createLink(s, h), e.editor.focus();\n    }, [\n        e.editor\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        for (const s of r)if (s.content === void 0) return !1;\n        return !0;\n    }, [\n        r\n    ]) ? /* @__PURE__ */ n.jsx(Yt, {\n        target: /* @__PURE__ */ n.jsx(F, {\n            mainTooltip: \"Create Link\",\n            secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Mod+K\"),\n            icon: Ut\n        }),\n        dropdown: /* @__PURE__ */ n.jsx(Kt, {\n            url: o,\n            text: a,\n            update: u\n        })\n    }) : null;\n}, Mr = (e)=>{\n    const r = ee(e.editor), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>// Checks if only one block is selected.\n        r.length === 1 && // Checks if the selected block is an image.\n        r[0].type === \"image\" && // Checks if the block has a `caption` prop which can take any string\n        // value.\n        \"caption\" in e.editor.blockSchema.image.propSchema && typeof e.editor.blockSchema.image.propSchema.caption.default == \"string\" && e.editor.blockSchema.image.propSchema.caption.values === void 0 && // Checks if the block has a `url` prop which can take any string value.\n        \"url\" in e.editor.blockSchema.image.propSchema && typeof e.editor.blockSchema.image.propSchema.url.default == \"string\" && e.editor.blockSchema.image.propSchema.url.values === void 0 && // Checks if the `url` prop is not set to an empty string.\n        r[0].props.url !== \"\", [\n        e.editor.blockSchema,\n        r\n    ]), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(o ? r[0].props.caption : \"\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>a(o ? r[0].props.caption : \"\"), [\n        r,\n        o\n    ]);\n    const l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((d)=>{\n        d.key === \"Enter\" && (d.preventDefault(), e.editor.updateBlock(r[0], {\n            type: \"image\",\n            props: {\n                caption: i\n            }\n        }));\n    }, [\n        i,\n        e.editor,\n        r\n    ]), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((d)=>a(d.currentTarget.value), []);\n    return o ? /* @__PURE__ */ n.jsx(Yt, {\n        target: /* @__PURE__ */ n.jsx(F, {\n            mainTooltip: \"Edit Caption\",\n            icon: ue,\n            isSelected: r[0].props.caption !== \"\"\n        }),\n        dropdown: /* @__PURE__ */ n.jsx(qt, {\n            children: /* @__PURE__ */ n.jsx(Fe, {\n                type: \"text\",\n                icon: ue,\n                inputProps: {\n                    autoFocus: !0,\n                    placeholder: \"Edit Caption\",\n                    value: i,\n                    onKeyDown: l,\n                    onChange: u\n                }\n            })\n        })\n    }) : null;\n}, Er = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>e.editor.canNestBlock());\n    G(e.editor, ()=>{\n        e.editor.canNestBlock(), o(e.editor.canNestBlock());\n    });\n    const i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        e.editor.focus(), e.editor.nestBlock();\n    }, [\n        e.editor\n    ]);\n    return /* @__PURE__ */ n.jsx(F, {\n        onClick: i,\n        isDisabled: !r,\n        mainTooltip: \"Nest Block\",\n        secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Tab\"),\n        icon: vr\n    });\n}, Vr = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>e.editor.canUnnestBlock());\n    G(e.editor, ()=>{\n        o(e.editor.canUnnestBlock());\n    });\n    const i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        e.editor.focus(), e.editor.unnestBlock();\n    }, [\n        e\n    ]);\n    return /* @__PURE__ */ n.jsx(F, {\n        onClick: i,\n        isDisabled: !r,\n        mainTooltip: \"Unnest Block\",\n        secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Shift+Tab\"),\n        icon: xr\n    });\n}, Gt = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.editor.uploadFile !== void 0 ? \"upload\" : \"embed\"), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [l, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        l && setTimeout(()=>{\n            u(!1);\n        }, 3e3);\n    }, [\n        l\n    ]);\n    const d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((m)=>{\n        if (m === null) return;\n        async function I(p) {\n            if (a(!0), e.editor.uploadFile !== void 0) try {\n                const N = await e.editor.uploadFile(p);\n                e.editor.updateBlock(e.block, {\n                    type: \"image\",\n                    props: {\n                        url: N\n                    }\n                });\n            } catch  {\n                u(!0);\n            } finally{\n                a(!1);\n            }\n        }\n        I(m);\n    }, [\n        e.block,\n        e.editor\n    ]), [s, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\"\"), x = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((m)=>{\n        h(m.currentTarget.value);\n    }, []), k = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((m)=>{\n        m.key === \"Enter\" && (m.preventDefault(), e.editor.updateBlock(e.block, {\n            type: \"image\",\n            props: {\n                url: s\n            }\n        }));\n    }, [\n        s,\n        e.block,\n        e.editor\n    ]), T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        e.editor.updateBlock(e.block, {\n            type: \"image\",\n            props: {\n                url: s\n            }\n        });\n    }, [\n        s,\n        e.block,\n        e.editor\n    ]);\n    return /* @__PURE__ */ n.jsx($e, {\n        className: \"bn-image-toolbar\",\n        children: /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_17__.Tabs, {\n            value: r,\n            onChange: o,\n            children: [\n                i && /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_18__.LoadingOverlay, {\n                    visible: i\n                }),\n                /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_17__.Tabs.List, {\n                    children: [\n                        e.editor.uploadFile !== void 0 && /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_17__.Tabs.Tab, {\n                            value: \"upload\",\n                            \"data-test\": \"upload-tab\",\n                            children: \"Upload\"\n                        }),\n                        /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_17__.Tabs.Tab, {\n                            value: \"embed\",\n                            \"data-test\": \"embed-tab\",\n                            children: \"Embed\"\n                        })\n                    ]\n                }),\n                e.editor.uploadFile !== void 0 && /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_17__.Tabs.Panel, {\n                    className: \"bn-upload-image-panel\",\n                    value: \"upload\",\n                    children: /* @__PURE__ */ n.jsxs(\"div\", {\n                        children: [\n                            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_16__.FileInput, {\n                                placeholder: \"Upload Image\",\n                                size: \"xs\",\n                                value: null,\n                                onChange: d,\n                                \"data-test\": \"upload-input\"\n                            }),\n                            l && /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_10__.Text, {\n                                c: \"red\",\n                                size: \"12px\",\n                                children: \"Error: Upload failed\"\n                            })\n                        ]\n                    })\n                }),\n                /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_17__.Tabs.Panel, {\n                    className: \"bn-embed-image-panel\",\n                    value: \"embed\",\n                    children: /* @__PURE__ */ n.jsxs(\"div\", {\n                        children: [\n                            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_15__.TextInput, {\n                                size: \"xs\",\n                                placeholder: \"Enter URL\",\n                                value: s,\n                                onChange: x,\n                                onKeyDown: k,\n                                \"data-test\": \"embed-input\"\n                            }),\n                            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Button, {\n                                className: \"bn-embed-image-button\",\n                                onClick: T,\n                                size: \"xs\",\n                                \"data-test\": \"embed-input-button\",\n                                children: \"Embed Image\"\n                            })\n                        ]\n                    })\n                })\n            ]\n        })\n    });\n}, Lr = (e)=>{\n    const r = ee(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        i(!1);\n    }, [\n        r\n    ]), r.length === 1 && // Checks if the selected block is an image.\n    r[0].type === \"image\" ? /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_14__.Popover, {\n        withinPortal: !1,\n        opened: o,\n        position: \"bottom\",\n        children: [\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_14__.Popover.Target, {\n                children: /* @__PURE__ */ n.jsx(F, {\n                    onClick: ()=>i(!o),\n                    isSelected: o,\n                    mainTooltip: \"Replace Image\",\n                    icon: wr\n                })\n            }),\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_14__.Popover.Dropdown, {\n                children: /* @__PURE__ */ n.jsx(Gt, {\n                    block: r[0],\n                    editor: e.editor\n                })\n            })\n        ]\n    }) : null;\n}, Br = {\n    left: hr,\n    center: fr,\n    right: mr,\n    justify: gr\n}, _e = (e)=>{\n    const r = ee(e.editor), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const l = r[0];\n        if (\"textAlignment\" in l.props) return l.props.textAlignment;\n    }, [\n        r\n    ]), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((l)=>{\n        e.editor.focus();\n        for (const u of r)e.editor.updateBlock(u, {\n            props: {\n                textAlignment: l\n            }\n        });\n    }, [\n        e.editor,\n        r\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>!!r.find((l)=>\"textAlignment\" in l.props), [\n        r\n    ]) ? /* @__PURE__ */ n.jsx(F, {\n        onClick: ()=>i(e.textAlignment),\n        isSelected: o === e.textAlignment,\n        mainTooltip: e.textAlignment === \"justify\" ? \"Justify Text\" : \"Align Text \" + e.textAlignment.slice(0, 1).toUpperCase() + e.textAlignment.slice(1),\n        icon: Br[e.textAlignment]\n    }) : null;\n}, Pr = {\n    bold: \"Mod+B\",\n    italic: \"Mod+I\",\n    underline: \"Mod+U\",\n    strike: \"Mod+Shift+X\",\n    code: \"\"\n}, _r = {\n    bold: br,\n    italic: kr,\n    underline: Sr,\n    strike: Cr,\n    code: ur\n}, je = (e)=>{\n    const r = ee(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.toggledStyle in e.editor.getActiveStyles());\n    G(e.editor, ()=>{\n        i(e.toggledStyle in e.editor.getActiveStyles());\n    });\n    const a = (u)=>{\n        if (e.editor.focus(), e.editor.styleSchema[u].propSchema !== \"boolean\") throw new Error(\"can only toggle boolean styles\");\n        e.editor.toggleStyles({\n            [u]: !0\n        });\n    };\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>!!r.find((u)=>u.content !== void 0), [\n        r\n    ]) ? /* @__PURE__ */ n.jsx(F, {\n        onClick: ()=>a(e.toggledStyle),\n        isSelected: o,\n        mainTooltip: e.toggledStyle.slice(0, 1).toUpperCase() + e.toggledStyle.slice(1),\n        secondaryTooltip: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(Pr[e.toggledStyle]),\n        icon: _r[e.toggledStyle]\n    }) : null;\n};\nfunction Dr(e) {\n    const r = e.icon;\n    return /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Item, {\n        onClick: e.onClick,\n        leftSection: r && /* @__PURE__ */ n.jsx(r, {\n            size: 16\n        }),\n        rightSection: e.isSelected ? /* @__PURE__ */ n.jsx(Ae, {\n            size: 20,\n            className: \"bn-tick-icon\"\n        }) : // Ensures space for tick even if item isn't currently selected.\n        /* @__PURE__ */ n.jsx(\"div\", {\n            className: \"bn-tick-space\"\n        }),\n        disabled: e.isDisabled,\n        children: e.text\n    }, e.text);\n}\nfunction Ir(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 20 20\",\n            fill: \"currentColor\",\n            \"aria-hidden\": \"true\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    fillRule: \"evenodd\",\n                    d: \"M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z\",\n                    clipRule: \"evenodd\"\n                }\n            }\n        ]\n    })(e);\n}\nfunction Or(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 20 20\",\n            fill: \"currentColor\",\n            \"aria-hidden\": \"true\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    fillRule: \"evenodd\",\n                    d: \"M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z\",\n                    clipRule: \"evenodd\"\n                }\n            }\n        ]\n    })(e);\n}\nconst Ar = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((e, r)=>{\n    const o = e.icon;\n    return /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_12__.Button, {\n        leftSection: o && /* @__PURE__ */ n.jsx(o, {\n            size: 16\n        }),\n        rightSection: /* @__PURE__ */ n.jsx(Ir, {}),\n        size: \"xs\",\n        variant: \"subtle\",\n        disabled: e.isDisabled,\n        onClick: e.onClick,\n        ref: r,\n        children: e.text\n    });\n});\nfunction Fr(e) {\n    const r = e.items.filter((a)=>a.isSelected)[0], { ref: o, updateMaxHeight: i } = We();\n    return r ? /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu, {\n        withinPortal: !1,\n        transitionProps: {\n            exitDuration: 0\n        },\n        disabled: e.isDisabled,\n        onOpen: i,\n        children: [\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Target, {\n                children: /* @__PURE__ */ n.jsx(Ar, {\n                    text: r.text,\n                    icon: r.icon,\n                    isDisabled: r.isDisabled\n                })\n            }),\n            /* @__PURE__ */ n.jsx(\"div\", {\n                ref: o,\n                children: /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Dropdown, {\n                    children: e.items.map((a)=>/* @__PURE__ */ n.jsx(Dr, {\n                            ...a\n                        }, a.text))\n                })\n            })\n        ]\n    }) : null;\n}\nconst zr = [\n    {\n        name: \"Paragraph\",\n        type: \"paragraph\",\n        icon: ue,\n        isSelected: (e)=>e.type === \"paragraph\"\n    },\n    {\n        name: \"Heading 1\",\n        type: \"heading\",\n        props: {\n            level: 1\n        },\n        icon: zt,\n        isSelected: (e)=>e.type === \"heading\" && \"level\" in e.props && e.props.level === 1\n    },\n    {\n        name: \"Heading 2\",\n        type: \"heading\",\n        props: {\n            level: 2\n        },\n        icon: Nt,\n        isSelected: (e)=>e.type === \"heading\" && \"level\" in e.props && e.props.level === 2\n    },\n    {\n        name: \"Heading 3\",\n        type: \"heading\",\n        props: {\n            level: 3\n        },\n        icon: Zt,\n        isSelected: (e)=>e.type === \"heading\" && \"level\" in e.props && e.props.level === 3\n    },\n    {\n        name: \"Bullet List\",\n        type: \"bulletListItem\",\n        icon: Wt,\n        isSelected: (e)=>e.type === \"bulletListItem\"\n    },\n    {\n        name: \"Numbered List\",\n        type: \"numberedListItem\",\n        icon: $t,\n        isSelected: (e)=>e.type === \"numberedListItem\"\n    }\n], Nr = (e)=>{\n    const r = ee(e.editor), [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(e.editor.getTextCursorPosition().block), a = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(e.items || zr).filter((d)=>{\n            if (!(d.type in e.editor.blockSchema)) return !1;\n            for (const [s, h] of Object.entries(d.props || {})){\n                const x = e.editor.blockSchema[d.type].propSchema;\n                if (!(s in x) || x[s].values !== void 0 && !x[s].values.includes(h)) return !1;\n            }\n            return !0;\n        }), [\n        e.editor,\n        e.items\n    ]), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>a.find((d)=>d.type === o.type) !== void 0, [\n        o.type,\n        a\n    ]), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const d = (s)=>{\n            e.editor.focus();\n            for (const h of r)e.editor.updateBlock(h, {\n                type: s.type,\n                props: s.props\n            });\n        };\n        return a.map((s)=>({\n                text: s.name,\n                icon: s.icon,\n                onClick: ()=>d(s),\n                isSelected: s.isSelected(o)\n            }));\n    }, [\n        o,\n        a,\n        e.editor,\n        r\n    ]);\n    return G(e.editor, ()=>{\n        i(e.editor.getTextCursorPosition().block);\n    }), l ? /* @__PURE__ */ n.jsx(Fr, {\n        items: u\n    }) : null;\n}, Zr = (e)=>/* @__PURE__ */ n.jsxs($e, {\n        children: [\n            /* @__PURE__ */ n.jsx(Nr, {\n                ...e,\n                items: e.blockTypeDropdownItems\n            }),\n            /* @__PURE__ */ n.jsx(Mr, {\n                editor: e.editor\n            }),\n            /* @__PURE__ */ n.jsx(Lr, {\n                editor: e.editor\n            }),\n            /* @__PURE__ */ n.jsx(je, {\n                editor: e.editor,\n                toggledStyle: \"bold\"\n            }),\n            /* @__PURE__ */ n.jsx(je, {\n                editor: e.editor,\n                toggledStyle: \"italic\"\n            }),\n            /* @__PURE__ */ n.jsx(je, {\n                editor: e.editor,\n                toggledStyle: \"underline\"\n            }),\n            /* @__PURE__ */ n.jsx(je, {\n                editor: e.editor,\n                toggledStyle: \"strike\"\n            }),\n            /* @__PURE__ */ n.jsx(_e, {\n                editor: e.editor,\n                textAlignment: \"left\"\n            }),\n            /* @__PURE__ */ n.jsx(_e, {\n                editor: e.editor,\n                textAlignment: \"center\"\n            }),\n            /* @__PURE__ */ n.jsx(_e, {\n                editor: e.editor,\n                textAlignment: \"right\"\n            }),\n            /* @__PURE__ */ n.jsx(dr, {\n                editor: e.editor\n            }),\n            /* @__PURE__ */ n.jsx(Er, {\n                editor: e.editor\n            }),\n            /* @__PURE__ */ n.jsx(Vr, {\n                editor: e.editor\n            }),\n            /* @__PURE__ */ n.jsx(Rr, {\n                editor: e.editor\n            })\n        ]\n    }), Ct = (e)=>{\n    switch(e){\n        case \"left\":\n            return \"top-start\";\n        case \"center\":\n            return \"top\";\n        case \"right\":\n            return \"top-end\";\n        default:\n            return \"top-start\";\n    }\n}, Ur = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>{\n        const m = e.editor.getTextCursorPosition().block;\n        return \"textAlignment\" in m.props ? Ct(m.props.textAlignment) : \"top-start\";\n    }), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), { refs: u, update: d, context: s, floatingStyles: h } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useFloating)({\n        open: r,\n        placement: i,\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_20__.offset)(10),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_21__.flip)()\n        ]\n    }), { isMounted: x, styles: k } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useTransitionStyles)(s);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>e.editor.formattingToolbar.onUpdate((m)=>{\n            o(m.show), l.current = m.referencePos, d();\n        }), [\n        e.editor,\n        d\n    ]), G(e.editor, ()=>{\n        const m = e.editor.getTextCursorPosition().block;\n        \"textAlignment\" in m.props ? a(Ct(m.props.textAlignment)) : a(\"top-start\");\n    }), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        u.setReference({\n            getBoundingClientRect: ()=>l.current\n        });\n    }, [\n        u\n    ]);\n    const T = e.formattingToolbar || Zr;\n    return x ? /* @__PURE__ */ n.jsx(\"div\", {\n        ref: u.setFloating,\n        style: {\n            ...k,\n            ...h,\n            zIndex: 3e3\n        },\n        children: /* @__PURE__ */ n.jsx(T, {\n            editor: e.editor\n        })\n    }) : null;\n}, $r = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    return r ? /* @__PURE__ */ n.jsx(Kt, {\n        url: e.url,\n        text: e.text,\n        update: e.editHyperlink,\n        onBlur: (a)=>setTimeout(()=>{\n                var l;\n                (l = i.current) != null && l.contains(a.relatedTarget) || o(!1);\n            }, 500),\n        ref: i\n    }) : /* @__PURE__ */ n.jsxs($e, {\n        onMouseEnter: e.stopHideTimer,\n        onMouseLeave: e.startHideTimer,\n        children: [\n            /* @__PURE__ */ n.jsx(F, {\n                mainTooltip: \"Edit\",\n                isSelected: !1,\n                onClick: ()=>o(!0),\n                children: \"Edit Link\"\n            }),\n            /* @__PURE__ */ n.jsx(F, {\n                mainTooltip: \"Open in new tab\",\n                isSelected: !1,\n                onClick: ()=>{\n                    window.open(e.url, \"_blank\");\n                },\n                icon: Tr\n            }),\n            /* @__PURE__ */ n.jsx(F, {\n                mainTooltip: \"Remove link\",\n                isSelected: !1,\n                onClick: e.deleteHyperlink,\n                icon: yr\n            })\n        ]\n    });\n}, Wr = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [l, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), { refs: s, update: h, context: x, floatingStyles: k } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useFloating)({\n        open: r,\n        placement: \"top-start\",\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_20__.offset)(10),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_21__.flip)()\n        ]\n    }), { isMounted: T, styles: m } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useTransitionStyles)(x);\n    if ((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>e.editor.hyperlinkToolbar.on(\"update\", (p)=>{\n            o(p.show), a(p.url), u(p.text), d.current = p.referencePos, h();\n        }), [\n        e.editor,\n        h\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        s.setReference({\n            getBoundingClientRect: ()=>d.current\n        });\n    }, [\n        s\n    ]), !i || !l || !T) return null;\n    const I = e.hyperlinkToolbar || $r;\n    return /* @__PURE__ */ n.jsx(\"div\", {\n        ref: s.setFloating,\n        style: {\n            ...m,\n            ...k,\n            zIndex: 4e3\n        },\n        children: /* @__PURE__ */ n.jsx(I, {\n            url: i,\n            text: l,\n            editHyperlink: e.editor.hyperlinkToolbar.editHyperlink,\n            deleteHyperlink: e.editor.hyperlinkToolbar.deleteHyperlink,\n            startHideTimer: e.editor.hyperlinkToolbar.startHideTimer,\n            stopHideTimer: e.editor.hyperlinkToolbar.stopHideTimer\n        })\n    });\n}, Yr = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), { refs: u, update: d, context: s, floatingStyles: h } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useFloating)({\n        open: r,\n        placement: \"bottom\",\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_20__.offset)(10),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_21__.flip)()\n        ]\n    }), { isMounted: x, styles: k } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useTransitionStyles)(s);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>e.editor.imageToolbar.onUpdate((m)=>{\n            o(m.show), a(m.block), l.current = m.referencePos, d();\n        }), [\n        e.editor,\n        d\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        u.setReference({\n            getBoundingClientRect: ()=>l.current\n        });\n    }, [\n        u\n    ]);\n    const T = e.imageToolbar || Gt;\n    return x ? /* @__PURE__ */ n.jsx(\"div\", {\n        ref: u.setFloating,\n        style: {\n            ...k,\n            ...h,\n            zIndex: 5e3\n        },\n        children: /* @__PURE__ */ n.jsx(T, {\n            editor: e.editor,\n            block: i\n        })\n    }) : null;\n};\nfunction qr(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 1024 1024\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8Z\"\n                }\n            },\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M192 474h672q8 0 8 8v60q0 8-8 8H160q-8 0-8-8v-60q0-8 8-8Z\"\n                }\n            }\n        ]\n    })(e);\n}\nconst Jt = (e)=>/* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_13__.ActionIcon, {\n        size: 24,\n        children: e.children\n    }), Kr = (e)=>/* @__PURE__ */ n.jsx(Jt, {\n        children: /* @__PURE__ */ n.jsx(qr, {\n            size: 24,\n            onClick: e.addBlock,\n            \"data-test\": \"dragHandleAdd\"\n        })\n    });\nfunction Xt(e) {\n    return S({\n        tag: \"svg\",\n        attr: {\n            viewBox: \"0 0 24 24\"\n        },\n        child: [\n            {\n                tag: \"path\",\n                attr: {\n                    fill: \"none\",\n                    d: \"M0 0h24v24H0V0z\"\n                }\n            },\n            {\n                tag: \"path\",\n                attr: {\n                    d: \"M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"\n                }\n            }\n        ]\n    })(e);\n}\nconst Qt = (e)=>{\n    const { children: r, ...o } = e;\n    return /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Item, {\n        ...o,\n        children: r\n    });\n}, Gr = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), { ref: i, updateMaxHeight: a } = We(), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        l.current && clearTimeout(l.current), l.current = setTimeout(()=>{\n            o(!1);\n        }, 250);\n    }, []), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        l.current && clearTimeout(l.current), r || a(), o(!0);\n    }, [\n        r,\n        a\n    ]);\n    return !(\"textColor\" in e.block.props) && !(\"backgroundColor\" in e.block.props) ? null : /* @__PURE__ */ n.jsx(Qt, {\n        onMouseLeave: u,\n        onMouseOver: d,\n        children: /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu, {\n            withinPortal: !1,\n            opened: r,\n            position: \"right\",\n            children: [\n                /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Target, {\n                    children: /* @__PURE__ */ n.jsxs(\"div\", {\n                        style: {\n                            display: \"flex\",\n                            alignItems: \"center\"\n                        },\n                        children: [\n                            /* @__PURE__ */ n.jsx(\"div\", {\n                                style: {\n                                    flex: 1\n                                },\n                                children: e.children\n                            }),\n                            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_7__.Box, {\n                                style: {\n                                    display: \"flex\",\n                                    alignItems: \"center\"\n                                },\n                                children: /* @__PURE__ */ n.jsx(Or, {\n                                    size: 15\n                                })\n                            })\n                        ]\n                    })\n                }),\n                /* @__PURE__ */ n.jsx(\"div\", {\n                    ref: i,\n                    children: /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Dropdown, {\n                        onMouseLeave: u,\n                        onMouseOver: d,\n                        style: {\n                            marginLeft: \"5px\"\n                        },\n                        children: /* @__PURE__ */ n.jsx(Ft, {\n                            iconSize: 18,\n                            text: \"textColor\" in e.block.props && typeof e.block.props.textColor == \"string\" ? {\n                                color: e.block.props.textColor,\n                                setColor: (s)=>e.editor.updateBlock(e.block, {\n                                        props: {\n                                            textColor: s\n                                        }\n                                    })\n                            } : void 0,\n                            background: \"backgroundColor\" in e.block.props && typeof e.block.props.backgroundColor == \"string\" ? {\n                                color: e.block.props.backgroundColor,\n                                setColor: (s)=>e.editor.updateBlock(e.block, {\n                                        props: {\n                                            backgroundColor: s\n                                        }\n                                    })\n                            } : void 0\n                        })\n                    })\n                })\n            ]\n        })\n    });\n}, Jr = (e)=>/* @__PURE__ */ n.jsx(Qt, {\n        onClick: ()=>e.editor.removeBlocks([\n                e.block\n            ]),\n        children: e.children\n    }), Xr = (e)=>/* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Dropdown, {\n        className: \"bn-drag-handle-menu\",\n        children: e.children\n    }), Qr = (e)=>/* @__PURE__ */ n.jsxs(Xr, {\n        children: [\n            /* @__PURE__ */ n.jsx(Jr, {\n                ...e,\n                children: \"Delete\"\n            }),\n            /* @__PURE__ */ n.jsx(Gr, {\n                ...e,\n                children: \"Colors\"\n            })\n        ]\n    }), eo = (e)=>{\n    const r = e.dragHandleMenu || Qr;\n    return /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu, {\n        withinPortal: !1,\n        trigger: \"click\",\n        onOpen: e.freezeMenu,\n        onClose: e.unfreezeMenu,\n        width: 100,\n        position: \"left\",\n        children: [\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Target, {\n                children: /* @__PURE__ */ n.jsx(\"div\", {\n                    className: \"bn-drag-handle\",\n                    draggable: \"true\",\n                    onDragStart: e.blockDragStart,\n                    onDragEnd: e.blockDragEnd,\n                    children: /* @__PURE__ */ n.jsx(Jt, {\n                        children: /* @__PURE__ */ n.jsx(Xt, {\n                            size: 24,\n                            \"data-test\": \"dragHandle\"\n                        })\n                    })\n                })\n            }),\n            /* @__PURE__ */ n.jsx(r, {\n                editor: e.editor,\n                block: e.block\n            })\n        ]\n    });\n}, to = (e)=>/* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_6__.Group, {\n        className: \"bn-side-menu\",\n        gap: 0,\n        children: e.children\n    }), no = (e)=>/* @__PURE__ */ n.jsxs(to, {\n        children: [\n            /* @__PURE__ */ n.jsx(Kr, {\n                ...e\n            }),\n            /* @__PURE__ */ n.jsx(eo, {\n                ...e\n            })\n        ]\n    }), ro = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), { refs: u, update: d, context: s, floatingStyles: h } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useFloating)({\n        open: r,\n        placement: \"left\"\n    }), { isMounted: x, styles: k } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useTransitionStyles)(s);\n    if ((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>e.editor.sideMenu.onUpdate((m)=>{\n            o(m.show), a(m.block), l.current = m.referencePos, d();\n        }), [\n        e.editor,\n        d\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        u.setReference({\n            getBoundingClientRect: ()=>l.current\n        });\n    }, [\n        u\n    ]), !i || !x) return null;\n    const T = e.sideMenu || no;\n    return /* @__PURE__ */ n.jsx(\"div\", {\n        ref: u.setFloating,\n        style: {\n            ...k,\n            ...h,\n            zIndex: 1e3\n        },\n        children: /* @__PURE__ */ n.jsx(T, {\n            block: i,\n            editor: e.editor,\n            blockDragStart: e.editor.sideMenu.blockDragStart,\n            blockDragEnd: e.editor.sideMenu.blockDragEnd,\n            addBlock: e.editor.sideMenu.addBlock,\n            freezeMenu: e.editor.sideMenu.freezeMenu,\n            unfreezeMenu: e.editor.sideMenu.unfreezeMenu\n        })\n    });\n}, oo = 5;\nfunction io(e) {\n    const r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    function o() {\n        var u;\n        const a = e.isSelected, l = (u = r.current) == null ? void 0 : u.matches(\":hover\");\n        return a || l;\n    }\n    function i() {\n        var a, l;\n        o() ? (a = r.current) == null || a.setAttribute(\"data-hovered\", \"true\") : (l = r.current) == null || l.removeAttribute(\"data-hovered\");\n    }\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        i(), o() && r.current && r.current.getBoundingClientRect().left > oo && r.current.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"nearest\"\n        });\n    }), /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Item, {\n        className: \"bn-slash-menu-item\",\n        onClick: e.set,\n        closeMenuOnClick: !1,\n        onMouseLeave: ()=>{\n            setTimeout(()=>{\n                i();\n            }, 1);\n        },\n        leftSection: e.icon,\n        rightSection: e.shortcut && /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_22__.Badge, {\n            size: \"xs\",\n            children: e.shortcut\n        }),\n        ref: r,\n        children: /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_9__.Stack, {\n            children: [\n                /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_10__.Text, {\n                    lh: \"20px\",\n                    size: \"14px\",\n                    fw: 500,\n                    children: e.name\n                }),\n                /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_10__.Text, {\n                    lh: \"16px\",\n                    size: \"10px\",\n                    children: e.hint\n                })\n            ]\n        })\n    });\n}\nfunction ao(e) {\n    const r = [];\n    let o = 0;\n    const i = lodash_groupby__WEBPACK_IMPORTED_MODULE_4__(e.filteredItems, (a)=>a.group);\n    return lodash_foreach__WEBPACK_IMPORTED_MODULE_3__(i, (a)=>{\n        r.push(/* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Label, {\n            children: a[0].group\n        }, a[0].group));\n        for (const l of a)r.push(/* @__PURE__ */ n.jsx(io, {\n            name: l.name,\n            icon: l.icon,\n            hint: l.hint,\n            shortcut: l.shortcut,\n            isSelected: e.keyboardHoveredItemIndex === o,\n            set: ()=>e.itemCallback(l)\n        }, l.name)), o++;\n    }), /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu, {\n        withinPortal: !1,\n        trapFocus: !1,\n        defaultOpened: !0,\n        trigger: \"hover\",\n        closeDelay: 1e7,\n        children: /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Dropdown, {\n            onMouseDown: (a)=>a.preventDefault(),\n            className: \"bn-slash-menu\",\n            children: r.length > 0 ? r : /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Item, {\n                children: \"No match found\"\n            })\n        })\n    });\n}\nconst lo = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [l, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), { refs: s, update: h, context: x, floatingStyles: k } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useFloating)({\n        open: r,\n        placement: \"bottom-start\",\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_20__.offset)(10),\n            // Flips the slash menu placement to maximize the space available, and\n            // prevents the menu from being cut off by the confines of the screen.\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_21__.flip)(),\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_21__.size)({\n                apply ({ availableHeight: p, elements: N }) {\n                    Object.assign(N.floating.style, {\n                        maxHeight: `${p - 10}px`\n                    });\n                }\n            })\n        ]\n    }), { isMounted: T, styles: m } = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useTransitionStyles)(x);\n    if ((0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>e.editor.slashMenu.onUpdate((p)=>{\n            o(p.show), a(p.filteredItems), u(p.keyboardHoveredItemIndex), d.current = p.referencePos, h();\n        }), [\n        e.editor,\n        r,\n        h\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        s.setReference({\n            getBoundingClientRect: ()=>d.current\n        });\n    }, [\n        s\n    ]), !T || !i || l === void 0) return null;\n    const I = e.slashMenu || ao;\n    return /* @__PURE__ */ n.jsx(\"div\", {\n        ref: s.setFloating,\n        style: {\n            display: \"flex\",\n            ...m,\n            ...k,\n            zIndex: 2e3\n        },\n        children: /* @__PURE__ */ n.jsx(I, {\n            filteredItems: i,\n            itemCallback: (p)=>e.editor.slashMenu.itemCallback(p),\n            keyboardHoveredItemIndex: l\n        })\n    });\n}, co = (e)=>/* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Dropdown, {\n        className: \"bn-table-handle-menu\",\n        children: e.children\n    }), Te = (e)=>{\n    const { children: r, ...o } = e;\n    return /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Item, {\n        ...o,\n        children: r\n    });\n}, so = (e)=>/* @__PURE__ */ n.jsx(Te, {\n        onClick: ()=>{\n            const r = e.block.content.rows[e.index].cells.map(()=>[]), o = [\n                ...e.block.content.rows\n            ];\n            o.splice(e.index + (e.side === \"below\" ? 1 : 0), 0, {\n                cells: r\n            }), e.editor.updateBlock(e.block, {\n                type: \"table\",\n                content: {\n                    type: \"tableContent\",\n                    rows: o\n                }\n            });\n        },\n        children: `Add row ${e.side}`\n    }), uo = (e)=>/* @__PURE__ */ n.jsx(Te, {\n        onClick: ()=>{\n            const r = {\n                type: \"tableContent\",\n                rows: e.block.content.rows.map((o)=>{\n                    const i = [\n                        ...o.cells\n                    ];\n                    return i.splice(e.index + (e.side === \"right\" ? 1 : 0), 0, []), {\n                        cells: i\n                    };\n                })\n            };\n            e.editor.updateBlock(e.block, {\n                type: \"table\",\n                content: r\n            });\n        },\n        children: `Add column ${e.side}`\n    }), jt = (e)=>e.orientation === \"row\" ? /* @__PURE__ */ n.jsx(so, {\n        ...e,\n        side: e.side\n    }) : /* @__PURE__ */ n.jsx(uo, {\n        ...e,\n        side: e.side\n    }), fo = (e)=>/* @__PURE__ */ n.jsx(Te, {\n        onClick: ()=>{\n            const r = {\n                type: \"tableContent\",\n                rows: e.block.content.rows.filter((o, i)=>i !== e.index)\n            };\n            e.editor.updateBlock(e.block, {\n                type: \"table\",\n                content: r\n            });\n        },\n        children: \"Delete row\"\n    }), go = (e)=>/* @__PURE__ */ n.jsx(Te, {\n        onClick: ()=>{\n            const r = {\n                type: \"tableContent\",\n                rows: e.block.content.rows.map((o)=>({\n                        cells: o.cells.filter((i, a)=>a !== e.index)\n                    }))\n            };\n            e.editor.updateBlock(e.block, {\n                type: \"table\",\n                content: r\n            });\n        },\n        children: \"Delete column\"\n    }), ho = (e)=>e.orientation === \"row\" ? /* @__PURE__ */ n.jsx(fo, {\n        ...e\n    }) : /* @__PURE__ */ n.jsx(go, {\n        ...e\n    }), mo = (e)=>/* @__PURE__ */ n.jsxs(co, {\n        children: [\n            /* @__PURE__ */ n.jsx(ho, {\n                orientation: e.orientation,\n                editor: e.editor,\n                block: e.block,\n                index: e.index\n            }),\n            /* @__PURE__ */ n.jsx(jt, {\n                orientation: e.orientation,\n                editor: e.editor,\n                block: e.block,\n                index: e.index,\n                side: e.orientation === \"row\" ? \"above\" : \"left\"\n            }),\n            /* @__PURE__ */ n.jsx(jt, {\n                orientation: e.orientation,\n                editor: e.editor,\n                block: e.block,\n                index: e.index,\n                side: e.orientation === \"row\" ? \"below\" : \"right\"\n            })\n        ]\n    }), bo = (e)=>{\n    const r = e.tableHandleMenu || mo, [o, i] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);\n    return /* @__PURE__ */ n.jsxs(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu, {\n        withinPortal: !1,\n        trigger: \"click\",\n        onOpen: ()=>{\n            e.freezeHandles(), e.hideOtherSide();\n        },\n        onClose: ()=>{\n            e.unfreezeHandles(), e.showOtherSide();\n        },\n        position: \"right\",\n        children: [\n            /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_8__.Menu.Target, {\n                children: /* @__PURE__ */ n.jsx(\"div\", {\n                    className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\"bn-table-handle\", o ? \"bn-table-handle-dragging\" : \"\"),\n                    draggable: \"true\",\n                    onDragStart: (a)=>{\n                        i(!0), e.dragStart(a);\n                    },\n                    onDragEnd: ()=>{\n                        e.dragEnd(), i(!1);\n                    },\n                    style: e.orientation === \"column\" ? {\n                        transform: \"rotate(0.25turn)\"\n                    } : void 0,\n                    children: e.children\n                })\n            }),\n            /* @__PURE__ */ n.jsx(r, {\n                orientation: e.orientation,\n                editor: e.editor,\n                block: e.block,\n                index: e.index\n            })\n        ]\n    });\n}, xo = (e)=>/* @__PURE__ */ n.jsx(bo, {\n        ...e,\n        children: /* @__PURE__ */ n.jsx(Xt, {\n            size: 24,\n            \"data-test\": \"tableHandle\"\n        })\n    }), vo = (e)=>{\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [i, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [l, u] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [d, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [h, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [k, T] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [m, I] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [p, N] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [, q] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0), M = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), O = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), Z = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useFloating)({\n        open: r,\n        placement: \"left\",\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_20__.offset)(-10)\n        ]\n    }), U = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useFloating)({\n        open: r,\n        placement: \"top\",\n        middleware: [\n            (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_20__.offset)(-12)\n        ]\n    }), he = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useTransitionStyles)(Z.context), me = (0,_floating_ui_react__WEBPACK_IMPORTED_MODULE_19__.useTransitionStyles)(U.context);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>e.editor.tableHandles.onUpdate((P)=>{\n            o(P.show), s(P.block), x(P.rowIndex), T(P.colIndex), P.draggingState ? (I(P.draggingState.draggedCellOrientation), N(P.draggingState.mousePos)) : (I(void 0), N(void 0)), q(Math.random()), M.current = P.referencePosCell, O.current = P.referencePosTable, Z.update(), U.update();\n        }), [\n        U,\n        e.editor,\n        Z\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        Z.refs.setReference({\n            getBoundingClientRect: ()=>m === \"row\" ? new DOMRect(O.current.x, p, O.current.width, 0) : new DOMRect(O.current.x, M.current.y, O.current.width, M.current.height)\n        });\n    }, [\n        m,\n        p,\n        Z.refs\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        U.refs.setReference({\n            getBoundingClientRect: ()=>m === \"col\" ? new DOMRect(p, O.current.y, 0, O.current.height) : new DOMRect(M.current.x, O.current.y, M.current.width, O.current.height)\n        });\n    }, [\n        U.refs,\n        m,\n        p\n    ]);\n    const be = e.tableHandle || xo;\n    return !he.isMounted || !me.isMounted || i && l ? null : /* @__PURE__ */ n.jsxs(n.Fragment, {\n        children: [\n            !i && /* @__PURE__ */ n.jsx(\"div\", {\n                ref: Z.refs.setFloating,\n                style: {\n                    ...he.styles,\n                    ...Z.floatingStyles,\n                    zIndex: 1e4\n                },\n                children: /* @__PURE__ */ n.jsx(be, {\n                    orientation: \"row\",\n                    editor: e.editor,\n                    index: h,\n                    block: d,\n                    dragStart: e.editor.tableHandles.rowDragStart,\n                    dragEnd: e.editor.tableHandles.dragEnd,\n                    freezeHandles: e.editor.tableHandles.freezeHandles,\n                    unfreezeHandles: e.editor.tableHandles.unfreezeHandles,\n                    showOtherSide: ()=>u(!1),\n                    hideOtherSide: ()=>u(!0)\n                })\n            }),\n            !l && /* @__PURE__ */ n.jsx(\"div\", {\n                ref: U.refs.setFloating,\n                style: {\n                    ...me.styles,\n                    ...U.floatingStyles,\n                    zIndex: 1e4\n                },\n                children: /* @__PURE__ */ n.jsx(be, {\n                    orientation: \"column\",\n                    editor: e.editor,\n                    index: k,\n                    block: d,\n                    dragStart: e.editor.tableHandles.colDragStart,\n                    dragEnd: e.editor.tableHandles.dragEnd,\n                    freezeHandles: e.editor.tableHandles.freezeHandles,\n                    unfreezeHandles: e.editor.tableHandles.unfreezeHandles,\n                    showOtherSide: ()=>a(!1),\n                    hideOtherSide: ()=>a(!0)\n                })\n            })\n        ]\n    });\n};\nconst ko = {\n    // Removes button press effect\n    activeClassName: \"\"\n};\nfunction Po(e) {\n    const { editor: r, className: o, theme: i, children: a, ...l } = e, u = (0,use_prefers_color_scheme__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(), [d, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (or(r.domElement.parentElement), i === \"light\") {\n            s(\"light\");\n            return;\n        }\n        if (i === \"dark\") {\n            s(\"dark\");\n            return;\n        }\n        if (typeof i == \"object\") {\n            if (\"light\" in i && \"dark\" in i) {\n                xt(i[u === \"dark\" ? \"dark\" : \"light\"], r.domElement.parentElement), s(u === \"dark\" ? \"dark\" : \"light\");\n                return;\n            }\n            xt(i, r.domElement.parentElement), s(void 0);\n            return;\n        }\n        s(u === \"dark\" ? \"dark\" : \"light\");\n    }, [\n        u,\n        r.domElement,\n        i\n    ]), // as proposed here:  https://github.com/orgs/mantinedev/discussions/5685\n    /* @__PURE__ */ n.jsx(_mantine_core__WEBPACK_IMPORTED_MODULE_23__.MantineProvider, {\n        theme: ko,\n        cssVariablesSelector: \".bn-container\",\n        children: /* @__PURE__ */ n.jsx(_tiptap_react__WEBPACK_IMPORTED_MODULE_24__.EditorContent, {\n            editor: r._tiptapEditor,\n            className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\"bn-container\", o || \"\"),\n            \"data-color-scheme\": d,\n            ...l,\n            children: a || /* @__PURE__ */ n.jsxs(n.Fragment, {\n                children: [\n                    /* @__PURE__ */ n.jsx(Ur, {\n                        editor: r\n                    }),\n                    /* @__PURE__ */ n.jsx(Wr, {\n                        editor: r\n                    }),\n                    /* @__PURE__ */ n.jsx(lo, {\n                        editor: r\n                    }),\n                    /* @__PURE__ */ n.jsx(ro, {\n                        editor: r\n                    }),\n                    /* @__PURE__ */ n.jsx(Yr, {\n                        editor: r\n                    }),\n                    r.blockSchema.table && /* @__PURE__ */ n.jsx(vo, {\n                        editor: r\n                    })\n                ]\n            })\n        })\n    });\n}\nconst j = [\n    \"#FFFFFF\",\n    \"#EFEFEF\",\n    \"#CFCFCF\",\n    \"#AFAFAF\",\n    \"#7F7F7F\",\n    \"#3F3F3F\",\n    \"#1F1F1F\",\n    \"#161616\",\n    \"#0F0F0F\",\n    \"#000000\"\n], St = {\n    colors: {\n        editor: {\n            text: j[5],\n            background: j[0]\n        },\n        menu: {\n            text: j[5],\n            background: j[0]\n        },\n        tooltip: {\n            text: j[5],\n            background: j[1]\n        },\n        hovered: {\n            text: j[5],\n            background: j[1]\n        },\n        selected: {\n            text: j[0],\n            background: j[5]\n        },\n        disabled: {\n            text: j[3],\n            background: j[1]\n        },\n        shadow: j[2],\n        border: j[1],\n        sideMenu: j[2],\n        highlights: {\n            gray: {\n                text: \"#9b9a97\",\n                background: \"#ebeced\"\n            },\n            brown: {\n                text: \"#64473a\",\n                background: \"#e9e5e3\"\n            },\n            red: {\n                text: \"#e03e3e\",\n                background: \"#fbe4e4\"\n            },\n            orange: {\n                text: \"#d9730d\",\n                background: \"#f6e9d9\"\n            },\n            yellow: {\n                text: \"#dfab01\",\n                background: \"#fbf3db\"\n            },\n            green: {\n                text: \"#4d6461\",\n                background: \"#ddedea\"\n            },\n            blue: {\n                text: \"#0b6e99\",\n                background: \"#ddebf1\"\n            },\n            purple: {\n                text: \"#6940a5\",\n                background: \"#eae4f2\"\n            },\n            pink: {\n                text: \"#ad1a72\",\n                background: \"#f4dfeb\"\n            }\n        }\n    },\n    borderRadius: 6,\n    fontFamily: '\"Inter\", \"SF Pro Display\", -apple-system, BlinkMacSystemFont, \"Open Sans\", \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif'\n}, _o = {\n    colors: {\n        editor: {\n            text: j[2],\n            background: j[6]\n        },\n        menu: {\n            text: j[2],\n            background: j[6]\n        },\n        tooltip: {\n            text: j[2],\n            background: j[7]\n        },\n        hovered: {\n            text: j[2],\n            background: j[7]\n        },\n        selected: {\n            text: j[2],\n            background: j[8]\n        },\n        disabled: {\n            text: j[5],\n            background: j[7]\n        },\n        shadow: j[8],\n        border: j[7],\n        sideMenu: j[4],\n        highlights: {\n            gray: {\n                text: \"#bebdb8\",\n                background: \"#9b9a97\"\n            },\n            brown: {\n                text: \"#8e6552\",\n                background: \"#64473a\"\n            },\n            red: {\n                text: \"#ec4040\",\n                background: \"#be3434\"\n            },\n            orange: {\n                text: \"#e3790d\",\n                background: \"#b7600a\"\n            },\n            yellow: {\n                text: \"#dfab01\",\n                background: \"#b58b00\"\n            },\n            green: {\n                text: \"#6b8b87\",\n                background: \"#4d6461\"\n            },\n            blue: {\n                text: \"#0e87bc\",\n                background: \"#0b6e99\"\n            },\n            purple: {\n                text: \"#8552d7\",\n                background: \"#6940a5\"\n            },\n            pink: {\n                text: \"#da208f\",\n                background: \"#ad1a72\"\n            }\n        }\n    },\n    borderRadius: St.borderRadius,\n    fontFamily: St.fontFamily\n}, yo = {\n    Heading: {\n        group: \"Headings\",\n        icon: /* @__PURE__ */ n.jsx(zt, {\n            size: 18\n        }),\n        hint: \"Used for a top-level heading\",\n        shortcut: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Mod-Alt-1\")\n    },\n    \"Heading 2\": {\n        group: \"Headings\",\n        icon: /* @__PURE__ */ n.jsx(Nt, {\n            size: 18\n        }),\n        hint: \"Used for key sections\",\n        shortcut: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Mod-Alt-2\")\n    },\n    \"Heading 3\": {\n        group: \"Headings\",\n        icon: /* @__PURE__ */ n.jsx(Zt, {\n            size: 18\n        }),\n        hint: \"Used for subsections and group headings\",\n        shortcut: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Mod-Alt-3\")\n    },\n    \"Numbered List\": {\n        group: \"Basic blocks\",\n        icon: /* @__PURE__ */ n.jsx($t, {\n            size: 18\n        }),\n        hint: \"Used to display a numbered list\",\n        shortcut: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Mod-Shift-7\")\n    },\n    \"Bullet List\": {\n        group: \"Basic blocks\",\n        icon: /* @__PURE__ */ n.jsx(Wt, {\n            size: 18\n        }),\n        hint: \"Used to display an unordered list\",\n        shortcut: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Mod-Shift-8\")\n    },\n    Paragraph: {\n        group: \"Basic blocks\",\n        icon: /* @__PURE__ */ n.jsx(ue, {\n            size: 18\n        }),\n        hint: \"Used for the body of your document\",\n        shortcut: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.formatKeyboardShortcut)(\"Mod-Alt-0\")\n    },\n    Table: {\n        group: \"Advanced\",\n        icon: /* @__PURE__ */ n.jsx(jr, {\n            size: 18\n        }),\n        hint: \"Used for for tables\"\n    },\n    Image: {\n        group: \"Media\",\n        icon: /* @__PURE__ */ n.jsx(Hr, {}),\n        hint: \"Insert an image\"\n    }\n};\nfunction Co(e = _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.defaultBlockSchema) {\n    return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getDefaultSlashMenuItems)(e).map((o)=>({\n            ...o,\n            ...yo[o.name]\n        }));\n}\nfunction Do(e) {\n    const [r, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>e.getActiveStyles());\n    return Dt(e, ()=>{\n        o(e.getActiveStyles());\n    }), It(e, ()=>{\n        o(e.getActiveStyles());\n    }), r;\n}\nconst jo = (e)=>_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.BlockNoteEditor.create({\n        slashMenuItems: Co((0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getBlockSchemaFromSpecs)(e.blockSpecs || _blocknote_core__WEBPACK_IMPORTED_MODULE_1__.defaultBlockSpecs)),\n        ...e\n    }), Io = (e = {}, r = [])=>{\n    const o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>(o.current && o.current._tiptapEditor.destroy(), o.current = jo(e), o.current), r);\n};\nfunction So() {\n    const [, e] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    return ()=>e((r)=>r + 1);\n}\nconst Oo = (e)=>{\n    const r = So();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const o = ()=>{\n            requestAnimationFrame(()=>{\n                requestAnimationFrame(()=>{\n                    r();\n                });\n            });\n        };\n        return e.on(\"transaction\", o), ()=>{\n            e.off(\"transaction\", o);\n        };\n    }, [\n        e\n    ]);\n};\nvar ze, Se = react_dom__WEBPACK_IMPORTED_MODULE_5__;\nif (false) {}\nelse {\n    var Ht = Se.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    ze = function(e, r) {\n        Ht.usingClientEntryPoint = !0;\n        try {\n            return Se.createRoot(e, r);\n        } finally{\n            Ht.usingClientEntryPoint = !1;\n        }\n    };\n}\nfunction He(e) {\n    let r;\n    const o = document.createElement(\"div\"), i = ze(o);\n    if ((0,react_dom__WEBPACK_IMPORTED_MODULE_5__.flushSync)(()=>{\n        i.render(e((d)=>r = d || void 0));\n    }), !o.childElementCount) return console.warn(\"ReactInlineContentSpec: renderHTML() failed\"), {\n        dom: document.createElement(\"span\")\n    };\n    r == null || r.setAttribute(\"data-tmp-find\", \"true\");\n    const a = o.cloneNode(!0), l = a.firstElementChild, u = a.querySelector(\"[data-tmp-find]\");\n    return u == null || u.removeAttribute(\"data-tmp-find\"), i.unmount(), {\n        dom: l,\n        contentDOM: u || void 0\n    };\n}\nfunction De(e) {\n    var r;\n    return(// Creates `blockContent` element\n    /* @__PURE__ */ n.jsx(_tiptap_react__WEBPACK_IMPORTED_MODULE_24__.NodeViewWrapper, {\n        ...Object.fromEntries(Object.entries(e.domAttributes || {}).filter(([o])=>o !== \"class\")),\n        className: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.mergeCSSClasses)(\"bn-block-content\", ((r = e.domAttributes) == null ? void 0 : r.class) || \"\"),\n        \"data-content-type\": e.blockType,\n        ...Object.fromEntries(Object.entries(e.blockProps).filter(([o, i])=>!_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.inheritedProps.includes(o) && i !== e.propSchema[o].default).map(([o, i])=>[\n                (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.camelToDataKebab)(o),\n                i\n            ])),\n        children: e.children\n    }));\n}\nfunction Ao(e, r) {\n    const o = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createStronglyTypedTiptapNode)({\n        name: e.type,\n        content: e.content === \"inline\" ? \"inline*\" : \"\",\n        group: \"blockContent\",\n        selectable: !0,\n        addAttributes () {\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.propsToAttributes)(e.propSchema);\n        },\n        parseHTML () {\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getParseRules)(e, r.parse);\n        },\n        renderHTML () {\n            const i = document.createElement(\"div\");\n            return i.setAttribute(\"data-tmp-placeholder\", \"true\"), {\n                dom: i\n            };\n        },\n        addNodeView () {\n            return (i)=>(0,_tiptap_react__WEBPACK_IMPORTED_MODULE_24__.ReactNodeViewRenderer)((a)=>{\n                    var x;\n                    const l = this.options.editor, u = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getBlockFromPos)(a.getPos, l, this.editor, e.type), d = ((x = this.options.domAttributes) == null ? void 0 : x.blockContent) || {}, s = (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_24__.NodeViewContent)({}).ref, h = r.render;\n                    return /* @__PURE__ */ n.jsx(De, {\n                        blockType: u.type,\n                        blockProps: u.props,\n                        propSchema: e.propSchema,\n                        domAttributes: d,\n                        children: /* @__PURE__ */ n.jsx(h, {\n                            block: u,\n                            editor: l,\n                            contentRef: s\n                        })\n                    });\n                }, {\n                    className: \"bn-react-node-view-renderer\"\n                })(i);\n        }\n    });\n    return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createInternalBlockSpec)(e, {\n        node: o,\n        toInternalHTML: (i, a)=>{\n            var s, h;\n            const l = ((s = o.options.domAttributes) == null ? void 0 : s.blockContent) || {}, u = r.render, d = He((x)=>/* @__PURE__ */ n.jsx(De, {\n                    blockType: i.type,\n                    blockProps: i.props,\n                    propSchema: e.propSchema,\n                    domAttributes: l,\n                    children: /* @__PURE__ */ n.jsx(u, {\n                        block: i,\n                        editor: a,\n                        contentRef: x\n                    })\n                }));\n            return (h = d.contentDOM) == null || h.setAttribute(\"data-editable\", \"\"), d;\n        },\n        toExternalHTML: (i, a)=>{\n            var s, h;\n            const l = ((s = o.options.domAttributes) == null ? void 0 : s.blockContent) || {}, u = r.toExternalHTML || r.render, d = He((x)=>/* @__PURE__ */ n.jsx(De, {\n                    blockType: i.type,\n                    blockProps: i.props,\n                    propSchema: e.propSchema,\n                    domAttributes: l,\n                    children: /* @__PURE__ */ n.jsx(u, {\n                        block: i,\n                        editor: a,\n                        contentRef: x\n                    })\n                }));\n            return (h = d.contentDOM) == null || h.setAttribute(\"data-editable\", \"\"), d;\n        }\n    });\n}\nfunction Ho(e, r, o, i) {\n    return ()=>// Creates inline content section element\n        /* @__PURE__ */ n.jsx(_tiptap_react__WEBPACK_IMPORTED_MODULE_24__.NodeViewWrapper, {\n            as: \"span\",\n            className: \"bn-inline-content-section\",\n            \"data-inline-content-type\": r,\n            ...Object.fromEntries(Object.entries(o).filter(([a, l])=>l !== i[a].default).map(([a, l])=>[\n                    (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.camelToDataKebab)(a),\n                    l\n                ])),\n            children: e\n        });\n}\nfunction Fo(e, r) {\n    const o = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createStronglyTypedTiptapNode)({\n        name: e.type,\n        inline: !0,\n        group: \"inline\",\n        selectable: e.content === \"styled\",\n        atom: e.content === \"none\",\n        content: e.content === \"styled\" ? \"inline*\" : \"\",\n        addAttributes () {\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.propsToAttributes)(e.propSchema);\n        },\n        addKeyboardShortcuts () {\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.addInlineContentKeyboardShortcuts)(e);\n        },\n        parseHTML () {\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getInlineContentParseRules)(e);\n        },\n        renderHTML ({ node: i }) {\n            const a = this.options.editor, l = (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.nodeToCustomInlineContent)(i, a.inlineContentSchema, a.styleSchema), u = r.render, d = He((s)=>/* @__PURE__ */ n.jsx(u, {\n                    inlineContent: l,\n                    contentRef: s\n                }));\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.addInlineContentAttributes)(d, e.type, i.attrs, e.propSchema);\n        },\n        // TODO: needed?\n        addNodeView () {\n            const i = this.options.editor;\n            return (a)=>(0,_tiptap_react__WEBPACK_IMPORTED_MODULE_24__.ReactNodeViewRenderer)((l)=>{\n                    const u = (0,_tiptap_react__WEBPACK_IMPORTED_MODULE_24__.NodeViewContent)({}).ref, d = r.render, s = Ho(/* @__PURE__ */ n.jsx(d, {\n                        contentRef: u,\n                        inlineContent: (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.nodeToCustomInlineContent)(l.node, i.inlineContentSchema, i.styleSchema)\n                    }), e.type, l.node.attrs, e.propSchema);\n                    return /* @__PURE__ */ n.jsx(s, {});\n                }, {\n                    className: \"bn-ic-react-node-view-renderer\",\n                    as: \"span\"\n                })(a);\n        }\n    });\n    return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createInternalInlineContentSpec)(e, {\n        node: o\n    });\n}\nfunction zo(e, r) {\n    const o = _tiptap_react__WEBPACK_IMPORTED_MODULE_25__.Mark.create({\n        name: e.type,\n        addAttributes () {\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.stylePropsToAttributes)(e.propSchema);\n        },\n        parseHTML () {\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.getStyleParseRules)(e);\n        },\n        renderHTML ({ mark: i }) {\n            const a = {};\n            e.propSchema === \"string\" && (a.value = i.attrs.stringValue);\n            const l = r.render, u = He((d)=>/* @__PURE__ */ n.jsx(l, {\n                    ...a,\n                    contentRef: d\n                }));\n            return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.addStyleAttributes)(u, e.type, i.attrs.stringValue, e.propSchema);\n        }\n    });\n    return (0,_blocknote_core__WEBPACK_IMPORTED_MODULE_1__.createInternalStyleSpec)(e, {\n        mark: o\n    });\n}\n //# sourceMappingURL=blocknote-react.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@blocknote/react/dist/blocknote-react.js\n");

/***/ })

};
;